{"version":3,"file":"messagingService-BXpzguzD.js","sources":["../../src/api/services/messaging/messagingService.ts"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface ContactMessage {\n  id: string;\n  contactId: string;\n  content: string;\n  sender: 'user' | 'contact';\n  timestamp: string;\n  status: 'sending' | 'sent' | 'delivered' | 'failed';\n  messageId?: string;\n  twilioSid?: string;\n  phoneNumber: string;\n  fromPhoneNumber?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface SendMessageRequest {\n  toPhoneNumber: string;\n  message: string;\n  fromPhoneNumber?: string;\n  contactId?: string;\n}\n\nexport interface UserPhoneNumber {\n  id: string;\n  number: string;\n  provider: string;\n  type: string;\n  status: string;\n  created_at: string;\n}\n\nexport interface SendMessageResponse {\n  success: boolean;\n  messageId?: string;\n  twilioSid?: string;\n  status?: string;\n  error?: string;\n}\n\nexport interface MessageHistoryResponse {\n  success: boolean;\n  messages: ContactMessage[];\n  totalCount: number;\n  page: number;\n  totalPages: number;\n  hasNewMessages?: boolean;\n}\n\n/**\n * Send SMS message to a contact\n */\nexport async function sendSMSToContact(data: SendMessageRequest): Promise<SendMessageResponse> {\n  try {\n    console.log('üì± Sending SMS to contact:', data);\n\n    // Use the correct contact messaging API endpoint\n    const response = await axiosInstance.post(`/api/contact-messages/contacts/${data.contactId}/messages`, {\n      content: data.message,\n      fromPhoneNumber: data.fromPhoneNumber\n    });\n\n    if (response.data.success) {\n      toast.success('Message sent successfully');\n      return {\n        success: true,\n        messageId: response.data.data?.messageId,\n        twilioSid: response.data.data?.twilioSid,\n        status: response.data.data?.status\n      };\n    } else {\n      throw new Error(response.data.message || 'Failed to send message');\n    }\n  } catch (error: any) {\n    console.error('Error sending SMS:', error);\n    const message = error.response?.data?.message || error.message || 'Failed to send message';\n    toast.error(message);\n    \n    return {\n      success: false,\n      error: message\n    };\n  }\n}\n\n/**\n * Get message history for a contact\n */\nexport async function getContactMessages(\n  contactId: string, \n  page: number = 1, \n  limit: number = 50\n): Promise<MessageHistoryResponse> {\n  try {\n    const response = await axiosInstance.get(`/api/contact-messages/contacts/${contactId}/messages`, {\n      params: { page, limit }\n    });\n\n    return {\n      success: true,\n      messages: response.data.messages || [],\n      totalCount: response.data.totalCount || 0,\n      page: response.data.page || 1,\n      totalPages: response.data.totalPages || 1\n    };\n  } catch (error: any) {\n    console.error('Error fetching contact messages:', error);\n    const message = error.response?.data?.message || 'Failed to fetch messages';\n    toast.error(message);\n    \n    return {\n      success: false,\n      messages: [],\n      totalCount: 0,\n      page: 1,\n      totalPages: 1\n    };\n  }\n}\n\n/**\n * Check for new incoming messages only (efficient polling)\n */\nexport async function checkNewIncomingMessages(\n  contactId: string,\n  lastMessageId?: string\n): Promise<MessageHistoryResponse> {\n  try {\n    console.log(`üîç Checking new incoming messages for contact ${contactId}, after message ${lastMessageId}`);\n\n    const params: any = {};\n    if (lastMessageId) {\n      params.lastMessageId = lastMessageId;\n    }\n\n    const response = await axiosInstance.get(`/api/contact-messages/contacts/${contactId}/new-messages`, {\n      params\n    });\n\n    return {\n      success: true,\n      messages: response.data.data || [],\n      hasNewMessages: response.data.hasNewMessages || false,\n      totalCount: response.data.data?.length || 0,\n      page: 1,\n      totalPages: 1\n    };\n  } catch (error: any) {\n    console.error('Error checking new incoming messages:', error);\n    // Don't show toast for polling errors to avoid spam\n\n    return {\n      success: false,\n      messages: [],\n      hasNewMessages: false,\n      totalCount: 0,\n      page: 1,\n      totalPages: 1\n    };\n  }\n}\n\n/**\n * Save message to database\n */\nexport async function saveMessage(messageData: Partial<ContactMessage>): Promise<ContactMessage | null> {\n  try {\n    const response = await axiosInstance.post('/api/contact-messages/messages', messageData);\n    \n    if (response.data.success) {\n      return response.data.message;\n    } else {\n      throw new Error(response.data.message || 'Failed to save message');\n    }\n  } catch (error: any) {\n    console.error('Error saving message:', error);\n    const message = error.response?.data?.message || 'Failed to save message';\n    toast.error(message);\n    return null;\n  }\n}\n\n/**\n * Update message status\n */\nexport async function updateMessageStatus(\n  messageId: string, \n  status: ContactMessage['status']\n): Promise<boolean> {\n  try {\n    const response = await axiosInstance.patch(`/api/contact-messages/messages/${messageId}`, {\n      status\n    });\n\n    return response.data.success;\n  } catch (error: any) {\n    console.error('Error updating message status:', error);\n    return false;\n  }\n}\n\n/**\n * Get all conversations (contacts with recent messages)\n */\nexport async function getConversations(page: number = 1, limit: number = 20) {\n  try {\n    const response = await axiosInstance.get('/api/contact-messages/conversations', {\n      params: { page, limit }\n    });\n\n    return {\n      success: true,\n      conversations: response.data.conversations || [],\n      totalCount: response.data.totalCount || 0,\n      page: response.data.page || 1,\n      totalPages: response.data.totalPages || 1\n    };\n  } catch (error: any) {\n    console.error('Error fetching conversations:', error);\n    const message = error.response?.data?.message || 'Failed to fetch conversations';\n    toast.error(message);\n    \n    return {\n      success: false,\n      conversations: [],\n      totalCount: 0,\n      page: 1,\n      totalPages: 1\n    };\n  }\n}\n\n/**\n * Test Twilio connection\n */\nexport async function testTwilioConnection() {\n  try {\n    const response = await axiosInstance.get('/api/text-webhook/test-connection');\n    \n    if (response.data.success) {\n      toast.success('Twilio connection successful');\n      return {\n        success: true,\n        accountName: response.data.data?.accountName,\n        accountSid: response.data.data?.accountSid\n      };\n    } else {\n      throw new Error(response.data.message || 'Connection test failed');\n    }\n  } catch (error: any) {\n    console.error('Error testing Twilio connection:', error);\n    const message = error.response?.data?.message || 'Connection test failed';\n    toast.error(message);\n    \n    return {\n      success: false,\n      error: message\n    };\n  }\n}\n\n/**\n * Format phone number to E.164 format\n */\nexport function formatPhoneToE164(phone: string): string {\n  // Remove all non-digit characters except +\n  const cleaned = phone.replace(/[^\\d+]/g, '');\n  \n  // If it starts with +, return as is\n  if (cleaned.startsWith('+')) {\n    return cleaned;\n  }\n  \n  // If it's 10 digits, assume US number\n  if (cleaned.length === 10) {\n    return `+1${cleaned}`;\n  }\n  \n  // If it's 11 digits and starts with 1, assume US number\n  if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    return `+${cleaned}`;\n  }\n  \n  // Otherwise, add + if not present\n  return cleaned.startsWith('+') ? cleaned : `+${cleaned}`;\n}\n\n/**\n * Validate phone number format\n */\nexport function isValidPhoneNumber(phone: string): boolean {\n  const e164Pattern = /^\\+[1-9]\\d{1,14}$/;\n  const formatted = formatPhoneToE164(phone);\n  return e164Pattern.test(formatted);\n}\n\n/**\n * Format phone number for display\n */\nexport function formatPhoneForDisplay(phone: string): string {\n  const cleaned = phone.replace(/[^\\d]/g, '');\n  \n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  }\n  \n  if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    const withoutCountryCode = cleaned.slice(1);\n    return `+1 (${withoutCountryCode.slice(0, 3)}) ${withoutCountryCode.slice(3, 6)}-${withoutCountryCode.slice(6)}`;\n  }\n  \n  return phone;\n}\n\n/**\n * Get user's phone numbers for messaging\n */\nexport async function getUserPhoneNumbers(): Promise<UserPhoneNumber[]> {\n  try {\n    const response = await axiosInstance.get('/api/contact-messages/user/phone-numbers');\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || 'Failed to get phone numbers');\n    }\n  } catch (error: any) {\n    console.error('Error getting user phone numbers:', error);\n    toast.error(error.response?.data?.message || 'Failed to get phone numbers');\n    throw error;\n  }\n}\n\nexport default {\n  sendSMSToContact,\n  getContactMessages,\n  saveMessage,\n  updateMessageStatus,\n  getConversations,\n  testTwilioConnection,\n  formatPhoneToE164,\n  isValidPhoneNumber,\n  formatPhoneForDisplay,\n  getUserPhoneNumbers\n};\n"],"names":["sendSMSToContact","data","response","axiosInstance","toast","_a","_b","_c","error","message","_e","_d","getContactMessages","contactId","page","limit","checkNewIncomingMessages","lastMessageId","params","getConversations","formatPhoneToE164","phone","cleaned","formatPhoneForDisplay","withoutCountryCode","getUserPhoneNumbers"],"mappings":"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"}