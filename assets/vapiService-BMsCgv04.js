import{d as c,t}from"./index-DWPNxztX.js";class i{static async createWorkflow(s){var o,e;try{return(await c.post("/api/workflows/vapi",s)).data.data}catch(r){console.error("Error creating VAPI workflow:",r);const a=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to create workflow";throw t.error(a),r}}static async getWorkflow(s){var o,e;try{return(await c.get(`/api/workflows/vapi/${s}`)).data.data}catch(r){console.error("Error fetching VAPI workflow:",r);const a=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to fetch workflow";throw t.error(a),r}}static async updateWorkflow(s,o){var e,r;try{return(await c.patch(`/api/workflows/vapi/${s}`,o)).data.data}catch(a){console.error("Error updating VAPI workflow:",a);const l=((r=(e=a.response)==null?void 0:e.data)==null?void 0:r.message)||"Failed to update workflow";throw t.error(l),a}}static async deleteWorkflow(s){var o,e;try{await c.delete(`/api/workflows/vapi/${s}`),t.success("Workflow deleted successfully")}catch(r){console.error("Error deleting VAPI workflow:",r);const a=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to delete workflow";throw t.error(a),r}}static async listWorkflows(s){var o,e;try{return(await c.get("/api/workflows/vapi",{params:s})).data.data}catch(r){console.error("Error listing VAPI workflows:",r);const a=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to list workflows";throw t.error(a),r}}static async createCall(s){var o,e;try{const r=await c.post("/api/workflows/vapi/calls",s);return t.success("Call initiated successfully"),r.data.data}catch(r){console.error("Error creating VAPI call:",r);const a=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to create call";throw t.error(a),r}}static async getTemplates(){var s,o;try{return(await c.get("/api/workflows/vapi/templates")).data.data}catch(e){console.error("Error fetching VAPI templates:",e);const r=((o=(s=e.response)==null?void 0:s.data)==null?void 0:o.message)||"Failed to fetch templates";throw t.error(r),e}}static async validateWorkflow(s){var o,e;try{return(await c.post("/api/workflows/vapi/validate",s)).data.data}catch(r){console.error("Error validating VAPI workflow:",r);const a=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to validate workflow";throw t.error(a),r}}static async autoSaveWorkflow(s,o){try{await c.patch(`/api/workflows/vapi/${s}`,o)}catch(e){console.warn("Auto-save failed:",e)}}static async duplicateWorkflow(s,o){var e,r;try{const a=await c.post(`/api/workflows/vapi/${s}/duplicate`,{name:o});return t.success("Workflow duplicated successfully"),a.data.data}catch(a){console.error("Error duplicating VAPI workflow:",a);const l=((r=(e=a.response)==null?void 0:e.data)==null?void 0:r.message)||"Failed to duplicate workflow";throw t.error(l),a}}}export{i as V};
//# sourceMappingURL=vapiService-BMsCgv04.js.map
