{"version":3,"file":"CallRecordingPlayer-ASK-9Eug.js","sources":["../../src/api/services/callHistory/callHistoryService.ts","../../src/components/CallRecordingPlayer.tsx"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface CallHistoryItem {\n  id: string;\n  call_id: string;\n  customer_number: string;\n  status: \"queued\" | \"ringing\" | \"in-progress\" | \"forwarding\" | \"ended\";\n  type: \"outbound\" | \"inbound\" | \"web\";\n  duration: number | string | null | undefined;\n  cost: number | string | null | undefined;\n  transcript: string;\n  recording_url?: string;\n  recordingUrl?: string;\n  recording?: string;\n  assistant_id?: string;\n  assistant_name?: string;\n  end_reason?: string;\n  started_at?: string;\n  ended_at?: string;\n  created_at: string;\n  updated_at: string;\n  metadata?: any;\n}\n\nexport interface CallHistoryResponse {\n  calls: CallHistoryItem[];\n  totalCalls: number;\n  currentPage: number;\n  totalPages: number;\n  hasNextPage: boolean;\n  hasPrevPage: boolean;\n}\n\n// Get call history for a specific contact by phone number\nexport async function getContactCallHistory(\n  phoneNumber: string,\n  page: number = 1,\n  limit: number = 10\n): Promise<CallHistoryResponse> {\n  try {\n    // Encode phone number to handle special characters like +\n    const encodedPhoneNumber = encodeURIComponent(phoneNumber);\n    \n    const response = await axiosInstance.get(\n      `/api/outboundcall/contact/${encodedPhoneNumber}/history`,\n      {\n        params: { page, limit }\n      }\n    );\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to fetch call history\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching call history:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch call history\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get call recording URL\nexport async function getCallRecording(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/recording/${callId}`);\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get recording\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching call recording:\", error);\n\n    // Don't show toast for 404 errors (recording not available)\n    if (error.response?.status !== 404) {\n      const message = error.response?.data?.message || \"Failed to get recording\";\n      toast.error(message);\n    }\n\n    throw error;\n  }\n}\n\n// Get call transcript\nexport async function getCallTranscript(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/transcript/${callId}`);\n    \n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get transcript\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching call transcript:\", error);\n    const message = error.response?.data?.message || \"Failed to get transcript\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Format duration from seconds to readable format\nexport function formatDuration(seconds: number | string | null | undefined): string {\n  // Handle null, undefined, or empty values\n  if (seconds === null || seconds === undefined || seconds === '') {\n    return \"0:00\";\n  }\n\n  // Convert to number if it's a string\n  const numericSeconds = typeof seconds === 'string' ? parseInt(seconds, 10) : seconds;\n\n  // Handle NaN or invalid numbers\n  if (isNaN(numericSeconds) || numericSeconds === 0) {\n    return \"0:00\";\n  }\n\n  const minutes = Math.floor(numericSeconds / 60);\n  const remainingSeconds = numericSeconds % 60;\n\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n\n// Format call status for display\nexport function formatCallStatus(status: string): { text: string; color: string } {\n  switch (status) {\n    case \"ended\":\n      return { text: \"Completed\", color: \"text-green-600\" };\n    case \"in-progress\":\n      return { text: \"In Progress\", color: \"text-blue-600\" };\n    case \"ringing\":\n      return { text: \"Ringing\", color: \"text-yellow-600\" };\n    case \"queued\":\n      return { text: \"Queued\", color: \"text-gray-600\" };\n    case \"forwarding\":\n      return { text: \"Forwarding\", color: \"text-purple-600\" };\n    default:\n      return { text: status, color: \"text-gray-600\" };\n  }\n}\n\n// Format call cost for display\nexport function formatCallCost(cost: number | string | null | undefined): string {\n  // Handle null, undefined, or empty values\n  if (cost === null || cost === undefined || cost === '') {\n    return \"$0.00\";\n  }\n\n  // Convert to number if it's a string\n  const numericCost = typeof cost === 'string' ? parseFloat(cost) : cost;\n\n  // Handle NaN or invalid numbers\n  if (isNaN(numericCost) || numericCost === 0) {\n    return \"$0.00\";\n  }\n\n  return `$${numericCost.toFixed(2)}`;\n}\n\n// Check if call has recording available\nexport function hasRecording(call: CallHistoryItem): boolean {\n  // Check if we have a valid recording URL (not a mock URL)\n  const recordingUrl = call.recording_url || call.recordingUrl;\n  const hasMockUrl = recordingUrl && recordingUrl.includes('/api/recordings/') && recordingUrl.includes('/stream');\n\n  return !!(\n    (recordingUrl && !hasMockUrl) || // Has real recording URL\n    call.recording === \"available\" || // Explicitly marked as available\n    call.status === \"ended\" // Ended calls might have recordings available from VAPI\n  );\n}\n\n// Get recording URL from call data\nexport function getRecordingUrl(call: CallHistoryItem): string | null {\n  return call.recording_url || call.recordingUrl || null;\n}\n\n// Format date for display\nexport function formatCallDate(dateString: string): string {\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    return dateString;\n  }\n}\n\n// Campaign-specific endpoints that fetch directly from VAPI\nexport async function getCampaignCallRecording(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/campaign-recording/${callId}`);\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get campaign call recording\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching campaign call recording:\", error);\n    const message = error.response?.data?.message || \"Failed to get campaign call recording\";\n    toast.error(message);\n    throw error;\n  }\n}\n\nexport async function getCampaignCallTranscript(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/campaign-transcript/${callId}`);\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get campaign call transcript\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching campaign call transcript:\", error);\n    const message = error.response?.data?.message || \"Failed to get campaign call transcript\";\n    toast.error(message);\n    throw error;\n  }\n}\n","import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Play,\n  Pause,\n  Volume2,\n  VolumeX,\n  Download,\n  FileText,\n  X,\n  RefreshCw\n} from \"lucide-react\";\nimport { CallHistoryItem, getCallRecording, getCallTranscript, getCampaignCallRecording } from \"@/api/services/callHistory/callHistoryService\";\nimport { toast } from \"sonner\";\n\ninterface CallRecordingPlayerProps {\n  call: CallHistoryItem | null;\n  isOpen: boolean;\n  onClose: () => void;\n  // Optional custom service functions for campaign calls\n  customGetRecording?: (callId: string) => Promise<any>;\n  customGetTranscript?: (callId: string) => Promise<any>;\n}\n\nexport function CallRecordingPlayer({ call, isOpen, onClose, customGetRecording, customGetTranscript }: CallRecordingPlayerProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [recordingUrl, setRecordingUrl] = useState<string | null>(null);\n  const [transcript, setTranscript] = useState<string | null>(null);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [parsedMessages, setParsedMessages] = useState<Array<{\n    speaker: 'assistant' | 'customer';\n    message: string;\n    timestamp?: string;\n  }>>([]);\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const loadingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Load recording when call changes\n  useEffect(() => {\n    if (call && isOpen) {\n      loadRecording();\n      loadTranscript();\n    }\n  }, [call, isOpen]);\n\n  // Load audio source when recording URL is available and modal is open\n  useEffect(() => {\n    if (!recordingUrl || !isOpen) {\n      console.log('🎵 Skipping audio load - recordingUrl:', !!recordingUrl, 'isOpen:', isOpen);\n      return;\n    }\n\n    console.log('🎵 Starting audio load for URL:', recordingUrl);\n\n    // Set loading state immediately\n    setIsLoading(true);\n    setIsPlaying(false);\n\n    // Use a timeout to ensure the audio element is rendered\n    const loadTimer = setTimeout(() => {\n      const audio = audioRef.current;\n      if (!audio) {\n        console.log('🎵 Audio element not found, retrying...');\n        // Retry after a longer delay\n        setTimeout(() => {\n          const retryAudio = audioRef.current;\n          if (!retryAudio) {\n            console.log('🎵 Audio element still not found after retry');\n            setIsLoading(false);\n            toast.error('Audio player not ready');\n            return;\n          }\n\n          console.log('🎵 Audio element found on retry, setting up audio');\n          setupAudio(retryAudio, recordingUrl);\n        }, 1000);\n        return;\n      }\n\n      console.log('🎵 Audio element found, setting up audio');\n      setupAudio(audio, recordingUrl);\n    }, 500);\n\n    // Helper function to setup audio\n    const setupAudio = (audio: HTMLAudioElement, url: string) => {\n      // Clear any previous timeout\n      if (loadingTimeoutRef.current) {\n        clearTimeout(loadingTimeoutRef.current);\n      }\n\n      // Reset audio element\n      audio.pause();\n      audio.currentTime = 0;\n\n      // Build the full URL\n      const fullUrl = url.startsWith('http')\n        ? url\n        : `${window.location.origin}${url}`;\n\n      console.log('🎵 Setting audio src to:', fullUrl);\n\n      // Set audio properties\n      audio.crossOrigin = 'anonymous';\n      audio.preload = 'metadata';\n\n      // Set timeout for loading\n      loadingTimeoutRef.current = setTimeout(() => {\n        console.log('⏰ Audio loading timeout after 15 seconds');\n        setIsLoading(false);\n        toast.error('Recording loading timed out');\n      }, 15000);\n\n      // Set the source and load\n      audio.src = fullUrl;\n      audio.load();\n\n      console.log('🎵 Audio load initiated, src set to:', audio.src);\n      console.log('🎵 Audio readyState:', audio.readyState);\n      console.log('🎵 Audio networkState:', audio.networkState);\n    };\n\n    return () => {\n      clearTimeout(loadTimer);\n      if (loadingTimeoutRef.current) {\n        clearTimeout(loadingTimeoutRef.current);\n      }\n    };\n  }, [recordingUrl, isOpen]);\n\n  // Handle audio error events\n  const handleError = (e: React.SyntheticEvent<HTMLAudioElement, Event>) => {\n    console.error('❌ Audio playback error:', e);\n    const audioElement = e.target as HTMLAudioElement;\n    const error = audioElement.error;\n    setIsLoading(false);\n\n    // Clear loading timeout\n    if (loadingTimeoutRef.current) {\n      clearTimeout(loadingTimeoutRef.current);\n      loadingTimeoutRef.current = null;\n    }\n\n    let errorMessage = \"Failed to load recording\";\n    if (error) {\n      switch (error.code) {\n        case error.MEDIA_ERR_ABORTED:\n          errorMessage = \"Recording playback was aborted\";\n          break;\n        case error.MEDIA_ERR_NETWORK:\n          errorMessage = \"Network error while loading recording\";\n          break;\n        case error.MEDIA_ERR_DECODE:\n          errorMessage = \"Recording format not supported\";\n          break;\n        case error.MEDIA_ERR_SRC_NOT_SUPPORTED:\n          errorMessage = \"Recording source not supported or not found\";\n          break;\n        default:\n          errorMessage = \"Unknown error loading recording\";\n      }\n    }\n\n    console.error('Audio error details:', {\n      error: error,\n      src: audioElement.src,\n      networkState: audioElement.networkState,\n      readyState: audioElement.readyState\n    });\n\n    // No fallback - show the error directly\n\n    toast.error(errorMessage);\n    setIsPlaying(false);\n    setIsLoading(false);\n  };\n\n  // Audio event handlers\n  const handleLoadedMetadata = () => {\n    console.log('🎵 Audio metadata loaded successfully');\n    if (loadingTimeoutRef.current) {\n      clearTimeout(loadingTimeoutRef.current);\n    }\n    setIsLoading(false);\n\n    const audio = audioRef.current;\n    if (audio) {\n      setDuration(audio.duration);\n      console.log('🎵 Audio duration:', audio.duration, 'seconds');\n    }\n  };\n\n  const handleCanPlay = () => {\n    console.log('🎵 Audio can play - ready for playback');\n    if (loadingTimeoutRef.current) {\n      clearTimeout(loadingTimeoutRef.current);\n    }\n    setIsLoading(false);\n  };\n\n  const handleLoadStart = () => {\n    console.log('🎵 Audio load started');\n    setIsLoading(true);\n  };\n\n  const handleTimeUpdate = () => {\n    const audio = audioRef.current;\n    if (audio) {\n      setCurrentTime(audio.currentTime);\n    }\n  };\n\n  const handleEnded = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n  };\n\n  const loadRecording = async () => {\n    console.log('🎵 loadRecording called with call:', call);\n    if (!call) {\n      console.log('🎵 loadRecording: No call provided');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const callId = call.call_id || call.id;\n      console.log('🎵 loadRecording: Starting to load recording for call ID:', callId);\n\n      // First check if we already have a recording URL from the call data\n      const existingUrl = call.recording_url || call.recordingUrl || call.recording;\n      console.log('🎵 Existing recording URL from call data:', existingUrl);\n      console.log('🎵 Call object keys:', Object.keys(call));\n      console.log('🎵 Call recording status:', call.recording);\n      console.log('🎵 Call metadata:', call.metadata);\n\n      // Validate the existing URL - skip invalid/mock URLs\n      if (existingUrl &&\n          existingUrl !== '/api/recordings/undefined/stream' &&\n          !existingUrl.includes('undefined') &&\n          !existingUrl.includes('null') &&\n          existingUrl.length > 10) {\n\n        // If it's a VAPI storage URL, use our proxy to avoid CORS issues\n        if (existingUrl.includes('storage.vapi.ai')) {\n          const proxyUrl = `/api/outboundcall/recording/${callId}/proxy`;\n          console.log('🎵 Converting VAPI URL to proxy to avoid CORS:', proxyUrl);\n          setRecordingUrl(proxyUrl);\n          console.log('🎵 Recording URL set to proxy:', proxyUrl);\n        } else {\n          console.log('🎵 Using existing URL directly:', existingUrl);\n          setRecordingUrl(existingUrl);\n          console.log('🎵 Recording URL set to existing:', existingUrl);\n        }\n        setIsLoading(false);\n        return;\n      }\n\n      if (!callId) {\n        console.error('No call ID available for recording fetch');\n        toast.error(\"Call ID not available\");\n        return;\n      }\n\n      console.log('Fetching recording from VAPI for call ID:', callId);\n\n      // Try to fetch recording directly from VAPI via campaign endpoint first\n      try {\n        const recordingData = await getCampaignCallRecording(callId);\n        console.log('🎵 Campaign recording response:', recordingData);\n\n        if (recordingData?.recordingUrl) {\n          // Use proxy URL to avoid CORS issues\n          const proxyUrl = `/api/outboundcall/recording/${callId}/proxy`;\n          console.log('🎵 Got VAPI recording, using proxy URL:', proxyUrl);\n          setRecordingUrl(proxyUrl);\n          console.log('🎵 Recording URL set to proxy from campaign:', proxyUrl);\n          return;\n        }\n      } catch (error) {\n        console.error('🎵 Error fetching from campaign recording endpoint:', error);\n      }\n\n      // Fallback to regular recording endpoint\n      try {\n        const recordingData = customGetRecording\n          ? await customGetRecording(callId)\n          : await getCallRecording(callId);\n\n        console.log('🎵 Regular recording response:', recordingData);\n\n        if (recordingData?.recordingUrl) {\n          // Use proxy URL to avoid CORS issues\n          const proxyUrl = `/api/outboundcall/recording/${callId}/proxy`;\n          console.log('🎵 Got recording, using proxy URL:', proxyUrl);\n          setRecordingUrl(proxyUrl);\n          console.log('🎵 Recording URL set to proxy from regular:', proxyUrl);\n          return;\n        }\n      } catch (error) {\n        console.error('🎵 Error fetching from regular recording endpoint:', error);\n      }\n\n      // If both endpoints fail, show error\n      console.error('🎵 No recording URL available from any endpoint');\n      toast.error(\"Recording not available from VAPI\");\n    } catch (error) {\n      console.error(\"Error loading recording:\", error);\n      toast.error(\"Failed to load recording\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadTranscript = async () => {\n    if (!call) return;\n\n    try {\n      console.log('Loading transcript for call:', call);\n      console.log('Call ID:', call.call_id, 'Call object ID:', call.id);\n\n      // First check if call already has transcript\n      if (call.transcript) {\n        console.log('Using existing transcript from call object');\n        setTranscript(call.transcript);\n        parseTranscriptToMessages(call.transcript);\n        return;\n      }\n\n      // Use call_id if available, otherwise fall back to id\n      const callId = call.call_id || call.id;\n      console.log('Available call IDs - call_id:', call.call_id, 'id:', call.id, 'final callId:', callId);\n\n      if (!callId) {\n        console.error('No call ID available for transcript fetch');\n        return;\n      }\n\n      console.log('Fetching transcript from API for call ID:', callId);\n      // If not, fetch from API\n      const transcriptData = customGetTranscript\n        ? await customGetTranscript(callId)\n        : await getCallTranscript(callId);\n      if (transcriptData && transcriptData.transcript) {\n        setTranscript(transcriptData.transcript);\n        parseTranscriptToMessages(transcriptData.transcript);\n      }\n    } catch (error) {\n      console.error(\"Error loading transcript:\", error);\n      // Don't show error for transcript as it's optional\n    }\n  };\n\n  // Parse transcript into WhatsApp-style messages\n  const parseTranscriptToMessages = (transcriptText: string) => {\n    if (!transcriptText) return;\n\n    // Split transcript by common patterns (Assistant:, Customer:, AI:, Human:, etc.)\n    const lines = transcriptText.split(/\\n+/);\n    const messages: Array<{\n      speaker: 'assistant' | 'customer';\n      message: string;\n      timestamp?: string;\n    }> = [];\n\n    let currentSpeaker: 'assistant' | 'customer' = 'assistant';\n    let currentMessage = '';\n\n    lines.forEach((line) => {\n      const trimmedLine = line.trim();\n      if (!trimmedLine) return;\n\n      // Check for speaker indicators\n      if (trimmedLine.match(/^(Assistant|AI|Bot|Agent):/i)) {\n        // Save previous message if exists\n        if (currentMessage) {\n          messages.push({\n            speaker: currentSpeaker,\n            message: currentMessage.trim()\n          });\n        }\n        currentSpeaker = 'assistant';\n        currentMessage = trimmedLine.replace(/^(Assistant|AI|Bot|Agent):\\s*/i, '');\n      } else if (trimmedLine.match(/^(Customer|Human|User|Caller):/i)) {\n        // Save previous message if exists\n        if (currentMessage) {\n          messages.push({\n            speaker: currentSpeaker,\n            message: currentMessage.trim()\n          });\n        }\n        currentSpeaker = 'customer';\n        currentMessage = trimmedLine.replace(/^(Customer|Human|User|Caller):\\s*/i, '');\n      } else {\n        // Continue current message\n        currentMessage += (currentMessage ? ' ' : '') + trimmedLine;\n      }\n    });\n\n    // Add final message\n    if (currentMessage) {\n      messages.push({\n        speaker: currentSpeaker,\n        message: currentMessage.trim()\n      });\n    }\n\n    // If no speaker patterns found, treat as single assistant message\n    if (messages.length === 0 && transcriptText.trim()) {\n      messages.push({\n        speaker: 'assistant',\n        message: transcriptText.trim()\n      });\n    }\n\n    setParsedMessages(messages);\n  };\n\n  const togglePlayPause = async () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    try {\n      if (isPlaying) {\n        audio.pause();\n        setIsPlaying(false);\n      } else {\n        // Check if audio is loaded and ready\n        if (audio.readyState >= 2) { // HAVE_CURRENT_DATA or higher\n          console.log('🎵 Audio ready, attempting to play');\n          await audio.play();\n          setIsPlaying(true);\n        } else if (audio.readyState === 0) { // HAVE_NOTHING\n          console.log('🎵 Audio not loaded, reloading...');\n          console.log('🎵 Current audio src:', audio.src);\n          console.log('🎵 Audio networkState:', audio.networkState);\n          toast.info('Loading audio, please wait...');\n          audio.load();\n        } else {\n          console.log('🎵 Audio loading, waiting for canplay event');\n          console.log('🎵 Audio readyState:', audio.readyState);\n          toast.info('Audio is loading, please wait...');\n        }\n      }\n    } catch (error) {\n      console.error('❌ Error playing audio:', error);\n      setIsPlaying(false);\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          console.log('🎵 Play request was aborted');\n          // Don't show error for AbortError, just reset state\n        } else if (error.name === 'NotSupportedError') {\n          console.log('🎵 Audio format not supported');\n          toast.error('Audio format not supported');\n        } else {\n          toast.error('Failed to play recording');\n        }\n      } else {\n        toast.error('Failed to play recording');\n      }\n    }\n  };\n\n  const handleSeek = (value: number[]) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const newTime = value[0];\n    audio.currentTime = newTime;\n    setCurrentTime(newTime);\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const newVolume = value[0];\n    audio.volume = newVolume;\n    setVolume(newVolume);\n    setIsMuted(newVolume === 0);\n  };\n\n  const toggleMute = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    if (isMuted) {\n      audio.volume = volume;\n      setIsMuted(false);\n    } else {\n      audio.volume = 0;\n      setIsMuted(true);\n    }\n  };\n\n  const formatTime = (time: number) => {\n    if (isNaN(time)) return \"0:00\";\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleDownload = () => {\n    if (recordingUrl) {\n      const link = document.createElement('a');\n      link.href = recordingUrl;\n      link.download = `call-recording-${call?.call_id}.mp3`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handleSyncRecording = async () => {\n    if (!call) return;\n\n    try {\n      setIsSyncing(true);\n\n      // Use call_id if available, otherwise fall back to id\n      const callId = call.call_id || call.id;\n      if (!callId) {\n        console.error('No call ID available for recording sync');\n        toast.error(\"Call ID not available\");\n        return;\n      }\n\n      console.log('Syncing recording for call ID:', callId);\n      // Call the sync API endpoint\n      const response = await fetch(`/api/outboundcall/recording/${callId}/sync`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const data = await response.json();\n\n      if (data.success && data.data?.recordingUrl) {\n        setRecordingUrl(data.data.recordingUrl);\n        toast.success(\"Recording synced successfully!\");\n      } else {\n        toast.error(data.message || \"Recording not available from VAPI\");\n      }\n    } catch (error) {\n      console.error(\"Error syncing recording:\", error);\n      toast.error(\"Failed to sync recording\");\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  if (!call) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Play className=\"h-5 w-5\" />\n            Call Recording & Transcript\n          </DialogTitle>\n          <DialogDescription>\n            Listen to the call recording and view the transcript for call ID: {call.call_id || call.id}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"recording\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"recording\">Recording</TabsTrigger>\n            <TabsTrigger value=\"transcript\">Transcript</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"recording\" className=\"space-y-4 mt-4\">\n          {/* Call Info */}\n          <div className=\"text-sm text-gray-600\">\n            <p><strong>Date:</strong> {new Date(call.created_at).toLocaleString()}</p>\n            <p><strong>Duration:</strong> {formatTime(Number(call.duration) || duration || 0)}</p>\n            <p><strong>Status:</strong> {call.status}</p>\n          </div>\n\n          {/* Audio Player */}\n          {recordingUrl ? (\n            <>\n              <audio\n                ref={audioRef}\n                preload=\"metadata\"\n                onError={handleError}\n                onTimeUpdate={handleTimeUpdate}\n                onLoadedMetadata={handleLoadedMetadata}\n                onEnded={handleEnded}\n                onCanPlay={handleCanPlay}\n                onLoadStart={handleLoadStart}\n                onPlay={() => {\n                  console.log('🎵 Audio started playing');\n                  setIsPlaying(true);\n                }}\n                onPause={() => {\n                  console.log('🎵 Audio paused');\n                  setIsPlaying(false);\n                }}\n                onLoadedData={() => {\n                  console.log('🎵 Audio data loaded');\n                  setIsLoading(false);\n                }}\n                onProgress={() => {\n                  const audio = audioRef.current;\n                  if (audio && audio.buffered.length > 0) {\n                    console.log('🎵 Audio buffering progress:', audio.buffered.end(0), '/', audio.duration);\n                  }\n                }}\n                onWaiting={() => {\n                  console.log('🎵 Audio waiting for data');\n                }}\n                onStalled={() => {\n                  console.log('🎵 Audio stalled');\n                }}\n                onSuspend={() => {\n                  console.log('🎵 Audio suspended');\n                }}\n                onAbort={() => {\n                  console.log('🎵 Audio aborted');\n                }}\n              />\n\n              {/* Loading Indicator */}\n              {isLoading && (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-gray-500\">Loading recording...</p>\n                </div>\n              )}\n\n              {/* Progress Bar */}\n              <div className=\"space-y-2\">\n                <Slider\n                  value={[currentTime]}\n                  max={duration || 100}\n                  step={1}\n                  onValueChange={handleSeek}\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-gray-500\">\n                  <span>{formatTime(currentTime)}</span>\n                  <span>{formatTime(duration)}</span>\n                </div>\n              </div>\n\n              {/* Controls */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={togglePlayPause}\n                    disabled={!recordingUrl}\n                  >\n                    {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                  </Button>\n\n                  <div className=\"flex items-center gap-1\">\n                    <Button variant=\"ghost\" size=\"sm\" onClick={toggleMute}>\n                      {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n                    </Button>\n                    <Slider\n                      value={[isMuted ? 0 : volume]}\n                      max={1}\n                      step={0.1}\n                      onValueChange={handleVolumeChange}\n                      className=\"w-16\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-1\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={handleDownload}>\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-sm text-gray-500 mb-4\">Recording not available</p>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleSyncRecording}\n                disabled={isSyncing}\n                className=\"flex items-center gap-2\"\n              >\n                <RefreshCw className={`h-4 w-4 ${isSyncing ? 'animate-spin' : ''}`} />\n                {isSyncing ? 'Syncing...' : 'Try to Sync Recording'}\n              </Button>\n            </div>\n          )}\n          </TabsContent>\n\n          <TabsContent value=\"transcript\" className=\"mt-4\">\n            <div className=\"h-96 overflow-y-auto\">\n              {parsedMessages.length > 0 ? (\n                <div className=\"space-y-3 p-4\">\n                  {parsedMessages.map((msg, index) => (\n                    <div\n                      key={index}\n                      className={`flex ${msg.speaker === 'assistant' ? 'justify-start' : 'justify-end'}`}\n                    >\n                      <div\n                        className={`max-w-[80%] rounded-lg px-3 py-2 ${\n                          msg.speaker === 'assistant'\n                            ? 'bg-gray-100 text-gray-800'\n                            : 'bg-blue-500 text-white'\n                        }`}\n                      >\n                        <div className=\"text-xs font-medium mb-1 opacity-70\">\n                          {msg.speaker === 'assistant' ? 'Assistant' : 'Customer'}\n                        </div>\n                        <div className=\"text-sm whitespace-pre-wrap\">\n                          {msg.message}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : transcript ? (\n                <div className=\"p-4\">\n                  <div className=\"bg-gray-100 rounded-lg p-3\">\n                    <div className=\"text-xs font-medium mb-2 text-gray-600\">Full Transcript</div>\n                    <div className=\"text-sm text-gray-800 whitespace-pre-wrap\">\n                      {transcript}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-full text-center p-8\">\n                  <FileText className=\"h-12 w-12 text-gray-300 mb-4\" />\n                  <p className=\"text-sm text-gray-500 mb-4\">No transcript available</p>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={loadTranscript}\n                    disabled={isSyncing}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <RefreshCw className={`h-4 w-4 ${isSyncing ? 'animate-spin' : ''}`} />\n                    {isSyncing ? 'Loading...' : 'Load Transcript'}\n                  </Button>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":["getContactCallHistory","phoneNumber","page","limit","encodedPhoneNumber","response","axiosInstance","error","message","_b","_a","toast","getCallRecording","callId","_c","getCallTranscript","formatDuration","seconds","numericSeconds","minutes","remainingSeconds","formatCallStatus","status","formatCallCost","cost","numericCost","hasRecording","call","recordingUrl","hasMockUrl","formatCallDate","dateString","date","getCampaignCallRecording","getCampaignCallTranscript","CallRecordingPlayer","isOpen","onClose","customGetRecording","customGetTranscript","isPlaying","setIsPlaying","useState","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","isMuted","setIsMuted","isLoading","setIsLoading","setRecordingUrl","transcript","setTranscript","isSyncing","setIsSyncing","parsedMessages","setParsedMessages","audioRef","useRef","loadingTimeoutRef","useEffect","loadRecording","loadTranscript","loadTimer","audio","retryAudio","setupAudio","url","fullUrl","handleError","audioElement","errorMessage","handleLoadedMetadata","handleCanPlay","handleLoadStart","handleTimeUpdate","handleEnded","existingUrl","proxyUrl","recordingData","parseTranscriptToMessages","transcriptData","transcriptText","lines","messages","currentSpeaker","currentMessage","line","trimmedLine","togglePlayPause","handleSeek","value","newTime","handleVolumeChange","newVolume","toggleMute","formatTime","time","handleDownload","link","handleSyncRecording","data","jsx","Dialog","jsxs","DialogContent","DialogHeader","DialogTitle","Play","DialogDescription","Tabs","TabsList","TabsTrigger","TabsContent","Fragment","Slider","Button","Pause","VolumeX","Volume2","Download","RefreshCw","msg","index","FileText"],"mappings":"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"}