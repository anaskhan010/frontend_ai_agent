{"version":3,"file":"vapiProviders-yDONMGxy.js","sources":["../../src/config/vapiProviders.ts"],"sourcesContent":["// VAPI Provider Configuration\n// Based on official VAPI documentation and API specifications\n\nexport interface ModelProvider {\n  id: string;\n  name: string;\n  models: ModelOption[];\n  defaultModel?: string;\n  description?: string;\n  requiresApiKey?: boolean;\n}\n\nexport interface ModelOption {\n  id: string;\n  name: string;\n  description?: string;\n  maxTokens?: number;\n  supportsTools?: boolean;\n  supportsVision?: boolean;\n  costTier?: 'low' | 'medium' | 'high';\n}\n\nexport interface VoiceProvider {\n  id: string;\n  name: string;\n  voices: VoiceOption[];\n  defaultVoice?: string;\n  description?: string;\n  requiresApiKey?: boolean;\n  supportsSpeed?: boolean;\n  supportsStability?: boolean;\n  supportsSimilarityBoost?: boolean;\n}\n\nexport interface VoiceOption {\n  id: string;\n  name: string;\n  gender?: 'male' | 'female' | 'neutral';\n  accent?: string;\n  language?: string;\n  description?: string;\n  preview?: string;\n}\n\nexport interface TranscriberProvider {\n  id: string;\n  name: string;\n  models: TranscriberModel[];\n  defaultModel?: string;\n  description?: string;\n  requiresApiKey?: boolean;\n  supportsLanguages?: string[];\n}\n\nexport interface TranscriberModel {\n  id: string;\n  name: string;\n  description?: string;\n  accuracy?: 'standard' | 'enhanced' | 'premium';\n  latency?: 'low' | 'medium' | 'high';\n}\n\n// VAPI API Integration\nimport axiosInstance from '@/api/axios/axiosInstance';\n\n// Allowed voices for VAPI provider (matching VAPI's exact voice IDs)\n// Based on VAPI API validation: Elliot, Kylie, Rohan, Lily, Savannah, Hana, Neha, Cole, Harry, Paige, Spencer\nconst ALLOWED_VAPI_VOICES: VoiceOption[] = [\n  { id: 'Cole', name: 'Cole', gender: 'male' as const, language: 'en-US', description: 'Professional male voice' },\n  { id: 'Harry', name: 'Harry', gender: 'male' as const, language: 'en-US', description: 'Confident male voice' },\n  { id: 'Spencer', name: 'Spencer', gender: 'male' as const, language: 'en-US', description: 'Clear male voice' },\n  { id: 'Neha', name: 'Neha', gender: 'female' as const, language: 'en-US', description: 'Professional female voice' },\n  { id: 'Kylie', name: 'Kylie', gender: 'female' as const, language: 'en-US', description: 'Friendly female voice' },\n  { id: 'Savannah', name: 'Savannah', gender: 'female' as const, language: 'en-US', description: 'Warm female voice' },\n  { id: 'Paige', name: 'Paige', gender: 'female' as const, language: 'en-US', description: 'Energetic female voice' },\n  { id: 'Rohan', name: 'Rohan', gender: 'male' as const, language: 'en-US', description: 'Authoritative male voice' },\n  { id: 'Hana', name: 'Hana', gender: 'female' as const, language: 'en-US', description: 'Gentle female voice' },\n  { id: 'Elliot', name: 'Elliot', gender: 'male' as const, language: 'en-US', description: 'Versatile male voice' }\n];\n\n// Cache for API responses\nlet cachedModelProviders: ModelProvider[] | null = null;\nlet cachedVoiceProviders: VoiceProvider[] | null = null;\nlet cachedTranscriberProviders: TranscriberProvider[] | null = null;\n\n// Fetch models from VAPI API and filter for OpenAI GPT-4 only\nexport const fetchModelProviders = async (): Promise<ModelProvider[]> => {\n  if (cachedModelProviders) {\n    return cachedModelProviders;\n  }\n\n  try {\n    const response = await axiosInstance.get('/api/models/available');\n    const vapiModels = response.data?.data || {};\n\n    // Filter to only show OpenAI provider with GPT-4 model\n    const openaiModels = vapiModels.openai || [];\n    const gpt4Model = openaiModels.find((model: any) => model.id === 'gpt-4');\n\n    if (gpt4Model) {\n      cachedModelProviders = [\n        {\n          id: 'openai',\n          name: 'OpenAI',\n          description: 'Industry-leading language models with excellent reasoning capabilities',\n          models: [\n            {\n              id: gpt4Model.id,\n              name: gpt4Model.name || 'GPT-4',\n              description: gpt4Model.description || 'Most capable model with superior reasoning',\n              maxTokens: 8192,\n              supportsTools: true,\n              supportsVision: false,\n              costTier: 'high'\n            }\n          ],\n          defaultModel: 'gpt-4',\n          requiresApiKey: false\n        }\n      ];\n    } else {\n      // Fallback if GPT-4 not found in VAPI response\n      cachedModelProviders = [\n        {\n          id: 'openai',\n          name: 'OpenAI',\n          description: 'Industry-leading language models with excellent reasoning capabilities',\n          models: [\n            {\n              id: 'gpt-4',\n              name: 'GPT-4',\n              description: 'Most capable model with superior reasoning',\n              maxTokens: 8192,\n              supportsTools: true,\n              supportsVision: false,\n              costTier: 'high'\n            }\n          ],\n          defaultModel: 'gpt-4',\n          requiresApiKey: false\n        }\n      ];\n    }\n  } catch (error) {\n    console.error('Error fetching models from VAPI:', error);\n    // Fallback to static configuration\n    cachedModelProviders = [\n      {\n        id: 'openai',\n        name: 'OpenAI',\n        description: 'Industry-leading language models with excellent reasoning capabilities',\n        models: [\n          {\n            id: 'gpt-4',\n            name: 'GPT-4',\n            description: 'Most capable model with superior reasoning',\n            maxTokens: 8192,\n            supportsTools: true,\n            supportsVision: false,\n            costTier: 'high'\n          }\n        ],\n        defaultModel: 'gpt-4',\n        requiresApiKey: false\n      }\n    ];\n  }\n\n  return cachedModelProviders;\n};\n\n// Fetch voices from VAPI API and filter for your specified voices only\nexport const fetchVoiceProviders = async (): Promise<VoiceProvider[]> => {\n  if (cachedVoiceProviders) {\n    return cachedVoiceProviders;\n  }\n\n  try {\n    const response = await axiosInstance.get('/api/voices/available');\n    const vapiVoices = response.data?.data || {};\n\n    // Always return VAPI provider with your specified voices\n    // We use the allowed voices list regardless of what VAPI returns\n    cachedVoiceProviders = [\n      {\n        id: 'vapi',\n        name: 'VAPI',\n        description: 'Native VAPI voices with optimized performance',\n        supportsSpeed: true,\n        supportsStability: false,\n        supportsSimilarityBoost: false,\n        voices: ALLOWED_VAPI_VOICES.map(voice => ({\n          ...voice,\n          preview: `https://www2.cs.uic.edu/~i101/SoundFiles/BabyElephantWalk60.wav` // Default preview\n        })),\n        defaultVoice: 'Cole',\n        requiresApiKey: false\n      }\n    ];\n  } catch (error) {\n    console.error('Error fetching voices from VAPI:', error);\n    // Fallback to static configuration with your specified voices\n    cachedVoiceProviders = [\n      {\n        id: 'vapi',\n        name: 'VAPI',\n        description: 'Native VAPI voices with optimized performance',\n        supportsSpeed: true,\n        supportsStability: false,\n        supportsSimilarityBoost: false,\n        voices: ALLOWED_VAPI_VOICES.map(voice => ({\n          ...voice,\n          preview: `https://www2.cs.uic.edu/~i101/SoundFiles/BabyElephantWalk60.wav`\n        })),\n        defaultVoice: 'Cole',\n        requiresApiKey: false\n      }\n    ];\n  }\n\n  return cachedVoiceProviders || [];\n};\n\n// Fetch transcriber providers (can be static or from VAPI)\nexport const fetchTranscriberProviders = async (): Promise<TranscriberProvider[]> => {\n  if (cachedTranscriberProviders) {\n    return cachedTranscriberProviders;\n  }\n\n  // For now, use static configuration for transcribers\n  cachedTranscriberProviders = [\n    {\n      id: 'deepgram',\n      name: 'Deepgram',\n      description: 'Industry-leading speech recognition with high accuracy',\n      models: [\n        {\n          id: 'nova-2',\n          name: 'Nova 2',\n          description: 'Latest generation model with enhanced accuracy',\n          accuracy: 'premium',\n          latency: 'low'\n        },\n        {\n          id: 'nova',\n          name: 'Nova',\n          description: 'High-performance general purpose model',\n          accuracy: 'enhanced',\n          latency: 'low'\n        },\n        {\n          id: 'enhanced',\n          name: 'Enhanced',\n          description: 'Improved accuracy for challenging audio',\n          accuracy: 'enhanced',\n          latency: 'medium'\n        },\n        {\n          id: 'base',\n          name: 'Base',\n          description: 'Standard model for general use',\n          accuracy: 'standard',\n          latency: 'low'\n        }\n      ],\n      defaultModel: 'nova-2',\n      requiresApiKey: true,\n      supportsLanguages: ['en', 'es', 'fr', 'de', 'it', 'pt', 'nl', 'hi', 'ja', 'ko', 'zh']\n    }\n  ];\n\n  return cachedTranscriberProviders;\n};\n\n// Static fallback configurations (for backward compatibility)\nconst STATIC_MODEL_PROVIDERS: ModelProvider[] = [\n  {\n    id: 'openai',\n    name: 'OpenAI',\n    description: 'Industry-leading language models with excellent reasoning capabilities',\n    models: [\n      {\n        id: 'gpt-4',\n        name: 'GPT-4',\n        description: 'Most capable model with superior reasoning',\n        maxTokens: 8192,\n        supportsTools: true,\n        supportsVision: false,\n        costTier: 'high'\n      }\n    ],\n    defaultModel: 'gpt-4',\n    requiresApiKey: false\n  }\n];\n\nconst STATIC_VOICE_PROVIDERS: VoiceProvider[] = [\n  {\n    id: 'vapi',\n    name: 'VAPI',\n    description: 'Native VAPI voices with optimized performance',\n    supportsSpeed: true,\n    supportsStability: false,\n    supportsSimilarityBoost: false,\n    voices: ALLOWED_VAPI_VOICES.map(voice => ({\n      ...voice,\n      preview: `https://www2.cs.uic.edu/~i101/SoundFiles/BabyElephantWalk60.wav`\n    })),\n    defaultVoice: 'Cole',\n    requiresApiKey: false\n  }\n];\n\nconst STATIC_TRANSCRIBER_PROVIDERS: TranscriberProvider[] = [\n  {\n    id: 'deepgram',\n    name: 'Deepgram',\n    description: 'Industry-leading speech recognition with high accuracy',\n    models: [\n      {\n        id: 'nova-2',\n        name: 'Nova 2',\n        description: 'Latest generation model with enhanced accuracy',\n        accuracy: 'premium',\n        latency: 'low'\n      },\n      {\n        id: 'nova',\n        name: 'Nova',\n        description: 'High-performance general purpose model',\n        accuracy: 'enhanced',\n        latency: 'low'\n      },\n      {\n        id: 'enhanced',\n        name: 'Enhanced',\n        description: 'Improved accuracy for challenging audio',\n        accuracy: 'enhanced',\n        latency: 'medium'\n      },\n      {\n        id: 'base',\n        name: 'Base',\n        description: 'Standard model for general use',\n        accuracy: 'standard',\n        latency: 'low'\n      }\n    ],\n    defaultModel: 'nova-2',\n    requiresApiKey: true,\n    supportsLanguages: ['en', 'es', 'fr', 'de', 'it', 'pt', 'nl', 'hi', 'ja', 'ko', 'zh']\n  }\n];\n\n// Synchronous helper functions (for backward compatibility)\nexport const getProviderModels = (providerId: string): ModelOption[] => {\n  const provider = STATIC_MODEL_PROVIDERS.find(p => p.id === providerId);\n  return provider?.models || [];\n};\n\nexport const getProviderVoices = (providerId: string): VoiceOption[] => {\n  const provider = STATIC_VOICE_PROVIDERS.find(p => p.id === providerId);\n  return provider?.voices || [];\n};\n\nexport const getTranscriberModels = (providerId: string): TranscriberModel[] => {\n  const provider = STATIC_TRANSCRIBER_PROVIDERS.find(p => p.id === providerId);\n  return provider?.models || [];\n};\n\nexport const getDefaultModel = (providerId: string): string => {\n  const provider = STATIC_MODEL_PROVIDERS.find(p => p.id === providerId);\n  return provider?.defaultModel || provider?.models[0]?.id || '';\n};\n\nexport const getDefaultVoice = (providerId: string): string => {\n  const provider = STATIC_VOICE_PROVIDERS.find(p => p.id === providerId);\n  return provider?.defaultVoice || provider?.voices[0]?.id || '';\n};\n\nexport const getDefaultTranscriberModel = (providerId: string): string => {\n  const provider = STATIC_TRANSCRIBER_PROVIDERS.find(p => p.id === providerId);\n  return provider?.defaultModel || provider?.models[0]?.id || '';\n};\n\n// Export static arrays for backward compatibility\nexport const MODEL_PROVIDERS: ModelProvider[] = STATIC_MODEL_PROVIDERS;\nexport const VOICE_PROVIDERS: VoiceProvider[] = STATIC_VOICE_PROVIDERS;\nexport const TRANSCRIBER_PROVIDERS: TranscriberProvider[] = STATIC_TRANSCRIBER_PROVIDERS;\n\n"],"names":["ALLOWED_VAPI_VOICES","STATIC_MODEL_PROVIDERS","STATIC_VOICE_PROVIDERS","voice","STATIC_TRANSCRIBER_PROVIDERS","getProviderModels","providerId","provider","p","getProviderVoices","getTranscriberModels","getDefaultModel","_a","getDefaultVoice","getDefaultTranscriberModel","MODEL_PROVIDERS","VOICE_PROVIDERS","TRANSCRIBER_PROVIDERS"],"mappings":"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"}