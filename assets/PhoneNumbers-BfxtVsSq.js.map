{"version":3,"file":"PhoneNumbers-BfxtVsSq.js","sources":["../../src/components/PhoneNumbers/SuperAdminPhoneNumberManagement.tsx","../../src/components/Debug/PhoneNumberDebug.tsx","../../src/pages/PhoneNumbers/PhoneNumbers.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Loader2, Phone, UserPlus, UserMinus, Users, Shield } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axiosInstance from \"@/api/axios/axiosInstance\";\n\nimport {\n  getAllPhoneNumbersForAdmin,\n  getAllVapiPhoneNumbersForAdmin,\n  assignPhoneNumberToUser,\n  unassignPhoneNumber\n} from \"@/api/services/phoneNumbers/phoneNumberService\";\nimport { getAllUsersWithRoles } from \"@/api/services/user/userService\";\nimport type { PhoneNumber } from \"@/api/services/phoneNumbers/phoneNumberService\";\n\ninterface AdminUser {\n  id: number;\n  username?: string;\n  email: string;\n  first_name?: string;\n  last_name?: string;\n  is_active: boolean;\n}\n\nconst SuperAdminPhoneNumberManagement = () => {\n  const [selectedPhoneNumber, setSelectedPhoneNumber] = useState<PhoneNumber | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Fetch all VAPI phone numbers with assignment info for admin\n  const { data: phoneNumbersData, isLoading: numbersLoading, error: numbersError } = useQuery({\n    queryKey: [\"admin-vapi-phone-numbers\"],\n    queryFn: () => getAllVapiPhoneNumbersForAdmin(),\n    retry: 1,\n  });\n\n  // Fetch all users for assignment\n  const { data: usersData, isLoading: usersLoading } = useQuery({\n    queryKey: [\"all-users\"],\n    queryFn: () => getAllUsersWithRoles(),\n    retry: 1,\n  });\n\n  // Assignment mutation\n  const assignMutation = useMutation({\n    mutationFn: ({ phoneNumberId, userId, vapiId }: { phoneNumberId: string; userId: string; vapiId?: string }) => {\n      // For VAPI phone numbers, send both the VAPI ID and user ID\n      if (vapiId) {\n        return axiosInstance.post(`/api/phone-numbers/${vapiId}/assign`, {\n          user_id: userId,\n          vapi_id: vapiId\n        });\n      } else {\n        // Traditional assignment for existing local records\n        return assignPhoneNumberToUser(phoneNumberId, userId);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-vapi-phone-numbers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"admin-phone-numbers\"] });\n      toast.success(\"Phone number assigned successfully!\");\n      setIsAssignDialogOpen(false);\n      setSelectedPhoneNumber(null);\n      setSelectedUserId(\"\");\n    },\n    onError: (error: any) => {\n      toast.error(\"Failed to assign phone number: \" + (error.response?.data?.message || error.message));\n    },\n  });\n\n  // Unassignment mutation\n  const unassignMutation = useMutation({\n    mutationFn: (phoneNumberId: string) => unassignPhoneNumber(phoneNumberId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-vapi-phone-numbers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"admin-phone-numbers\"] });\n      toast.success(\"Phone number unassigned successfully!\");\n    },\n    onError: (error: any) => {\n      toast.error(\"Failed to unassign phone number: \" + (error.response?.data?.message || error.message));\n    },\n  });\n\n  const handleAssignClick = (phoneNumber: PhoneNumber) => {\n    setSelectedPhoneNumber(phoneNumber);\n    setIsAssignDialogOpen(true);\n  };\n\n  const handleAssignSubmit = () => {\n    if (!selectedPhoneNumber || !selectedUserId) {\n      toast.error(\"Please select a user to assign the phone number to.\");\n      return;\n    }\n\n    assignMutation.mutate({\n      phoneNumberId: selectedPhoneNumber.local_id || selectedPhoneNumber.id,\n      userId: selectedUserId,\n      vapiId: selectedPhoneNumber.vapi_id || selectedPhoneNumber.id // Use VAPI ID for assignment\n    });\n  };\n\n  const handleUnassign = (phoneNumber: PhoneNumber) => {\n    if (!phoneNumber.local_id) {\n      toast.error(\"Cannot unassign phone number that is not in local database.\");\n      return;\n    }\n\n    if (window.confirm(`Are you sure you want to unassign phone number ${phoneNumber.number}?`)) {\n      unassignMutation.mutate(phoneNumber.local_id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case \"inactive\":\n        return <Badge variant=\"secondary\">Inactive</Badge>;\n      case \"pending\":\n        return <Badge variant=\"outline\">Pending</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  const phoneNumbers = phoneNumbersData?.data || [];\n  const users = usersData?.data || [];\n\n  if (numbersLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-32\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-blue-600\" />\n            <CardTitle>Super Admin - Phone Number Management</CardTitle>\n          </div>\n          <CardDescription>\n            Manage phone number assignments for all users. Shows all VAPI phone numbers including Twilio numbers.\n            Assign any available phone number to specific users to control access.\n          </CardDescription>\n          {phoneNumbersData?.debug_info && (\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-blue-900\">Total VAPI Numbers:</span>\n                  <div className=\"text-blue-700\">{phoneNumbersData.debug_info.total_vapi_numbers}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-green-900\">Assigned:</span>\n                  <div className=\"text-green-700\">{phoneNumbersData.debug_info.assigned_numbers}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-orange-900\">Available:</span>\n                  <div className=\"text-orange-700\">{phoneNumbersData.debug_info.unassigned_numbers}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-purple-900\">In Local DB:</span>\n                  <div className=\"text-purple-700\">{phoneNumbersData.debug_info.in_local_db}</div>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardHeader>\n        <CardContent>\n          {phoneNumbers.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Phone className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No phone numbers found</h3>\n              <p className=\"text-muted-foreground\">\n                No phone numbers are available for assignment.\n              </p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Phone Number</TableHead>\n                  <TableHead>Provider</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Assigned User</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {phoneNumbers.map((phoneNumber: PhoneNumber) => (\n                  <TableRow key={phoneNumber.id}>\n                    <TableCell className=\"font-mono\">{phoneNumber.number || \"Unknown\"}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={phoneNumber.provider === 'vapi' ? 'bg-blue-50 text-blue-700' : 'bg-gray-50 text-gray-700'}>\n                        {phoneNumber.provider?.toUpperCase() || 'VAPI'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        {phoneNumber.is_assigned ? (\n                          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Assigned</Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"text-orange-600\">Available</Badge>\n                        )}\n                        {phoneNumber.is_in_local_db ? (\n                          <Badge variant=\"secondary\" className=\"text-xs\">In DB</Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"text-xs text-blue-600\">VAPI Only</Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {phoneNumber.user_name ? (\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{phoneNumber.user_name}</span>\n                          <span className=\"text-xs text-muted-foreground\">{phoneNumber.user_email}</span>\n                        </div>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-orange-600\">Unassigned</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        {phoneNumber.is_assigned ? (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUnassign(phoneNumber)}\n                            disabled={unassignMutation.isPending || !phoneNumber.is_in_local_db}\n                            title={!phoneNumber.is_in_local_db ? \"Cannot unassign phone number not in local database\" : \"\"}\n                          >\n                            <UserMinus className=\"h-3 w-3 mr-1\" />\n                            Unassign\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleAssignClick(phoneNumber)}\n                            disabled={assignMutation.isPending}\n                          >\n                            <UserPlus className=\"h-3 w-3 mr-1\" />\n                            Assign\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Assignment Dialog */}\n      <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Phone Number</DialogTitle>\n            <DialogDescription>\n              Assign phone number {selectedPhoneNumber?.number} to a user. Only the assigned user will be able to see and use this phone number.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Select User</label>\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a user to assign the phone number to\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {users.map((user: any) => (\n                    <SelectItem key={user.id} value={user.id.toString()}>\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">{user.first_name || ''} {user.last_name || ''}</div>\n                          <div className=\"text-xs text-muted-foreground\">{user.email}</div>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsAssignDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAssignSubmit}\n                disabled={!selectedUserId || assignMutation.isPending}\n              >\n                {assignMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Assigning...\n                  </>\n                ) : (\n                  <>\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    Assign Phone Number\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SuperAdminPhoneNumberManagement;\n","import React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Loader2, Bug, Phone, User } from \"lucide-react\";\nimport axiosInstance from \"@/api/axios/axiosInstance\";\nimport usePermissions from \"@/hooks/usePermissions\";\n\nconst PhoneNumberDebug = () => {\n  const { isSuperAdmin } = usePermissions();\n\n  // Debug: Get all assignments\n  const { data: allAssignments, isLoading: assignmentsLoading, refetch: refetchAssignments } = useQuery({\n    queryKey: [\"debug-assignments\"],\n    queryFn: async () => {\n      const response = await axiosInstance.get(\"/api/phone-numbers/debug/assignments\");\n      return response.data;\n    },\n    retry: 1,\n  });\n\n  // Debug: Get user's phone numbers\n  const { data: userNumbers, isLoading: userLoading, refetch: refetchUser } = useQuery({\n    queryKey: [\"debug-user-numbers\"],\n    queryFn: async () => {\n      const response = await axiosInstance.get(\"/api/phone-numbers/debug/user-numbers\");\n      return response.data;\n    },\n    retry: 1,\n  });\n\n  // Regular phone numbers API\n  const { data: regularNumbers, isLoading: regularLoading, refetch: refetchRegular } = useQuery({\n    queryKey: [\"regular-phone-numbers\"],\n    queryFn: async () => {\n      const response = await axiosInstance.get(\"/api/phone-numbers\");\n      return response.data;\n    },\n    retry: 1,\n  });\n\n  const handleRefreshAll = () => {\n    refetchAssignments();\n    refetchUser();\n    refetchRegular();\n  };\n\n  if (assignmentsLoading || userLoading || regularLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-32\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Bug className=\"h-5 w-5 text-orange-600\" />\n              <CardTitle>Phone Number Assignment Debug</CardTitle>\n            </div>\n            <Button onClick={handleRefreshAll} variant=\"outline\" size=\"sm\">\n              Refresh All\n            </Button>\n          </div>\n          <CardDescription>\n            Debug information for phone number assignments. This helps identify why assigned phone numbers might not be showing up for users.\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* User Debug Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Current User Debug Info\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {userNumbers && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <strong>User ID:</strong> {userNumbers.debug_info?.user_id}\n                </div>\n                <div>\n                  <strong>Is Super Admin:</strong> {userNumbers.debug_info?.is_super_admin ? \"Yes\" : \"No\"}\n                </div>\n                <div>\n                  <strong>Phone Count:</strong> {userNumbers.debug_info?.phone_count}\n                </div>\n                <div>\n                  <strong>Is Super Admin (Hook):</strong> {isSuperAdmin ? \"Yes\" : \"No\"}\n                </div>\n              </div>\n              \n              <div>\n                <strong>Phone Number IDs:</strong>\n                <div className=\"mt-2\">\n                  {userNumbers.debug_info?.phone_number_ids?.length > 0 ? (\n                    userNumbers.debug_info.phone_number_ids.map((id: string) => (\n                      <Badge key={id} variant=\"outline\" className=\"mr-2 mb-2\">\n                        {id}\n                      </Badge>\n                    ))\n                  ) : (\n                    <Badge variant=\"destructive\">No phone number IDs found</Badge>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <strong>User's Phone Numbers:</strong>\n                {userNumbers.data?.length > 0 ? (\n                  <Table className=\"mt-2\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>DB ID</TableHead>\n                        <TableHead>Phone Number ID</TableHead>\n                        <TableHead>Number</TableHead>\n                        <TableHead>User ID</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {userNumbers.data.map((phone: any) => (\n                        <TableRow key={phone.id}>\n                          <TableCell>{phone.id}</TableCell>\n                          <TableCell>{phone.phone_number_id || \"N/A\"}</TableCell>\n                          <TableCell>{phone.number || \"N/A\"}</TableCell>\n                          <TableCell>{phone.user_id}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <Badge variant=\"destructive\" className=\"mt-2\">No phone numbers found for user</Badge>\n                )}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* All Assignments (Super Admin Only) */}\n      {isSuperAdmin && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Phone className=\"h-4 w-4\" />\n              All Phone Number Assignments\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {allAssignments && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <strong>Total:</strong> {allAssignments.debug_info?.total_count}\n                  </div>\n                  <div>\n                    <strong>Assigned:</strong> {allAssignments.debug_info?.assigned_count}\n                  </div>\n                  <div>\n                    <strong>Unassigned:</strong> {allAssignments.debug_info?.unassigned_count}\n                  </div>\n                </div>\n\n                {allAssignments.data?.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>DB ID</TableHead>\n                        <TableHead>Phone Number ID</TableHead>\n                        <TableHead>Number</TableHead>\n                        <TableHead>Assigned User</TableHead>\n                        <TableHead>User ID</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {allAssignments.data.map((phone: any) => (\n                        <TableRow key={phone.id}>\n                          <TableCell>{phone.id}</TableCell>\n                          <TableCell>{phone.phone_number_id || \"N/A\"}</TableCell>\n                          <TableCell>{phone.number || \"N/A\"}</TableCell>\n                          <TableCell>\n                            {phone.user_name ? (\n                              <div>\n                                <div className=\"font-medium\">{phone.user_name}</div>\n                                <div className=\"text-xs text-muted-foreground\">{phone.user_email}</div>\n                              </div>\n                            ) : (\n                              <Badge variant=\"outline\">Unassigned</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>{phone.user_id || \"NULL\"}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <Badge variant=\"destructive\">No phone numbers found in database</Badge>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Regular API Response */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Phone className=\"h-4 w-4\" />\n            Regular Phone Numbers API Response\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {regularNumbers && (\n            <div className=\"space-y-4\">\n              <div>\n                <strong>Success:</strong> {regularNumbers.success ? \"Yes\" : \"No\"}\n              </div>\n              <div>\n                <strong>Count:</strong> {regularNumbers.data?.length || 0}\n              </div>\n              \n              {regularNumbers.data?.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>ID</TableHead>\n                      <TableHead>Number</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created By</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {regularNumbers.data.map((phone: any) => (\n                      <TableRow key={phone.id}>\n                        <TableCell>{phone.id}</TableCell>\n                        <TableCell>{phone.number || \"N/A\"}</TableCell>\n                        <TableCell>{phone.status || \"N/A\"}</TableCell>\n                        <TableCell>{phone.created_by || phone.user_name || \"N/A\"}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <Badge variant=\"destructive\">No phone numbers returned by regular API</Badge>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default PhoneNumberDebug;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Loader2, Phone, Plus, Search, ShoppingCart, Edit, Trash2 } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport Page from \"@/components/Page\";\nimport CreatePhoneNumberForm from \"@/components/PhoneNumbers/CreatePhoneNumberForm\";\nimport SuperAdminPhoneNumberManagement from \"@/components/PhoneNumbers/SuperAdminPhoneNumberManagement\";\nimport PhoneNumberDebug from \"@/components/Debug/PhoneNumberDebug\";\n\nimport {\n  getAllPhoneNumbers,\n  searchAvailablePhoneNumbers,\n  buyPhoneNumber,\n  updatePhoneNumber,\n  deletePhoneNumber\n} from \"@/api/services/phoneNumbers/phoneNumberService\";\nimport { fetchAllAgents } from \"@/api/services/agents/agentService\";\nimport usePermissions from \"@/hooks/usePermissions\";\nimport type { PhoneNumber, AvailablePhoneNumber, PhoneNumberSearchParams } from \"@/api/services/phoneNumbers/phoneNumberService\";\n\nconst PhoneNumbers = () => {\n  const [searchParams, setSearchParams] = useState<PhoneNumberSearchParams>({\n    country: \"US\",\n    limit: 10,\n  });\n  const [selectedNumber, setSelectedNumber] = useState<PhoneNumber | null>(null);\n  const [isSearchDialogOpen, setIsSearchDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<\"user\" | \"admin\" | \"debug\">(\"user\");\n  const [editForm, setEditForm] = useState({\n    friendlyName: \"\",\n    assistantId: \"\",\n  });\n\n  const queryClient = useQueryClient();\n  const { isSuperAdmin } = usePermissions();\n\n  // Fetch owned phone numbers\n  const { data: phoneNumbersData, isLoading: numbersLoading, error: numbersError } = useQuery({\n    queryKey: [\"phoneNumbers\"],\n    queryFn: () => getAllPhoneNumbers(),\n    retry: 1,\n  });\n\n  // Handle success/error with useEffect\n  React.useEffect(() => {\n    if (phoneNumbersData) {\n      console.log(\"Phone numbers data received:\", phoneNumbersData);\n      if (phoneNumbersData?.data?.length > 0) {\n        console.log(\"First phone number structure:\", phoneNumbersData.data[0]);\n      }\n    }\n  }, [phoneNumbersData]);\n\n  React.useEffect(() => {\n    if (numbersError) {\n      console.error(\"Phone numbers fetch error:\", numbersError);\n    }\n  }, [numbersError]);\n\n  // Fetch available phone numbers for purchase\n  const { data: availableNumbers, isLoading: searchLoading, refetch: searchNumbers } = useQuery({\n    queryKey: [\"phoneNumbers\", \"available\", searchParams],\n    queryFn: () => searchAvailablePhoneNumbers(searchParams),\n    enabled: false,\n  });\n\n  // Fetch assistants for assignment\n  const { data: assistantsData } = useQuery({\n    queryKey: [\"assistants\"],\n    queryFn: () => fetchAllAgents(1, \"\"),\n    retry: 1,\n  });\n\n  // Buy phone number mutation\n  const buyNumberMutation = useMutation({\n    mutationFn: buyPhoneNumber,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"phoneNumbers\"] });\n      toast.success(\"Phone number purchased successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to purchase phone number\");\n    },\n  });\n\n  // Update phone number mutation\n  const updateNumberMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => updatePhoneNumber(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"phoneNumbers\"] });\n      setIsEditDialogOpen(false);\n      toast.success(\"Phone number updated successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to update phone number\");\n    },\n  });\n\n  // Delete phone number mutation\n  const deleteNumberMutation = useMutation({\n    mutationFn: deletePhoneNumber,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"phoneNumbers\"] });\n      toast.success(\"Phone number deleted successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to delete phone number\");\n    },\n  });\n\n  const handleSearch = () => {\n    searchNumbers();\n  };\n\n  const handleBuyNumber = (number: AvailablePhoneNumber) => {\n    buyNumberMutation.mutate({\n      number: number.number,\n      friendlyName: number.friendlyName,\n    });\n  };\n\n  const handleEditNumber = (phoneNumber: PhoneNumber) => {\n    setSelectedNumber(phoneNumber);\n    setEditForm({\n      friendlyName: phoneNumber.friendlyName || \"\",\n      assistantId: phoneNumber.assistantId || \"unassigned\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateNumber = () => {\n    if (!selectedNumber) return;\n\n    updateNumberMutation.mutate({\n      id: selectedNumber.id,\n      data: {\n        ...editForm,\n        assistantId: editForm.assistantId === \"unassigned\" ? \"\" : editForm.assistantId,\n      },\n    });\n  };\n\n  const handleDeleteNumber = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this phone number?\")) {\n      deleteNumberMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      active: \"default\",\n      inactive: \"secondary\",\n      pending: \"outline\",\n    };\n    return <Badge variant={variants[status] || \"outline\"}>{status}</Badge>;\n  };\n\n  const assistants = assistantsData?.data?.assistants || [];\n\n  if (numbersError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Phone Numbers</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your phone numbers and purchase new ones\n          </p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground mb-4\">\n                Unable to connect to the backend API. Please ensure the backend server is running.\n              </p>\n              <Button onClick={() => window.location.reload()}>\n                Retry Connection\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <Page>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Phone Numbers</h1>\n            <p className=\"text-muted-foreground\">\n              {viewMode === \"admin\" ? \"Manage phone number assignments for all users\" : \"Get free AI CRUITMENT phone numbers.\"}\n            </p>\n          </div>\n          {isSuperAdmin && (\n            <div className=\"flex gap-2 mr-4\">\n              <Button\n                variant={viewMode === \"user\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"user\")}\n                size=\"sm\"\n              >\n                User View\n              </Button>\n              <Button\n                variant={viewMode === \"admin\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"admin\")}\n                size=\"sm\"\n              >\n                Admin Management\n              </Button>\n              <Button\n                variant={viewMode === \"debug\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"debug\")}\n                size=\"sm\"\n              >\n                Debug\n              </Button>\n            </div>\n          )}\n          {viewMode === \"user\" && (\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Phone Number\n                </Button>\n              </DialogTrigger>\n            <DialogContent className=\"max-w-7xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create New Phone Number</DialogTitle>\n                <DialogDescription>\n                  Get a free AI CRUITMENT phone number.\n                </DialogDescription>\n              </DialogHeader>\n              <CreatePhoneNumberForm\n                onSuccess={() => setIsCreateDialogOpen(false)}\n                onCancel={() => setIsCreateDialogOpen(false)}\n              />\n            </DialogContent>\n          </Dialog>\n          )}\n        </div>\n\n        {/* Conditional Content Based on View Mode */}\n        {viewMode === \"admin\" ? (\n          <SuperAdminPhoneNumberManagement />\n        ) : viewMode === \"debug\" ? (\n          <PhoneNumberDebug />\n        ) : (\n          <>\n        <Dialog open={isSearchDialogOpen} onOpenChange={setIsSearchDialogOpen}>\n          {/* <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Buy Number\n            </Button>\n          </DialogTrigger> */}\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Search & Buy Phone Numbers</DialogTitle>\n              <DialogDescription>\n                Search for available phone numbers to purchase\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div>\n                  <Label htmlFor=\"country\">Country</Label>\n                  <Select\n                    value={searchParams.country}\n                    onValueChange={(value) => setSearchParams(prev => ({ ...prev, country: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"US\">United States</SelectItem>\n                      <SelectItem value=\"CA\">Canada</SelectItem>\n                      <SelectItem value=\"GB\">United Kingdom</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"areaCode\">Area Code</Label>\n                  <Input\n                    id=\"areaCode\"\n                    value={searchParams.areaCode || \"\"}\n                    onChange={(e) => setSearchParams(prev => ({ ...prev, areaCode: e.target.value }))}\n                    placeholder=\"e.g., 415\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"contains\">Contains</Label>\n                  <Input\n                    id=\"contains\"\n                    value={searchParams.contains || \"\"}\n                    onChange={(e) => setSearchParams(prev => ({ ...prev, contains: e.target.value }))}\n                    placeholder=\"e.g., 1234\"\n                  />\n                </div>\n                <div className=\"flex items-end\">\n                  <Button onClick={handleSearch} disabled={searchLoading} className=\"w-full\">\n                    {searchLoading ? <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" /> : <Search className=\"h-4 w-4 mr-2\" />}\n                    Search\n                  </Button>\n                </div>\n              </div>\n\n              {availableNumbers && (\n                <div className=\"border rounded-lg\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Number</TableHead>\n                        <TableHead>Location</TableHead>\n                        <TableHead>Capabilities</TableHead>\n                        <TableHead>Price/Month</TableHead>\n                        <TableHead>Action</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {availableNumbers.data?.map((number: AvailablePhoneNumber) => (\n                        <TableRow key={number.number}>\n                          <TableCell className=\"font-mono\">{number.number}</TableCell>\n                          <TableCell>\n                            {number.locality && number.region\n                              ? `${number.locality}, ${number.region}`\n                              : number.locality || number.region || \"Unknown Location\"\n                            }\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-1\">\n                              {number.capabilities?.voice && <Badge variant=\"outline\">Voice</Badge>}\n                              {number.capabilities?.sms && <Badge variant=\"outline\">SMS</Badge>}\n                              {number.capabilities?.mms && <Badge variant=\"outline\">MMS</Badge>}\n                              {!number.capabilities && <Badge variant=\"outline\">Unknown</Badge>}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {number.monthlyPrice !== undefined\n                              ? `$${number.monthlyPrice}`\n                              : \"Contact for pricing\"\n                            }\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleBuyNumber(number)}\n                              disabled={buyNumberMutation.isPending}\n                            >\n                              {buyNumberMutation.isPending ? (\n                                <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                              ) : (\n                                <ShoppingCart className=\"h-3 w-3 mr-1\" />\n                              )}\n                              Buy\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Phone Numbers List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Phone className=\"h-5 w-5\" />\n            Your Phone Numbers\n          </CardTitle>\n          <CardDescription>\n            Manage your purchased phone numbers and their assignments\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {numbersLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Number</TableHead>\n                  <TableHead>Created By</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Assigned Assistant</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {phoneNumbersData?.data?.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\n                      No phone numbers found. Purchase your first number to get started.\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  phoneNumbersData?.data?.map((phoneNumber: PhoneNumber) => (\n                    <TableRow key={phoneNumber.id}>\n                      <TableCell className=\"font-mono\">{phoneNumber.number || \"Unknown\"}</TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{phoneNumber.created_by || phoneNumber.user_name || \"Unknown User\"}</span>\n                          {phoneNumber.user_email && (\n                            <span className=\"text-xs text-muted-foreground\">{phoneNumber.user_email}</span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(phoneNumber.status || \"inactive\")}</TableCell>\n                   \n                      <TableCell>\n                        {phoneNumber.assistantId ? (\n                          <Badge variant=\"secondary\">Assigned</Badge>\n                        ) : (\n                          <Badge variant=\"outline\">Unassigned</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditNumber(phoneNumber)}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleDeleteNumber(phoneNumber.id)}\n                            disabled={deleteNumberMutation.isPending}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Phone Number</DialogTitle>\n            <DialogDescription>\n              Update the phone number settings\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"friendlyName\">Friendly Name</Label>\n              <Input\n                id=\"friendlyName\"\n                value={editForm.friendlyName}\n                onChange={(e) => setEditForm(prev => ({ ...prev, friendlyName: e.target.value }))}\n                placeholder=\"Enter a friendly name...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"assistantId\">Assign to Assistant</Label>\n              <Select\n                value={editForm.assistantId}\n                onValueChange={(value) => setEditForm(prev => ({ ...prev, assistantId: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select an assistant\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                  {assistants.map((assistant: any) => (\n                    <SelectItem key={assistant.id} value={assistant.id}>\n                      {assistant.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <Button\n              onClick={handleUpdateNumber}\n              disabled={updateNumberMutation.isPending}\n              className=\"w-full\"\n            >\n              {updateNumberMutation.isPending && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n              Update Phone Number\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n          </>\n        )}\n      </div>\n    </Page>\n  );\n};\n\nexport default PhoneNumbers;\n"],"names":["SuperAdminPhoneNumberManagement","selectedPhoneNumber","setSelectedPhoneNumber","useState","selectedUserId","setSelectedUserId","isAssignDialogOpen","setIsAssignDialogOpen","queryClient","useQueryClient","phoneNumbersData","numbersLoading","numbersError","useQuery","getAllVapiPhoneNumbersForAdmin","usersData","usersLoading","getAllUsersWithRoles","assignMutation","useMutation","phoneNumberId","userId","vapiId","axiosInstance","assignPhoneNumberToUser","toast","error","_b","_a","unassignMutation","unassignPhoneNumber","handleAssignClick","phoneNumber","handleAssignSubmit","handleUnassign","phoneNumbers","users","jsx","Card","CardContent","Loader2","jsxs","CardHeader","Shield","CardTitle","CardDescription","Phone","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","Badge","Button","UserMinus","UserPlus","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","Select","SelectTrigger","SelectValue","SelectContent","user","SelectItem","Users","Fragment","PhoneNumberDebug","isSuperAdmin","usePermissions","allAssignments","assignmentsLoading","refetchAssignments","userNumbers","userLoading","refetchUser","regularNumbers","regularLoading","refetchRegular","handleRefreshAll","Bug","User","_c","_e","_d","id","_f","phone","_g","_h","_i","_j","_k","_l","PhoneNumbers","searchParams","setSearchParams","selectedNumber","setSelectedNumber","isSearchDialogOpen","setIsSearchDialogOpen","isEditDialogOpen","setIsEditDialogOpen","isCreateDialogOpen","setIsCreateDialogOpen","viewMode","setViewMode","editForm","setEditForm","getAllPhoneNumbers","React","availableNumbers","searchLoading","searchNumbers","searchAvailablePhoneNumbers","assistantsData","fetchAllAgents","buyNumberMutation","buyPhoneNumber","updateNumberMutation","data","updatePhoneNumber","deleteNumberMutation","deletePhoneNumber","handleSearch","handleBuyNumber","number","handleEditNumber","handleUpdateNumber","handleDeleteNumber","getStatusBadge","status","variants","assistants","Page","DialogTrigger","Plus","CreatePhoneNumberForm","Label","value","prev","Input","e","Search","ShoppingCart","Edit","Trash2","assistant"],"mappings":"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"}