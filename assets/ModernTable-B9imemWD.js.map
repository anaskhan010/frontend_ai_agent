{"version":3,"file":"ModernTable-B9imemWD.js","sources":["../../src/components/ModernTable.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuCheckboxItem,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  MoreHorizontal,\n  ChevronUp,\n  ChevronDown,\n  Check,\n  ArrowUpDown,\n  Share2,\n  SlidersHorizontal,\n  ListFilter,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Column<T> {\n  header: string;\n  accessor: keyof T;\n  cell?: (value: T[keyof T], item: T, index?: number) => React.ReactNode;\n  sortable?: boolean;\n  className?: string;\n}\n\ninterface Action<T> {\n  label: string;\n  icon: React.ReactNode;\n  onClick: (item: T) => void;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n}\n\ninterface ModernTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  actions?: Action<T>[];\n  onRowClick?: (item: T) => void;\n  isSelectable?: boolean;\n  isLoading?: boolean;\n  emptyState?: React.ReactNode;\n  showColumnSelection?: boolean;\n}\n\ntype SortDirection = \"asc\" | \"desc\" | null;\n\nexport function ModernTable<T extends { id: string | number }>({\n  data,\n  columns,\n  actions,\n  onRowClick,\n  isSelectable = false,\n  isLoading = false,\n  emptyState,\n  showColumnSelection = false,\n}: ModernTableProps<T>) {\n  const [sortColumn, setSortColumn] = useState<keyof T | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [selectedRows, setSelectedRows] = useState<Set<string | number>>(\n    new Set()\n  );\n  const [openDropdowns, setOpenDropdowns] = useState<Set<string | number>>(\n    new Set()\n  );\n\n  // Close all dropdowns when data changes or component unmounts\n  useEffect(() => {\n    setOpenDropdowns(new Set());\n  }, [data]);\n\n  // Close all dropdowns on unmount\n  useEffect(() => {\n    return () => {\n      setOpenDropdowns(new Set());\n    };\n  }, []);\n\n  // Column visibility state - moved to top to fix hooks order\n  const [columnVisibility, setColumnVisibility] = useState<\n    Record<string, boolean>\n  >(\n    columns.reduce(\n      (acc, column) => ({ ...acc, [column.accessor as string]: true }),\n      {}\n    )\n  );\n\n  // Handle sorting\n  const handleSort = (column: keyof T) => {\n    if (sortColumn === column) {\n      // Toggle direction if same column\n      if (sortDirection === \"asc\") {\n        setSortDirection(\"desc\");\n      } else if (sortDirection === \"desc\") {\n        setSortDirection(null);\n        setSortColumn(null);\n      } else {\n        setSortDirection(\"asc\");\n      }\n    } else {\n      // New column, set to ascending\n      setSortColumn(column);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  // Sort data if needed\n  const sortedData = React.useMemo(() => {\n    if (!sortColumn || !sortDirection) return data;\n\n    return [...data].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n\n      if (aValue === bValue) return 0;\n\n      // Handle different types\n      if (typeof aValue === \"string\" && typeof bValue === \"string\") {\n        return sortDirection === \"asc\"\n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      // For numbers and other types\n      if (aValue < bValue) return sortDirection === \"asc\" ? -1 : 1;\n      return sortDirection === \"asc\" ? 1 : -1;\n    });\n  }, [data, sortColumn, sortDirection]);\n\n  // Handle row selection\n  const toggleRowSelection = (id: string | number, event: React.MouseEvent | React.ChangeEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n    setSelectedRows((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(id)) {\n        newSet.delete(id);\n      } else {\n        newSet.add(id);\n      }\n      return newSet;\n    });\n  };\n\n  // Handle row click\n  const handleRowClick = (item: T) => {\n    if (onRowClick) {\n      onRowClick(item);\n    }\n  };\n\n  // Render empty state\n  if (data.length === 0 && !isLoading) {\n    return (\n      <div className=\"mt-6 rounded-lg border border-border/50 bg-card shadow-sm overflow-hidden\">\n        <div className=\"p-8 flex flex-col items-center justify-center text-center\">\n          {emptyState || (\n            <>\n              <div className=\"h-16 w-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-8 w-8 text-muted-foreground\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={1.5}\n                    d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-1\">\n                No data available\n              </h3>\n              <p className=\"text-muted-foreground\">\n                No items found. Try adjusting your filters or add a new item.\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n\n\n  // Column selection dropdown\n  const ColumnSelectionDropdown = () => {\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"ml-auto h-8 flex items-center gap-1 text-xs\"\n          >\n            <ListFilter className=\"h-3.5 w-3.5\" />\n            Columns\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-[180px]\">\n          <DropdownMenuCheckboxItem\n            checked={Object.values(columnVisibility).every(Boolean)}\n            onCheckedChange={(checked) => {\n              const newVisibility = { ...columnVisibility };\n              Object.keys(newVisibility).forEach((key) => {\n                newVisibility[key] = checked;\n              });\n              setColumnVisibility(newVisibility);\n            }}\n            className=\"cursor-pointer\"\n          >\n            Show All\n          </DropdownMenuCheckboxItem>\n          <DropdownMenuSeparator />\n          {columns.map((column) => (\n            <DropdownMenuCheckboxItem\n              key={column.header}\n              checked={columnVisibility[column.accessor as string]}\n              onCheckedChange={(checked) => {\n                setColumnVisibility((prev) => ({\n                  ...prev,\n                  [column.accessor as string]: checked,\n                }));\n              }}\n              className=\"cursor-pointer\"\n            >\n              {column.header}\n            </DropdownMenuCheckboxItem>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  };\n\n  return (\n    <div className=\"mt-6 rounded-lg border border-gray-200 bg-white shadow-sm overflow-hidden\">\n      {showColumnSelection && (\n        <div className=\"px-4 py-2 flex justify-end border-b border-gray-200\">\n          <ColumnSelectionDropdown />\n        </div>\n      )}\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader className=\"bg-gray-50\">\n            <TableRow className=\"hover:bg-transparent border-b border-gray-200\">\n              {isSelectable && (\n                <TableHead className=\"w-[40px] text-center\">\n                  <div className=\"flex items-center justify-center\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary/30\"\n                      onChange={() => {}} // Add select all functionality here\n                    />\n                  </div>\n                </TableHead>\n              )}\n              {columns.map(\n                (column) =>\n                  columnVisibility[column.accessor as string] && (\n                    <TableHead\n                      key={column.header}\n                      className={cn(\n                        \"px-4 py-3 text-left text-xs font-medium text-gray-500 tracking-wider\",\n                        column.sortable && \"cursor-pointer select-none\",\n                        column.className\n                      )}\n                      onClick={() =>\n                        column.sortable && handleSort(column.accessor)\n                      }\n                    >\n                      <div className=\"flex items-center space-x-1\">\n                        <span>{column.header}</span>\n                        {column.sortable && (\n                          <span\n                            className={\n                              sortColumn === column.accessor\n                                ? \"text-primary\"\n                                : \"text-gray-400\"\n                            }\n                          >\n                            {sortColumn === column.accessor ? (\n                              sortDirection === \"asc\" ? (\n                                <ChevronUp className=\"h-4 w-4\" />\n                              ) : (\n                                <ChevronDown className=\"h-4 w-4\" />\n                              )\n                            ) : (\n                              <ArrowUpDown className=\"h-3 w-3\" />\n                            )}\n                          </span>\n                        )}\n                      </div>\n                    </TableHead>\n                  )\n              )}\n              {actions && (\n                <TableHead className=\"w-[100px] px-4 py-3 text-center text-xs font-medium text-gray-500 tracking-wider\">\n                  Actions\n                </TableHead>\n              )}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading\n              ? // Loading state\n                Array.from({ length: 5 }).map((_, index) => (\n                  <TableRow key={`loading-${index}`} className=\"animate-pulse\">\n                    {isSelectable && (\n                      <TableCell className=\"w-[40px] text-center\">\n                        <div className=\"h-4 w-4 bg-gray-200 rounded mx-auto\" />\n                      </TableCell>\n                    )}\n                    {columns.map(\n                      (column, colIndex) =>\n                        columnVisibility[column.accessor as string] && (\n                          <TableCell\n                            key={`loading-cell-${colIndex}`}\n                            className={cn(\n                              \"px-4 py-4\",\n                              // Right-align numerical placeholders for consistency\n                              column.header.includes(\"Total\") ||\n                                column.header === \"Price\"\n                                ? \"text-right\"\n                                : \"\"\n                            )}\n                          >\n                            <div\n                              className={cn(\n                                \"h-4 bg-gray-200 rounded\",\n                                // Adjust width based on column type\n                                column.header.includes(\"Total\") ||\n                                  column.header === \"Price\"\n                                  ? \"w-1/2 ml-auto\"\n                                  : \"w-3/4\"\n                              )}\n                            />\n                          </TableCell>\n                        )\n                    )}\n                    {actions && (\n                      <TableCell className=\"w-[100px] px-4 py-4 text-center\">\n                        <div className=\"h-8 w-8 bg-gray-200 rounded-full mx-auto\" />\n                      </TableCell>\n                    )}\n                  </TableRow>\n                ))\n              : // Actual data\n                sortedData.map((item) => (\n                  <TableRow\n                    key={item.id}\n                    className={cn(\n                      \"border-b border-gray-100 transition-colors\",\n                      onRowClick && \"cursor-pointer hover:bg-gray-50\"\n                    )}\n                    onClick={() => handleRowClick(item)}\n                  >\n                    {isSelectable && (\n                      <TableCell\n                        className=\"w-[40px] text-center\"\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <div className=\"flex items-center justify-center\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary/30\"\n                            checked={selectedRows.has(item.id)}\n                            onChange={(e) => toggleRowSelection(item.id, e)}\n                          />\n                        </div>\n                      </TableCell>\n                    )}\n                    {columns.map(\n                      (column, colIndex) =>\n                        columnVisibility[column.accessor as string] && (\n                          <TableCell\n                            key={`${item.id}-${String(column.accessor)}`}\n                            className={cn(\n                              \"px-4 py-4 text-sm\",\n                              column.className,\n                              // Right-align numerical data\n                              typeof item[column.accessor] === \"number\" &&\n                                \"text-right\"\n                            )}\n                          >\n                            {column.cell\n                              ? column.cell(\n                                  item[column.accessor],\n                                  item,\n                                  sortedData.indexOf(item)\n                                )\n                              : String(item[column.accessor])}\n                          </TableCell>\n                        )\n                    )}\n                    {actions && (\n                      <TableCell\n                        className=\"w-[100px] px-4 py-4 text-center\"\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          {/* <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-8 px-2 text-xs text-gray-700 hover:bg-gray-100\"\n                          >\n                            <Share2 className=\"h-3 w-3 mr-1\" />\n                            Share\n                          </Button> */}\n                          <DropdownMenu\n                            open={openDropdowns.has(item.id)}\n                            onOpenChange={(open) => {\n                              setOpenDropdowns(prev => {\n                                const newSet = new Set(prev);\n                                if (open) {\n                                  newSet.add(item.id);\n                                } else {\n                                  newSet.delete(item.id);\n                                }\n                                return newSet;\n                              });\n                            }}\n                          >\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                className=\"h-8 w-8 p-0 rounded-full hover:bg-gray-100\"\n                                aria-label=\"Open menu\"\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent\n                              align=\"end\"\n                              className=\"w-[160px]\"\n                              onCloseAutoFocus={(event) => {\n                                // Prevent auto-focus issues when dropdown closes\n                                event.preventDefault();\n                              }}\n                            >\n                              {actions.map((action, index) => (\n                                <DropdownMenuItem\n                                  key={index}\n                                  onClick={(event) => {\n                                    // Prevent default and close dropdown immediately\n                                    event.preventDefault();\n\n                                    // Close the dropdown first\n                                    setOpenDropdowns(prev => {\n                                      const newSet = new Set(prev);\n                                      newSet.delete(item.id);\n                                      return newSet;\n                                    });\n\n                                    // Execute action after dropdown closes\n                                    setTimeout(() => {\n                                      action.onClick(item);\n                                    }, 50); // Small delay to ensure dropdown closes\n                                  }}\n                                  className=\"cursor-pointer\"\n                                >\n                                  <span className=\"mr-2 h-4 w-4 text-gray-500\">\n                                    {action.icon}\n                                  </span>\n                                  <span>{action.label}</span>\n                                </DropdownMenuItem>\n                              ))}\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </TableCell>\n                    )}\n                  </TableRow>\n                ))}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n"],"names":["ModernTable","data","columns","actions","onRowClick","isSelectable","isLoading","emptyState","showColumnSelection","sortColumn","setSortColumn","useState","sortDirection","setSortDirection","selectedRows","setSelectedRows","openDropdowns","setOpenDropdowns","useEffect","columnVisibility","setColumnVisibility","acc","column","handleSort","sortedData","React","a","b","aValue","bValue","toggleRowSelection","id","event","prev","newSet","handleRowClick","item","jsx","jsxs","Fragment","ColumnSelectionDropdown","DropdownMenu","DropdownMenuTrigger","Button","ListFilter","DropdownMenuContent","DropdownMenuCheckboxItem","checked","newVisibility","key","DropdownMenuSeparator","Table","TableHeader","TableRow","TableHead","cn","ChevronUp","ChevronDown","ArrowUpDown","TableBody","_","index","TableCell","colIndex","e","open","MoreHorizontal","action","DropdownMenuItem"],"mappings":"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"}