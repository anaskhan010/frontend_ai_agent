{"version":3,"file":"campaignService-BpwqbK_I.js","sources":["../../src/api/services/outbound/campaignService.ts"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface Campaign {\n  id: string;\n  orgId: string;\n  name: string;\n  status: \"scheduled\" | \"in-progress\" | \"ended\";\n  phoneNumberId: string;\n  customers: Customer[];\n  assistantId?: string;\n  workflowId?: string;\n  schedulePlan?: SchedulePlan;\n  calls: Record<string, CampaignCall>;\n  callsCounterScheduled: number;\n  callsCounterQueued: number;\n  callsCounterInProgress: number;\n  callsCounterEndedVoicemail: number;\n  callsCounterEnded: number;\n  endedReason?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Customer {\n  number: string;\n  name?: string;\n  email?: string;\n  externalId?: string;\n  sipUri?: string;\n  numberE164CheckEnabled?: boolean;\n  extension?: string;\n  assistantOverrides?: any;\n}\n\nexport interface SchedulePlan {\n  earliestAt?: string;\n  latestAt?: string;\n}\n\nexport interface CampaignCall {\n  id: string;\n  status: string;\n  customer: Customer;\n  startedAt?: string;\n  endedAt?: string;\n  duration?: number;\n  cost?: number;\n  transcript?: string;\n  recording?: string;\n  endedReason?: string;\n}\n\nexport interface CreateCampaignRequest {\n  name: string;\n  phoneNumberId: string;\n  customers: Customer[];\n  assistantId?: string;\n  workflowId?: string;\n  schedulePlan?: SchedulePlan;\n  autoLaunch?: boolean;\n}\n\nexport interface UpdateCampaignRequest {\n  name?: string;\n  phoneNumberId?: string;\n  customers?: Customer[];\n  assistantId?: string;\n  workflowId?: string;\n  schedulePlan?: SchedulePlan;\n  status?: \"scheduled\" | \"in-progress\" | \"ended\";\n}\n\n// Get all campaigns\nexport async function getAllCampaigns() {\n  try {\n    const res = await axiosInstance.get(\"/api/outboundcall/campaigns\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching campaigns:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch campaigns\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get campaign by ID\nexport async function getCampaignById(id: string) {\n  try {\n    const res = await axiosInstance.get(`/api/outboundcall/campaigns/${id}`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching campaign:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch campaign\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Create campaign\nexport async function createCampaign(data: CreateCampaignRequest) {\n  try {\n    const res = await axiosInstance.post(\"/api/outboundcall/campaigns\", data);\n    toast.success(\"Campaign created successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error creating campaign:\", error);\n    const message = error.response?.data?.message || \"Failed to create campaign\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Update campaign\nexport async function updateCampaign(id: string, data: UpdateCampaignRequest) {\n  try {\n    const res = await axiosInstance.patch(`/api/outboundcall/campaigns/${id}`, data);\n    toast.success(\"Campaign updated successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error updating campaign:\", error);\n    const message = error.response?.data?.message || \"Failed to update campaign\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Delete campaign\nexport async function deleteCampaign(id: string) {\n  try {\n    const res = await axiosInstance.delete(`/api/outboundcall/campaigns/${id}`);\n    toast.success(\"Campaign deleted successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error deleting campaign:\", error);\n    const message = error.response?.data?.message || \"Failed to delete campaign\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get campaign calls\nexport async function getCampaignCalls(id: string) {\n  try {\n    const res = await axiosInstance.get(`/api/outboundcall/campaigns/${id}/calls`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching campaign calls:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch campaign calls\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Launch campaign\nexport async function launchCampaign(id: string) {\n  try {\n    console.log(`Launching campaign: ${id}`);\n    const res = await axiosInstance.post(`/api/outboundcall/campaigns/${id}/launch`);\n    console.log(\"Launch campaign response:\", res.data);\n    toast.success(\"Campaign launched successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error launching campaign:\", {\n      campaignId: id,\n      error: error.response?.data || error.message,\n      status: error.response?.status,\n      statusText: error.response?.statusText\n    });\n\n    const message = error.response?.data?.message || error.response?.data?.error || \"Failed to launch campaign\";\n    const details = error.response?.data?.details;\n\n    if (details) {\n      console.error(\"Launch error details:\", details);\n    }\n\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Pause campaign\nexport async function pauseCampaign(id: string) {\n  try {\n    const res = await axiosInstance.post(`/api/outboundcall/campaigns/${id}/pause`);\n    toast.success(\"Campaign paused successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error pausing campaign:\", error);\n    const message = error.response?.data?.message || \"Failed to pause campaign\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Resume campaign\nexport async function resumeCampaign(id: string) {\n  try {\n    const res = await axiosInstance.post(`/api/outboundcall/campaigns/${id}/resume`);\n    toast.success(\"Campaign resumed successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error resuming campaign:\", error);\n    const message = error.response?.data?.message || \"Failed to resume campaign\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Cancel campaign\nexport async function cancelCampaign(id: string) {\n  try {\n    const res = await axiosInstance.post(`/api/outboundcall/campaigns/${id}/cancel`);\n    toast.success(\"Campaign cancelled successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error cancelling campaign:\", error);\n    const message = error.response?.data?.message || \"Failed to cancel campaign\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Test VAPI connection\nexport async function testVapiConnection(campaignId?: string) {\n  try {\n    const params = campaignId ? { campaignId } : {};\n    const res = await axiosInstance.get(\"/api/outboundcall/test-vapi\", { params });\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error testing VAPI connection:\", error);\n    const message = error.response?.data?.message || \"Failed to test VAPI connection\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Parse CSV file for customers\nexport function parseCSVFile(file: File): Promise<Customer[]> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const csv = e.target?.result as string;\n      const lines = csv.split('\\n');\n      const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n      \n      if (!headers.includes('number')) {\n        reject(new Error('CSV must contain a \"number\" column'));\n        return;\n      }\n\n      const customers: Customer[] = [];\n      \n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n        \n        const values = line.split(',').map(v => v.trim());\n        const customer: Customer = { number: '' };\n        \n        headers.forEach((header, index) => {\n          const value = values[index] || '';\n          switch (header) {\n            case 'number':\n              // Normalize phone number to E.164 format\n              let normalizedNumber = value.replace(/\\D/g, ''); // Remove all non-digits\n              if (normalizedNumber && !normalizedNumber.startsWith('1') && normalizedNumber.length === 10) {\n                // Assume US number if 10 digits without country code\n                normalizedNumber = '1' + normalizedNumber;\n              }\n              if (normalizedNumber && !normalizedNumber.startsWith('+')) {\n                normalizedNumber = '+' + normalizedNumber;\n              }\n              customer.number = normalizedNumber;\n              break;\n            case 'name':\n              customer.name = value;\n              break;\n            case 'email':\n              customer.email = value;\n              break;\n            case 'externalid':\n            case 'external_id':\n              customer.externalId = value;\n              break;\n            case 'sipuri':\n            case 'sip_uri':\n              customer.sipUri = value;\n              break;\n            case 'extension':\n              customer.extension = value;\n              break;\n          }\n        });\n        \n        if (customer.number) {\n          customers.push(customer);\n        }\n      }\n      \n      resolve(customers);\n    };\n    \n    reader.onerror = () => reject(new Error('Failed to read CSV file'));\n    reader.readAsText(file);\n  });\n}\n\n// Download CSV template\nexport function downloadCSVTemplate() {\n  const csvContent = \"number,name,email,external_id\\n+14151234567,John Doe,john@example.com,customer_001\\n+14159876543,Jane Smith,jane@example.com,customer_002\";\n  const blob = new Blob([csvContent], { type: 'text/csv' });\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'campaign_template.csv';\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  window.URL.revokeObjectURL(url);\n}\n"],"names":["getAllCampaigns","axiosInstance","error","message","_b","_a","toast","getCampaignById","id","createCampaign","data","res","deleteCampaign","getCampaignCalls","launchCampaign","_c","_e","_d","_g","_f","details","_i","_h","pauseCampaign","resumeCampaign","cancelCampaign"],"mappings":"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"}