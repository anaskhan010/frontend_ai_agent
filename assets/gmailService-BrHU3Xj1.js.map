{"version":3,"file":"gmailService-BrHU3Xj1.js","sources":["../../src/api/services/gmail/gmailService.ts"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface GmailProfile {\n  email: string;\n  messagesTotal: number;\n  threadsTotal: number;\n}\n\nexport interface GmailStatus {\n  isConnected: boolean;\n  needsReauth?: boolean;\n  profile: GmailProfile | null;\n}\n\nexport interface GmailEmail {\n  id: string;\n  messageId: string;\n  fromAddress: string;\n  email: string;\n  name: string;\n  subject: string;\n  date: string;\n  snippet: string;\n  processed: boolean;\n  createdAt: string;\n}\n\nexport interface GmailEmailsResponse {\n  emails: GmailEmail[];\n  total: number;\n  limit: number;\n  offset: number;\n}\n\n// Generate Gmail OAuth URL\nexport async function generateGmailAuthUrl(): Promise<string> {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/auth/url\");\n    \n    if (res.data.success) {\n      return res.data.data.authUrl;\n    }\n    \n    throw new Error(res.data.message || \"Failed to generate Gmail auth URL\");\n  } catch (error: any) {\n    console.error(\"Error generating Gmail auth URL:\", error);\n    const message = error.response?.data?.message || \"Failed to generate Gmail auth URL\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Handle Gmail OAuth callback\nexport async function handleGmailCallback(code: string, state: string) {\n  try {\n    const res = await axiosInstance.post(\"/api/gmail/auth/callback\", {\n      code,\n      state\n    });\n    \n    if (res.data.success) {\n      toast.success(\"Gmail connected successfully!\");\n      return res.data.data;\n    }\n    \n    throw new Error(res.data.message || \"Failed to connect Gmail\");\n  } catch (error: any) {\n    console.error(\"Error handling Gmail callback:\", error);\n    const message = error.response?.data?.message || \"Failed to connect Gmail\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get Gmail connection status\nexport async function getGmailStatus(): Promise<GmailStatus> {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/auth/status\");\n    \n    if (res.data.success) {\n      return res.data.data;\n    }\n    \n    throw new Error(res.data.message || \"Failed to get Gmail status\");\n  } catch (error: any) {\n    console.error(\"Error getting Gmail status:\", error);\n    const message = error.response?.data?.message || \"Failed to get Gmail status\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Disconnect Gmail\nexport async function disconnectGmail() {\n  try {\n    const res = await axiosInstance.delete(\"/api/gmail/auth/disconnect\");\n    \n    if (res.data.success) {\n      toast.success(\"Gmail disconnected successfully!\");\n      return res.data;\n    }\n    \n    throw new Error(res.data.message || \"Failed to disconnect Gmail\");\n  } catch (error: any) {\n    console.error(\"Error disconnecting Gmail:\", error);\n    const message = error.response?.data?.message || \"Failed to disconnect Gmail\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// List Gmail emails\nexport async function listGmailEmails(query: string = \"\", maxResults: number = 10) {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/emails\", {\n      params: { query, maxResults }\n    });\n    \n    if (res.data.success) {\n      return res.data.data.messages;\n    }\n    \n    throw new Error(res.data.message || \"Failed to list Gmail emails\");\n  } catch (error: any) {\n    console.error(\"Error listing Gmail emails:\", error);\n    const message = error.response?.data?.message || \"Failed to list Gmail emails\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get specific Gmail email details\nexport async function getGmailEmailDetails(messageId: string) {\n  try {\n    const res = await axiosInstance.get(`/api/gmail/emails/${messageId}`);\n    \n    if (res.data.success) {\n      return res.data.data.email;\n    }\n    \n    throw new Error(res.data.message || \"Failed to get Gmail email details\");\n  } catch (error: any) {\n    console.error(\"Error getting Gmail email details:\", error);\n    const message = error.response?.data?.message || \"Failed to get Gmail email details\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get stored Gmail emails from database\nexport async function getStoredGmailEmails(limit: number = 50, offset: number = 0): Promise<GmailEmailsResponse> {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/emails/stored\", {\n      params: { limit, offset }\n    });\n    \n    if (res.data.success) {\n      return res.data.data;\n    }\n    \n    throw new Error(res.data.message || \"Failed to get stored Gmail emails\");\n  } catch (error: any) {\n    console.error(\"Error getting stored Gmail emails:\", error);\n    const message = error.response?.data?.message || \"Failed to get stored Gmail emails\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n\n// Connect Gmail (redirect to OAuth in same tab) - using backend API\nexport async function connectGmail(userId?: string, redirectPath?: string) {\n  try {\n    const response = await axiosInstance.get(\"/api/gmail/auth/url\", {\n      params: { redirectPath: redirectPath || '/webhooks' }\n    });\n    \n    if (response.data.success) {\n      window.location.href = response.data.data.authUrl;\n    } else {\n      throw new Error(response.data.message || \"Failed to generate Gmail auth URL\");\n    }\n  } catch (error: any) {\n    console.error(\"Error generating Gmail auth URL:\", error);\n    const message = error.response?.data?.message || \"Failed to generate Gmail auth URL\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Check if Gmail is configured\nexport function isGmailConfigured(): boolean {\n  return !!(import.meta.env.VITE_GMAIL_CLIENT_ID);\n}\n\n// Send email via Gmail\nexport async function sendGmailEmail(emailData: {\n  to: string;\n  cc?: string;\n  bcc?: string;\n  subject: string;\n  body: string;\n  isHtml?: boolean;\n  attachments?: string[];\n}) {\n  try {\n    const res = await axiosInstance.post(\"/api/gmail/emails/send\", emailData);\n\n    if (res.data.success) {\n      toast.success(\"Email sent successfully!\");\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to send email\");\n  } catch (error: any) {\n    console.error(\"Error sending Gmail email:\", error);\n    const message = error.response?.data?.message || \"Failed to send email\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// New Gmail Actions (from gmail-code reference)\n\n// Create draft email\nexport async function createGmailDraft(emailData: {\n  to: string;\n  cc?: string;\n  bcc?: string;\n  subject: string;\n  body: string;\n  isHtml?: boolean;\n}) {\n  try {\n    const res = await axiosInstance.post(\"/api/gmail/emails/draft\", emailData);\n\n    if (res.data.success) {\n      toast.success(\"Draft created successfully!\");\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to create draft\");\n  } catch (error: any) {\n    console.error(\"Error creating Gmail draft:\", error);\n    const message = error.response?.data?.message || \"Failed to create draft\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Reply to email\nexport async function replyToGmailEmail(messageId: string, replyData: {\n  body: string;\n  isHtml?: boolean;\n}) {\n  try {\n    const res = await axiosInstance.post(`/api/gmail/emails/${messageId}/reply`, replyData);\n\n    if (res.data.success) {\n      toast.success(\"Reply sent successfully!\");\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to send reply\");\n  } catch (error: any) {\n    console.error(\"Error replying to Gmail email:\", error);\n    const message = error.response?.data?.message || \"Failed to send reply\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Star/unstar email\nexport async function starGmailEmail(messageId: string, star: boolean = true) {\n  try {\n    const res = await axiosInstance.post(`/api/gmail/emails/${messageId}/star`, { star });\n\n    if (res.data.success) {\n      toast.success(`Email ${star ? 'starred' : 'unstarred'} successfully!`);\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || `Failed to ${star ? 'star' : 'unstar'} email`);\n  } catch (error: any) {\n    console.error(`Error ${star ? 'starring' : 'unstarring'} Gmail email:`, error);\n    const message = error.response?.data?.message || `Failed to ${star ? 'star' : 'unstar'} email`;\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Move email to trash\nexport async function moveGmailEmailToTrash(messageId: string) {\n  try {\n    const res = await axiosInstance.post(`/api/gmail/emails/${messageId}/trash`);\n\n    if (res.data.success) {\n      toast.success(\"Email moved to trash successfully!\");\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to move email to trash\");\n  } catch (error: any) {\n    console.error(\"Error moving Gmail email to trash:\", error);\n    const message = error.response?.data?.message || \"Failed to move email to trash\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Dynamic Data Providers (from gmail-code reference)\n\n// List Gmail labels\nexport async function listGmailLabels() {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/data/labels\");\n\n    if (res.data.success) {\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to list Gmail labels\");\n  } catch (error: any) {\n    console.error(\"Error listing Gmail labels:\", error);\n    const message = error.response?.data?.message || \"Failed to list Gmail labels\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// List user emails/aliases\nexport async function listUserEmails() {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/data/emails\");\n\n    if (res.data.success) {\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to list user emails\");\n  } catch (error: any) {\n    console.error(\"Error listing user emails:\", error);\n    const message = error.response?.data?.message || \"Failed to list user emails\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// List Gmail signatures\nexport async function listGmailSignatures() {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/data/signatures\");\n\n    if (res.data.success) {\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to list Gmail signatures\");\n  } catch (error: any) {\n    console.error(\"Error listing Gmail signatures:\", error);\n    const message = error.response?.data?.message || \"Failed to list Gmail signatures\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// List Gmail messages\nexport async function listGmailMessages(query: string = \"\", maxResults: number = 10) {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/data/messages\", {\n      params: { query, maxResults }\n    });\n\n    if (res.data.success) {\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to list Gmail messages\");\n  } catch (error: any) {\n    console.error(\"Error listing Gmail messages:\", error);\n    const message = error.response?.data?.message || \"Failed to list Gmail messages\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// List Gmail threads\nexport async function listGmailThreads(query: string = \"\", maxResults: number = 10) {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail/data/threads\", {\n      params: { query, maxResults }\n    });\n\n    if (res.data.success) {\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to list Gmail threads\");\n  } catch (error: any) {\n    console.error(\"Error listing Gmail threads:\", error);\n    const message = error.response?.data?.message || \"Failed to list Gmail threads\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Enhanced Gmail watch status (from gmail-code reference)\nexport async function getEnhancedGmailWatchStatus() {\n  try {\n    const res = await axiosInstance.get(\"/api/gmail-webhook/watch-status\");\n\n    if (res.data.success) {\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to get Gmail watch status\");\n  } catch (error: any) {\n    console.error(\"Error getting Gmail watch status:\", error);\n    const message = error.response?.data?.message || \"Failed to get Gmail watch status\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Send bulk emails via Gmail\nexport async function sendBulkGmailEmails(emails: Array<{\n  to: string;\n  subject: string;\n  body: string;\n  isHtml?: boolean;\n}>) {\n  try {\n    const res = await axiosInstance.post(\"/api/gmail/emails/send-bulk\", { emails });\n\n    if (res.data.success) {\n      const successCount = res.data.data.filter((r: any) => r.success).length;\n      toast.success(`${successCount} emails sent successfully!`);\n      return res.data.data;\n    }\n\n    throw new Error(res.data.message || \"Failed to send bulk emails\");\n  } catch (error: any) {\n    console.error(\"Error sending bulk Gmail emails:\", error);\n    const message = error.response?.data?.message || \"Failed to send bulk emails\";\n    toast.error(message);\n    throw error;\n  }\n}\n"],"names":["sendGmailEmail","emailData","res","axiosInstance","toast","error","message","_b","_a"],"mappings":"+CAsMA,eAAsBA,EAAeC,EAQlC,SACG,GAAA,CACF,MAAMC,EAAM,MAAMC,EAAc,KAAK,yBAA0BF,CAAS,EAEpE,GAAAC,EAAI,KAAK,QACXE,OAAAA,EAAM,QAAQ,0BAA0B,EACjCF,EAAI,KAAK,KAGlB,MAAM,IAAI,MAAMA,EAAI,KAAK,SAAW,sBAAsB,QACnDG,EAAY,CACX,QAAA,MAAM,6BAA8BA,CAAK,EACjD,MAAMC,IAAUC,GAAAC,EAAAH,EAAM,WAAN,YAAAG,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,uBACjDH,MAAAA,EAAM,MAAME,CAAO,EACbD,CAAA,CAEV"}