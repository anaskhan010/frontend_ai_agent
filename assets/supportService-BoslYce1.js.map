{"version":3,"file":"supportService-BoslYce1.js","sources":["../../src/api/services/support/supportService.ts"],"sourcesContent":["import { apiClient } from \"@/api/client\";\n\n// Types\nexport interface SupportTicket {\n  id: string;\n  user_id: string;\n  ticket_id: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: string;\n  status: string;\n  assigned_to?: string;\n  user_first_name?: string;\n  user_last_name?: string;\n  user_email?: string;\n  assigned_first_name?: string;\n  assigned_last_name?: string;\n  assigned_email?: string;\n  message_count: number;\n  attachments?: any[];\n  tags?: string[];\n  metadata?: any;\n  created_at: string;\n  updated_at: string;\n  resolved_at?: string;\n  closed_at?: string;\n}\n\nexport interface SupportTicketMessage {\n  id: string;\n  message_id: string;\n  ticket_id: string;\n  user_id: string;\n  message: string;\n  message_type: string;\n  attachments?: any[];\n  is_internal: boolean;\n  metadata?: any;\n  first_name?: string;\n  last_name?: string;\n  email?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SupportCategory {\n  id: string;\n  category_id: string;\n  name: string;\n  description?: string;\n  color: string;\n  icon: string;\n  is_active: boolean;\n  sort_order: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateSupportTicketData {\n  title: string;\n  description: string;\n  category: string;\n  priority: string;\n  attachments?: any[];\n  tags?: string[];\n}\n\nexport interface UpdateSupportTicketData {\n  title?: string;\n  description?: string;\n  category?: string;\n  priority?: string;\n  status?: string;\n  attachments?: any[];\n  tags?: string[];\n}\n\nexport interface AddTicketMessageData {\n  message: string;\n  attachments?: any[];\n}\n\nexport interface SupportTicketFilters {\n  search?: string;\n  status?: string;\n  category?: string;\n  priority?: string;\n  page?: number;\n  limit?: number;\n}\n\n// API Response types\ninterface ApiResponse<T> {\n  success: boolean;\n  message: string;\n  data: T;\n  count?: number;\n  total?: number;\n}\n\n// Get all support tickets\nexport const getAllSupportTickets = async (\n  filters: SupportTicketFilters = {}\n): Promise<ApiResponse<SupportTicket[]> & { total: number }> => {\n  try {\n    const params = new URLSearchParams();\n    \n    if (filters.search) params.append(\"search\", filters.search);\n    if (filters.status) params.append(\"status\", filters.status);\n    if (filters.category) params.append(\"category\", filters.category);\n    if (filters.priority) params.append(\"priority\", filters.priority);\n    if (filters.page) params.append(\"page\", filters.page.toString());\n    if (filters.limit) params.append(\"limit\", filters.limit.toString());\n\n    const response = await apiClient.get(`/api/support/tickets?${params.toString()}`);\n    \n    return {\n      ...response.data,\n      total: response.data.count || (response.data.data ? response.data.data.length : 0),\n    };\n  } catch (error: any) {\n    console.error(\"❌ Error fetching support tickets:\", error);\n    console.error(\"❌ Error response:\", error.response);\n    console.error(\"❌ Error status:\", error.response?.status);\n    console.error(\"❌ Error data:\", error.response?.data);\n    console.error(\"❌ Request config:\", error.config);\n    throw new Error(error.response?.data?.message || error.message || \"Failed to fetch support tickets\");\n  }\n};\n\n// Get support ticket by ID\nexport const getSupportTicketById = async (ticketId: string): Promise<ApiResponse<SupportTicket>> => {\n  try {\n    const response = await apiClient.get(`/api/support/tickets/${ticketId}`);\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error fetching support ticket:\", error);\n    throw new Error(error.response?.data?.message || \"Failed to fetch support ticket\");\n  }\n};\n\n// Create support ticket\nexport const createSupportTicket = async (\n  ticketData: CreateSupportTicketData\n): Promise<ApiResponse<{ id: string; ticket_id: string }>> => {\n  try {\n    const response = await apiClient.post(\"/api/support/tickets\", ticketData);\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error creating support ticket:\", error);\n    throw new Error(error.response?.data?.message || \"Failed to create support ticket\");\n  }\n};\n\n// Update support ticket\nexport const updateSupportTicket = async (\n  ticketId: string,\n  updates: UpdateSupportTicketData\n): Promise<ApiResponse<null>> => {\n  try {\n    const response = await apiClient.put(`/api/support/tickets/${ticketId}`, updates);\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error updating support ticket:\", error);\n    throw new Error(error.response?.data?.message || \"Failed to update support ticket\");\n  }\n};\n\n// Delete support ticket\nexport const deleteSupportTicket = async (ticketId: string): Promise<ApiResponse<null>> => {\n  try {\n    const response = await apiClient.delete(`/api/support/tickets/${ticketId}`);\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error deleting support ticket:\", error);\n    throw new Error(error.response?.data?.message || \"Failed to delete support ticket\");\n  }\n};\n\n// Get ticket messages\nexport const getTicketMessages = async (ticketId: string): Promise<ApiResponse<SupportTicketMessage[]>> => {\n  try {\n    const response = await apiClient.get(`/api/support/tickets/${ticketId}/messages`);\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error fetching ticket messages:\", error);\n    throw new Error(error.response?.data?.message || \"Failed to fetch ticket messages\");\n  }\n};\n\n// Add message to ticket\nexport const addTicketMessage = async (\n  ticketId: string,\n  messageData: AddTicketMessageData\n): Promise<ApiResponse<{ id: string; message_id: string }>> => {\n  try {\n    const response = await apiClient.post(`/api/support/tickets/${ticketId}/messages`, messageData);\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error adding ticket message:\", error);\n    throw new Error(error.response?.data?.message || \"Failed to add message\");\n  }\n};\n\n// Get support categories\nexport const getSupportCategories = async (): Promise<ApiResponse<SupportCategory[]>> => {\n  try {\n    const response = await apiClient.get(\"/api/support/categories\");\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error fetching support categories:\", error);\n    throw new Error(error.response?.data?.message || \"Failed to fetch support categories\");\n  }\n};\n\n// Utility functions for frontend\nexport const formatTicketId = (ticketId: string): string => {\n  return `#${ticketId.slice(-8).toUpperCase()}`;\n};\n\nexport const getStatusColor = (status: string): string => {\n  switch (status) {\n    case \"open\":\n      return \"text-blue-600\";\n    case \"in_progress\":\n      return \"text-yellow-600\";\n    case \"waiting_response\":\n      return \"text-orange-600\";\n    case \"resolved\":\n      return \"text-green-600\";\n    case \"closed\":\n      return \"text-gray-600\";\n    default:\n      return \"text-gray-600\";\n  }\n};\n\nexport const getPriorityColor = (priority: string): string => {\n  switch (priority) {\n    case \"low\":\n      return \"text-green-600\";\n    case \"medium\":\n      return \"text-yellow-600\";\n    case \"high\":\n      return \"text-orange-600\";\n    case \"urgent\":\n      return \"text-red-600\";\n    default:\n      return \"text-gray-600\";\n  }\n};\n\nexport const getCategoryColor = (category: string): string => {\n  switch (category) {\n    case \"technical\":\n      return \"text-blue-600\";\n    case \"billing\":\n      return \"text-green-600\";\n    case \"feature_request\":\n      return \"text-purple-600\";\n    case \"bug_report\":\n      return \"text-red-600\";\n    case \"general\":\n      return \"text-gray-600\";\n    default:\n      return \"text-gray-600\";\n  }\n};\n\nexport const formatRelativeTime = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n\n  if (diffInSeconds < 60) {\n    return \"Just now\";\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes} minute${minutes > 1 ? \"s\" : \"\"} ago`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours} hour${hours > 1 ? \"s\" : \"\"} ago`;\n  } else if (diffInSeconds < 604800) {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n  } else {\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  }\n};\n"],"names":["getAllSupportTickets","filters","params","response","apiClient","error","_a","_b","_d","_c","getSupportTicketById","ticketId","createSupportTicket","ticketData","updateSupportTicket","updates","deleteSupportTicket","getTicketMessages","addTicketMessage","messageData","getSupportCategories"],"mappings":"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"}