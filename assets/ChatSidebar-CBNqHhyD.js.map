{"version":3,"file":"ChatSidebar-CBNqHhyD.js","sources":["../../src/components/ContactMessaging/ChatSidebar.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport {\n  Send,\n  Phone,\n  Mail,\n  X,\n  MessageSquare,\n  Check,\n  CheckCheck,\n  AlertCircle,\n  Loader2,\n  Minimize2,\n  Maximize2\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { toast } from 'sonner';\nimport {\n  sendSMSToContact,\n  getContactMessages,\n  checkNewIncomingMessages,\n  formatPhoneToE164,\n  formatPhoneForDisplay\n} from '@/api/services/messaging/messagingService';\nimport { getAllPhoneNumbers } from '@/api/services/phoneNumbers/phoneNumberService';\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: 'user' | 'contact';\n  timestamp: Date;\n  status: 'sending' | 'sent' | 'delivered' | 'failed' | 'read';\n  messageId?: string;\n}\n\ninterface Contact {\n  id: string;\n  email: string;\n  contact_number: string;\n  list_name?: string;\n}\n\ninterface ChatSidebarProps {\n  isOpen: boolean;\n  contact: Contact | null;\n  onClose: () => void;\n}\n\nconst ChatSidebar: React.FC<ChatSidebarProps> = ({ isOpen, contact, onClose }) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSending, setIsSending] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [phoneNumbers, setPhoneNumbers] = useState<any[]>([]);\n  const [selectedFromNumber, setSelectedFromNumber] = useState<string>('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Load message history when contact changes\n  useEffect(() => {\n    if (contact && isOpen) {\n      loadMessageHistory();\n    }\n  }, [contact, isOpen]);\n\n  // Set up efficient polling for incoming messages only\n  useEffect(() => {\n    if (!contact || !isOpen || !contact.id) return;\n\n    // Set up polling every 2 seconds for new incoming messages only\n    const pollInterval = setInterval(async () => {\n      try {\n        // Get the last message ID to check for new messages after it\n        const lastMessage = messages[messages.length - 1];\n        const lastMessageId = lastMessage?.id;\n\n        console.log(`🔍 Polling for new incoming messages for contact ${contact.id} after ID: ${lastMessageId}`);\n\n        const response = await checkNewIncomingMessages(contact.id, lastMessageId);\n\n        if (response.success && response.hasNewMessages && response.messages.length > 0) {\n          console.log(`📨 Found ${response.messages.length} new incoming messages`);\n\n          // Add new incoming messages to the existing messages\n          const newMessages = response.messages.map(msg => ({\n            id: msg.id.toString(),\n            content: msg.content,\n            sender: msg.sender as 'user' | 'contact',\n            timestamp: new Date(msg.timestamp),\n            status: msg.status as 'sending' | 'sent' | 'delivered' | 'failed' | 'read',\n            messageId: msg.messageId\n          }));\n\n          setMessages(prev => [...prev, ...newMessages]);\n\n          // Show notification for new messages\n          toast.success(`New message from ${contact.email?.split('@')[0] || 'Contact'}`);\n        }\n      } catch (error) {\n        console.error('Error polling for new messages:', error);\n        // Don't show error toast to avoid spam\n      }\n    }, 2000);\n\n    return () => {\n      clearInterval(pollInterval);\n    };\n  }, [contact?.id, isOpen, messages]);\n\n  // Load user's phone numbers\n  const loadPhoneNumbers = async () => {\n    try {\n      const response = await getAllPhoneNumbers();\n      if (response.success && response.data) {\n        setPhoneNumbers(response.data);\n        // Auto-select first phone number if available\n        if (response.data.length > 0 && !selectedFromNumber) {\n          setSelectedFromNumber(response.data[0].number);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load phone numbers:', error);\n    }\n  };\n\n  // Load phone numbers when component mounts\n  useEffect(() => {\n    if (isOpen) {\n      loadPhoneNumbers();\n    }\n  }, [isOpen]);\n\n  // Reset state when sidebar closes\n  useEffect(() => {\n    if (!isOpen) {\n      setMessages([]);\n      setNewMessage('');\n      setIsMinimized(false);\n    }\n  }, [isOpen]);\n\n  const loadMessageHistory = async () => {\n    if (!contact) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await getContactMessages(contact.id);\n      if (response.success) {\n        const formattedMessages: Message[] = response.messages.map((msg: any) => ({\n          id: msg.id.toString(),\n          content: msg.content,\n          sender: msg.sender,\n          timestamp: new Date(msg.timestamp),\n          status: msg.status,\n          messageId: msg.message_id\n        }));\n        setMessages(formattedMessages);\n      } else {\n        setMessages([]);\n      }\n    } catch (error) {\n      console.error('Failed to load message history:', error);\n      toast.error('Failed to load message history');\n      setMessages([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!newMessage.trim() || !contact || isSending) return;\n\n    const messageContent = newMessage.trim();\n    setNewMessage('');\n    setIsSending(true);\n\n    // Create temporary message with sending status\n    const tempMessage: Message = {\n      id: Date.now().toString(),\n      content: messageContent,\n      sender: 'user',\n      timestamp: new Date(),\n      status: 'sending'\n    };\n\n    setMessages(prev => [...prev, tempMessage]);\n\n    try {\n      // Format phone number to E.164 format\n      const formattedPhone = formatPhoneToE164(contact.contact_number);\n      \n      // Send SMS using the messaging service with selected phone number\n      const result = await sendSMSToContact({\n        toPhoneNumber: formattedPhone,\n        message: messageContent,\n        contactId: contact.id,\n        fromPhoneNumber: selectedFromNumber || undefined\n      });\n      \n      if (result.success) {\n        // Update message status to sent\n        setMessages(prev => \n          prev.map(msg => \n            msg.id === tempMessage.id \n              ? { ...msg, status: 'sent', messageId: result.messageId }\n              : msg\n          )\n        );\n        toast.success('Message sent successfully');\n      } else {\n        throw new Error(result.error || 'Failed to send message');\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      \n      // Update message status to failed\n      setMessages(prev => \n        prev.map(msg => \n          msg.id === tempMessage.id \n            ? { ...msg, status: 'failed' }\n            : msg\n        )\n      );\n      \n      toast.error('Failed to send message');\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const getInitials = (email: string) => {\n    const name = email.split('@')[0];\n    return name.substring(0, 2).toUpperCase();\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const getMessageStatusIcon = (status: Message['status']) => {\n    switch (status) {\n      case 'sending':\n        return <Loader2 className=\"h-3 w-3 animate-spin text-gray-400\" />;\n      case 'sent':\n        return <Check className=\"h-3 w-3 text-gray-400\" />;\n      case 'delivered':\n        return <CheckCheck className=\"h-3 w-3 text-blue-500\" />;\n      case 'failed':\n        return <AlertCircle className=\"h-3 w-3 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  if (!contact) return null;\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/20 z-40 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed top-0 right-0 h-full w-full sm:w-1/2 lg:w-2/5 xl:w-1/3 bg-white shadow-2xl z-50 transform transition-transform duration-300 ease-in-out flex flex-col border-l border-gray-200\",\n        isOpen ? \"translate-x-0\" : \"translate-x-full\"\n      )}>\n        {/* Header */}\n        <div className=\"p-6 border-b bg-gradient-to-r from-blue-50 to-indigo-50 flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Avatar className=\"h-14 w-14 bg-gradient-to-br from-blue-500 to-indigo-600 shadow-lg\">\n                <AvatarFallback className=\"text-white font-semibold text-lg\">\n                  {getInitials(contact.email)}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h3 className=\"font-bold text-gray-900 text-xl\">\n                  {contact.email.split('@')[0]}\n                </h3>\n                <div className=\"flex flex-col space-y-2 text-sm text-gray-600\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-4 w-4 text-blue-500\" />\n                    <span className=\"truncate font-medium\">{contact.email}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"h-4 w-4 text-green-500\" />\n                    <span className=\"font-medium\">{formatPhoneForDisplay(contact.contact_number)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              {contact.list_name && (\n                <Badge variant=\"secondary\" className=\"text-xs bg-blue-100 text-blue-700 border-blue-200\">\n                  {contact.list_name}\n                </Badge>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsMinimized(!isMinimized)}\n                className=\"h-9 w-9 p-0 hover:bg-blue-100 rounded-full\"\n              >\n                {isMinimized ? <Maximize2 className=\"h-4 w-4\" /> : <Minimize2 className=\"h-4 w-4\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                className=\"h-9 w-9 p-0 hover:bg-red-100 text-gray-600 hover:text-red-600 rounded-full\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {!isMinimized && (\n          <>\n            {/* Messages Area */}\n            <div className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-b from-gray-50 to-white\">\n              {messages.length === 0 ? (\n                <div className=\"flex flex-col items-center justify-center h-full text-gray-400\">\n                  <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center mb-4 shadow-sm\">\n                    <MessageSquare className=\"h-8 w-8\" />\n                  </div>\n                  <p className=\"text-center text-sm\">\n                    No messages yet. Start a conversation!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={cn(\n                        'flex',\n                        message.sender === 'user' ? 'justify-end' : 'justify-start'\n                      )}\n                    >\n                      <div\n                        className={cn(\n                          'max-w-[80%] rounded-lg px-4 py-2 shadow-sm',\n                          message.sender === 'user'\n                            ? 'bg-primary text-primary-foreground'\n                            : 'bg-white text-gray-900 border'\n                        )}\n                      >\n                        <p className=\"text-sm\">{message.content}</p>\n                        <div className={cn(\n                          'flex items-center justify-end space-x-1 mt-1',\n                          message.sender === 'user' ? 'text-primary-foreground/70' : 'text-gray-500'\n                        )}>\n                          <span className=\"text-xs\">{formatTime(message.timestamp)}</span>\n                          {message.sender === 'user' && getMessageStatusIcon(message.status)}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  <div ref={messagesEndRef} />\n                </div>\n              )}\n            </div>\n\n            {/* Message Input */}\n            <div className=\"p-6 border-t bg-white flex-shrink-0 shadow-lg\">\n              {/* Phone Number Selector */}\n              {phoneNumbers.length > 0 && (\n                <div className=\"mb-4\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Send from phone number:\n                  </label>\n                  <Select value={selectedFromNumber} onValueChange={setSelectedFromNumber}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Select phone number\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {phoneNumbers.map((phone) => (\n                        <SelectItem key={phone.id} value={phone.number}>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{formatPhoneForDisplay(phone.number)}</span>\n                            {phone.friendlyName && (\n                              <span className=\"text-gray-500 text-sm\">({phone.friendlyName})</span>\n                            )}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              <div className=\"flex items-center space-x-3\">\n                <Input\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Type your message...\"\n                  className=\"flex-1 border-gray-300 focus:border-blue-500 focus:ring-blue-500 rounded-lg\"\n                  disabled={isSending}\n                />\n                <Button\n                  onClick={sendMessage}\n                  disabled={!newMessage.trim() || isSending || !selectedFromNumber}\n                  size=\"sm\"\n                  className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg shadow-md\"\n                >\n                  {isSending ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Send className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-3 flex items-center space-x-1\">\n                <MessageSquare className=\"h-3 w-3\" />\n                <span>\n                  {selectedFromNumber\n                    ? `Sending from ${formatPhoneForDisplay(selectedFromNumber)} to ${formatPhoneForDisplay(contact.contact_number)}`\n                    : `Messages will be sent via SMS to ${formatPhoneForDisplay(contact.contact_number)}`\n                  }\n                </span>\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ChatSidebar;\n"],"names":["ChatSidebar","isOpen","contact","onClose","messages","setMessages","useState","newMessage","setNewMessage","isLoading","setIsLoading","isSending","setIsSending","isMinimized","setIsMinimized","phoneNumbers","setPhoneNumbers","selectedFromNumber","setSelectedFromNumber","messagesEndRef","useRef","scrollToBottom","_a","useEffect","loadMessageHistory","pollInterval","lastMessage","lastMessageId","response","checkNewIncomingMessages","newMessages","msg","prev","toast","error","loadPhoneNumbers","getAllPhoneNumbers","getContactMessages","formattedMessages","sendMessage","messageContent","tempMessage","formattedPhone","formatPhoneToE164","result","sendSMSToContact","handleKeyPress","e","getInitials","email","formatTime","date","getMessageStatusIcon","status","jsx","Loader2","Check","CheckCheck","AlertCircle","jsxs","Fragment","cn","Avatar","AvatarFallback","Mail","Phone","formatPhoneForDisplay","Badge","Button","Maximize2","Minimize2","MessageSquare","message","Select","SelectTrigger","SelectValue","SelectContent","phone","SelectItem","Input","Send"],"mappings":"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"}