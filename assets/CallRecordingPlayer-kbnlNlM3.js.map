{"version":3,"file":"CallRecordingPlayer-kbnlNlM3.js","sources":["../../src/api/services/callHistory/callHistoryService.ts","../../src/components/CallRecordingPlayer.tsx"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface CallHistoryItem {\n  id: string;\n  call_id: string;\n  customer_number: string;\n  status: \"queued\" | \"ringing\" | \"in-progress\" | \"forwarding\" | \"ended\";\n  type: \"outbound\" | \"inbound\" | \"web\";\n  duration: number;\n  cost: number;\n  transcript: string;\n  recording_url?: string;\n  recordingUrl?: string;\n  recording?: string;\n  assistant_id?: string;\n  assistant_name?: string;\n  end_reason?: string;\n  started_at?: string;\n  ended_at?: string;\n  created_at: string;\n  updated_at: string;\n  metadata?: any;\n}\n\nexport interface CallHistoryResponse {\n  calls: CallHistoryItem[];\n  totalCalls: number;\n  currentPage: number;\n  totalPages: number;\n  hasNextPage: boolean;\n  hasPrevPage: boolean;\n}\n\n// Get call history for a specific contact by phone number\nexport async function getContactCallHistory(\n  phoneNumber: string,\n  page: number = 1,\n  limit: number = 10\n): Promise<CallHistoryResponse> {\n  try {\n    // Encode phone number to handle special characters like +\n    const encodedPhoneNumber = encodeURIComponent(phoneNumber);\n    \n    const response = await axiosInstance.get(\n      `/api/outboundcall/contact/${encodedPhoneNumber}/history`,\n      {\n        params: { page, limit }\n      }\n    );\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to fetch call history\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching call history:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch call history\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get call recording URL\nexport async function getCallRecording(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/recording/${callId}`);\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get recording\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching call recording:\", error);\n\n    // Don't show toast for 404 errors (recording not available)\n    if (error.response?.status !== 404) {\n      const message = error.response?.data?.message || \"Failed to get recording\";\n      toast.error(message);\n    }\n\n    throw error;\n  }\n}\n\n// Get call transcript\nexport async function getCallTranscript(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/transcript/${callId}`);\n    \n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get transcript\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching call transcript:\", error);\n    const message = error.response?.data?.message || \"Failed to get transcript\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Format duration from seconds to readable format\nexport function formatDuration(seconds: number): string {\n  if (!seconds || seconds === 0) return \"0:00\";\n  \n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  \n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n}\n\n// Format call status for display\nexport function formatCallStatus(status: string): { text: string; color: string } {\n  switch (status) {\n    case \"ended\":\n      return { text: \"Completed\", color: \"text-green-600\" };\n    case \"in-progress\":\n      return { text: \"In Progress\", color: \"text-blue-600\" };\n    case \"ringing\":\n      return { text: \"Ringing\", color: \"text-yellow-600\" };\n    case \"queued\":\n      return { text: \"Queued\", color: \"text-gray-600\" };\n    case \"forwarding\":\n      return { text: \"Forwarding\", color: \"text-purple-600\" };\n    default:\n      return { text: status, color: \"text-gray-600\" };\n  }\n}\n\n// Format call cost for display\nexport function formatCallCost(cost: number): string {\n  if (!cost || cost === 0) return \"$0.00\";\n  return `$${cost.toFixed(2)}`;\n}\n\n// Check if call has recording available\nexport function hasRecording(call: CallHistoryItem): boolean {\n  // Check if we have a valid recording URL (not a mock URL)\n  const recordingUrl = call.recording_url || call.recordingUrl;\n  const hasMockUrl = recordingUrl && recordingUrl.includes('/api/recordings/') && recordingUrl.includes('/stream');\n\n  return !!(\n    (recordingUrl && !hasMockUrl) || // Has real recording URL\n    call.recording === \"available\" || // Explicitly marked as available\n    call.status === \"ended\" // Ended calls might have recordings available from VAPI\n  );\n}\n\n// Get recording URL from call data\nexport function getRecordingUrl(call: CallHistoryItem): string | null {\n  return call.recording_url || call.recordingUrl || null;\n}\n\n// Format date for display\nexport function formatCallDate(dateString: string): string {\n  try {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    return dateString;\n  }\n}\n\n// Campaign-specific endpoints that fetch directly from VAPI\nexport async function getCampaignCallRecording(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/campaign-recording/${callId}`);\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get campaign call recording\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching campaign call recording:\", error);\n    const message = error.response?.data?.message || \"Failed to get campaign call recording\";\n    toast.error(message);\n    throw error;\n  }\n}\n\nexport async function getCampaignCallTranscript(callId: string) {\n  try {\n    const response = await axiosInstance.get(`/api/outboundcall/campaign-transcript/${callId}`);\n\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || \"Failed to get campaign call transcript\");\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching campaign call transcript:\", error);\n    const message = error.response?.data?.message || \"Failed to get campaign call transcript\";\n    toast.error(message);\n    throw error;\n  }\n}\n","import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Play,\n  Pause,\n  Volume2,\n  VolumeX,\n  Download,\n  FileText,\n  X,\n  RefreshCw\n} from \"lucide-react\";\nimport { CallHistoryItem, getCallRecording, getCallTranscript } from \"@/api/services/callHistory/callHistoryService\";\nimport { toast } from \"sonner\";\n\ninterface CallRecordingPlayerProps {\n  call: CallHistoryItem | null;\n  isOpen: boolean;\n  onClose: () => void;\n  // Optional custom service functions for campaign calls\n  customGetRecording?: (callId: string) => Promise<any>;\n  customGetTranscript?: (callId: string) => Promise<any>;\n}\n\nexport function CallRecordingPlayer({ call, isOpen, onClose, customGetRecording, customGetTranscript }: CallRecordingPlayerProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [recordingUrl, setRecordingUrl] = useState<string | null>(null);\n  const [transcript, setTranscript] = useState<string | null>(null);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [parsedMessages, setParsedMessages] = useState<Array<{\n    speaker: 'assistant' | 'customer';\n    message: string;\n    timestamp?: string;\n  }>>([]);\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  // Load recording when call changes\n  useEffect(() => {\n    if (call && isOpen) {\n      loadRecording();\n      loadTranscript();\n    }\n  }, [call, isOpen]);\n\n  // Update current time\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const updateTime = () => setCurrentTime(audio.currentTime);\n    const updateDuration = () => setDuration(audio.duration);\n\n    audio.addEventListener('timeupdate', updateTime);\n    audio.addEventListener('loadedmetadata', updateDuration);\n    audio.addEventListener('ended', () => setIsPlaying(false));\n\n    return () => {\n      audio.removeEventListener('timeupdate', updateTime);\n      audio.removeEventListener('loadedmetadata', updateDuration);\n      audio.removeEventListener('ended', () => setIsPlaying(false));\n    };\n  }, [recordingUrl]);\n\n  const loadRecording = async () => {\n    if (!call) return;\n\n    try {\n      setIsLoading(true);\n\n      // First check if we already have a recording URL from the call data\n      const existingUrl = call.recording_url || call.recordingUrl;\n      if (existingUrl && existingUrl !== '/api/recordings/undefined/stream') {\n        setRecordingUrl(existingUrl);\n        setIsLoading(false);\n        return;\n      }\n\n      // Use call_id if available, otherwise fall back to id\n      const callId = call.call_id || call.id;\n      if (!callId) {\n        console.error('No call ID available for recording fetch');\n        toast.error(\"Call ID not available\");\n        return;\n      }\n\n      console.log('Fetching recording from API for call ID:', callId);\n      // If no URL or it's a mock URL, fetch from the API\n      const recordingData = customGetRecording\n        ? await customGetRecording(callId)\n        : await getCallRecording(callId);\n      if (recordingData && recordingData.recordingUrl) {\n        setRecordingUrl(recordingData.recordingUrl);\n      } else {\n        toast.error(\"Recording not available for this call\");\n      }\n    } catch (error) {\n      console.error(\"Error loading recording:\", error);\n      toast.error(\"Failed to load recording\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadTranscript = async () => {\n    if (!call) return;\n\n    try {\n      console.log('Loading transcript for call:', call);\n      console.log('Call ID:', call.call_id, 'Call object ID:', call.id);\n\n      // First check if call already has transcript\n      if (call.transcript) {\n        console.log('Using existing transcript from call object');\n        setTranscript(call.transcript);\n        parseTranscriptToMessages(call.transcript);\n        return;\n      }\n\n      // Use call_id if available, otherwise fall back to id\n      const callId = call.call_id || call.id;\n      console.log('Available call IDs - call_id:', call.call_id, 'id:', call.id, 'final callId:', callId);\n\n      if (!callId) {\n        console.error('No call ID available for transcript fetch');\n        return;\n      }\n\n      console.log('Fetching transcript from API for call ID:', callId);\n      // If not, fetch from API\n      const transcriptData = customGetTranscript\n        ? await customGetTranscript(callId)\n        : await getCallTranscript(callId);\n      if (transcriptData && transcriptData.transcript) {\n        setTranscript(transcriptData.transcript);\n        parseTranscriptToMessages(transcriptData.transcript);\n      }\n    } catch (error) {\n      console.error(\"Error loading transcript:\", error);\n      // Don't show error for transcript as it's optional\n    }\n  };\n\n  // Parse transcript into WhatsApp-style messages\n  const parseTranscriptToMessages = (transcriptText: string) => {\n    if (!transcriptText) return;\n\n    // Split transcript by common patterns (Assistant:, Customer:, AI:, Human:, etc.)\n    const lines = transcriptText.split(/\\n+/);\n    const messages: Array<{\n      speaker: 'assistant' | 'customer';\n      message: string;\n      timestamp?: string;\n    }> = [];\n\n    let currentSpeaker: 'assistant' | 'customer' = 'assistant';\n    let currentMessage = '';\n\n    lines.forEach((line) => {\n      const trimmedLine = line.trim();\n      if (!trimmedLine) return;\n\n      // Check for speaker indicators\n      if (trimmedLine.match(/^(Assistant|AI|Bot|Agent):/i)) {\n        // Save previous message if exists\n        if (currentMessage) {\n          messages.push({\n            speaker: currentSpeaker,\n            message: currentMessage.trim()\n          });\n        }\n        currentSpeaker = 'assistant';\n        currentMessage = trimmedLine.replace(/^(Assistant|AI|Bot|Agent):\\s*/i, '');\n      } else if (trimmedLine.match(/^(Customer|Human|User|Caller):/i)) {\n        // Save previous message if exists\n        if (currentMessage) {\n          messages.push({\n            speaker: currentSpeaker,\n            message: currentMessage.trim()\n          });\n        }\n        currentSpeaker = 'customer';\n        currentMessage = trimmedLine.replace(/^(Customer|Human|User|Caller):\\s*/i, '');\n      } else {\n        // Continue current message\n        currentMessage += (currentMessage ? ' ' : '') + trimmedLine;\n      }\n    });\n\n    // Add final message\n    if (currentMessage) {\n      messages.push({\n        speaker: currentSpeaker,\n        message: currentMessage.trim()\n      });\n    }\n\n    // If no speaker patterns found, treat as single assistant message\n    if (messages.length === 0 && transcriptText.trim()) {\n      messages.push({\n        speaker: 'assistant',\n        message: transcriptText.trim()\n      });\n    }\n\n    setParsedMessages(messages);\n  };\n\n  const togglePlayPause = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleSeek = (value: number[]) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const newTime = value[0];\n    audio.currentTime = newTime;\n    setCurrentTime(newTime);\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const newVolume = value[0];\n    audio.volume = newVolume;\n    setVolume(newVolume);\n    setIsMuted(newVolume === 0);\n  };\n\n  const toggleMute = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    if (isMuted) {\n      audio.volume = volume;\n      setIsMuted(false);\n    } else {\n      audio.volume = 0;\n      setIsMuted(true);\n    }\n  };\n\n  const formatTime = (time: number) => {\n    if (isNaN(time)) return \"0:00\";\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleDownload = () => {\n    if (recordingUrl) {\n      const link = document.createElement('a');\n      link.href = recordingUrl;\n      link.download = `call-recording-${call?.call_id}.mp3`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handleSyncRecording = async () => {\n    if (!call) return;\n\n    try {\n      setIsSyncing(true);\n\n      // Use call_id if available, otherwise fall back to id\n      const callId = call.call_id || call.id;\n      if (!callId) {\n        console.error('No call ID available for recording sync');\n        toast.error(\"Call ID not available\");\n        return;\n      }\n\n      console.log('Syncing recording for call ID:', callId);\n      // Call the sync API endpoint\n      const response = await fetch(`/api/outboundcall/recording/${callId}/sync`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const data = await response.json();\n\n      if (data.success && data.data?.recordingUrl) {\n        setRecordingUrl(data.data.recordingUrl);\n        toast.success(\"Recording synced successfully!\");\n      } else {\n        toast.error(data.message || \"Recording not available from VAPI\");\n      }\n    } catch (error) {\n      console.error(\"Error syncing recording:\", error);\n      toast.error(\"Failed to sync recording\");\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  if (!call) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Play className=\"h-5 w-5\" />\n            Call Recording & Transcript\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"recording\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"recording\">Recording</TabsTrigger>\n            <TabsTrigger value=\"transcript\">Transcript</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"recording\" className=\"space-y-4 mt-4\">\n          {/* Call Info */}\n          <div className=\"text-sm text-gray-600\">\n            <p><strong>Date:</strong> {new Date(call.created_at).toLocaleString()}</p>\n            <p><strong>Duration:</strong> {formatTime(call.duration)}</p>\n            <p><strong>Status:</strong> {call.status}</p>\n          </div>\n\n          {/* Audio Player */}\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-sm text-gray-500\">Loading recording...</p>\n            </div>\n          ) : recordingUrl ? (\n            <>\n              <audio ref={audioRef} src={recordingUrl} preload=\"metadata\" />\n              \n              {/* Progress Bar */}\n              <div className=\"space-y-2\">\n                <Slider\n                  value={[currentTime]}\n                  max={duration || 100}\n                  step={1}\n                  onValueChange={handleSeek}\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-xs text-gray-500\">\n                  <span>{formatTime(currentTime)}</span>\n                  <span>{formatTime(duration)}</span>\n                </div>\n              </div>\n\n              {/* Controls */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={togglePlayPause}\n                    disabled={!recordingUrl}\n                  >\n                    {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                  </Button>\n\n                  <div className=\"flex items-center gap-1\">\n                    <Button variant=\"ghost\" size=\"sm\" onClick={toggleMute}>\n                      {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n                    </Button>\n                    <Slider\n                      value={[isMuted ? 0 : volume]}\n                      max={1}\n                      step={0.1}\n                      onValueChange={handleVolumeChange}\n                      className=\"w-16\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-1\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={handleDownload}>\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-sm text-gray-500 mb-4\">Recording not available</p>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleSyncRecording}\n                disabled={isSyncing}\n                className=\"flex items-center gap-2\"\n              >\n                <RefreshCw className={`h-4 w-4 ${isSyncing ? 'animate-spin' : ''}`} />\n                {isSyncing ? 'Syncing...' : 'Try to Sync Recording'}\n              </Button>\n            </div>\n          )}\n          </TabsContent>\n\n          <TabsContent value=\"transcript\" className=\"mt-4\">\n            <div className=\"h-96 overflow-y-auto\">\n              {parsedMessages.length > 0 ? (\n                <div className=\"space-y-3 p-4\">\n                  {parsedMessages.map((msg, index) => (\n                    <div\n                      key={index}\n                      className={`flex ${msg.speaker === 'assistant' ? 'justify-start' : 'justify-end'}`}\n                    >\n                      <div\n                        className={`max-w-[80%] rounded-lg px-3 py-2 ${\n                          msg.speaker === 'assistant'\n                            ? 'bg-gray-100 text-gray-800'\n                            : 'bg-blue-500 text-white'\n                        }`}\n                      >\n                        <div className=\"text-xs font-medium mb-1 opacity-70\">\n                          {msg.speaker === 'assistant' ? 'Assistant' : 'Customer'}\n                        </div>\n                        <div className=\"text-sm whitespace-pre-wrap\">\n                          {msg.message}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : transcript ? (\n                <div className=\"p-4\">\n                  <div className=\"bg-gray-100 rounded-lg p-3\">\n                    <div className=\"text-xs font-medium mb-2 text-gray-600\">Full Transcript</div>\n                    <div className=\"text-sm text-gray-800 whitespace-pre-wrap\">\n                      {transcript}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-full text-center p-8\">\n                  <FileText className=\"h-12 w-12 text-gray-300 mb-4\" />\n                  <p className=\"text-sm text-gray-500 mb-4\">No transcript available</p>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={loadTranscript}\n                    disabled={isSyncing}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <RefreshCw className={`h-4 w-4 ${isSyncing ? 'animate-spin' : ''}`} />\n                    {isSyncing ? 'Loading...' : 'Load Transcript'}\n                  </Button>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":["getContactCallHistory","phoneNumber","page","limit","encodedPhoneNumber","response","axiosInstance","error","message","_b","_a","toast","getCallRecording","callId","_c","getCallTranscript","formatDuration","seconds","minutes","remainingSeconds","formatCallStatus","status","formatCallCost","cost","hasRecording","call","recordingUrl","hasMockUrl","formatCallDate","dateString","date","getCampaignCallRecording","getCampaignCallTranscript","CallRecordingPlayer","isOpen","onClose","customGetRecording","customGetTranscript","isPlaying","setIsPlaying","useState","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","isMuted","setIsMuted","isLoading","setIsLoading","setRecordingUrl","transcript","setTranscript","isSyncing","setIsSyncing","parsedMessages","setParsedMessages","audioRef","useRef","useEffect","loadRecording","loadTranscript","audio","updateTime","updateDuration","existingUrl","recordingData","parseTranscriptToMessages","transcriptData","transcriptText","lines","messages","currentSpeaker","currentMessage","line","trimmedLine","togglePlayPause","handleSeek","value","newTime","handleVolumeChange","newVolume","toggleMute","formatTime","time","handleDownload","link","handleSyncRecording","data","jsx","Dialog","jsxs","DialogContent","DialogHeader","DialogTitle","Play","Tabs","TabsList","TabsTrigger","TabsContent","Fragment","Slider","Button","Pause","VolumeX","Volume2","Download","RefreshCw","msg","index","FileText"],"mappings":"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"}