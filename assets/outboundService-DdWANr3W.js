import{d as l,t as a}from"./index-YNP4OU4_.js";import"./ui-S570Xcny.js";import"./vendor-DG599jyl.js";import"./router-BavLd_S0.js";import"./query-Cab5P5bd.js";async function f(o){var s,e;try{const r=await l.post("/api/outboundcall/createCall",{id:o.assistantId,phoneNumber:o.phoneNumber,phoneNumberId:o.phoneNumberId,metadata:o.metadata,maxDurationSeconds:o.maxDurationSeconds,firstMessage:o.firstMessage,voicemailMessage:o.voicemailMessage});return a.success("Outbound call initiated successfully"),r.data}catch(r){console.error("Error creating outbound call:",r);const n=((e=(s=r.response)==null?void 0:s.data)==null?void 0:e.message)||"Failed to create outbound call";throw a.error(n),r}}async function w(o,s,e){try{return(await l.get("/api/outboundcall/getAllCalls",{params:{page:o,search:s,status:e}})).data}catch(r){throw console.error("Error fetching outbound calls:",r),a.error("Failed to fetch outbound calls"),r}}async function C(o){var s,e;try{const r=await l.post(`/api/outboundcall/endCall/${o}`);return a.success("Call ended successfully"),r.data}catch(r){console.error("Error ending outbound call:",r);const n=((e=(s=r.response)==null?void 0:s.data)==null?void 0:e.message)||"Failed to end call";throw a.error(n),r}}async function E(o,s){try{const e=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"control",control:"mute-assistant"})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return a.success("Assistant muted"),await e.json()}catch(e){throw console.error("Error muting call:",e),a.error("Failed to mute call"),e}}async function k(o,s){try{const e=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"control",control:"unmute-assistant"})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return a.success("Assistant unmuted"),await e.json()}catch(e){throw console.error("Error unmuting call:",e),a.error("Failed to unmute call"),e}}async function O(o,s){var e,r,n,c,i,u,d,p;try{console.log("ðŸ›‘ Ending call via backend API:",{callId:o,controlUrl:s});const t=await l.post(`/api/outboundcall/endCall/${o}`,{controlUrl:s});if(t.data.success)return t.data;throw new Error(t.data.message||"Failed to end call")}catch(t){throw console.error("Error ending call via control:",t),console.error("Error response data:",(e=t.response)==null?void 0:e.data),console.error("Error response status:",(r=t.response)==null?void 0:r.status),console.error("Error response headers:",(n=t.response)==null?void 0:n.headers),(c=t.response)!=null&&c.data&&(console.error("Detailed error breakdown:"),console.error("- success:",t.response.data.success),console.error("- message:",t.response.data.message),console.error("- message type:",typeof t.response.data.message),console.error("- message is array:",Array.isArray(t.response.data.message)),console.error("- error object:",t.response.data.error),console.error("- debug info:",t.response.data.debug)),((i=t.response)==null?void 0:i.status)===402||((u=t.response)==null?void 0:u.status)===401||((p=(d=t.response)==null?void 0:d.data)!=null&&p.message?Array.isArray(t.response.data.message)?t.response.data.message.join(", "):t.response.data.message:t.message&&t.message),t}}async function A(o){try{return(await l.get(`/api/outboundcall/transcript/${o}`)).data}catch(s){throw console.error("Error fetching call transcript:",s),a.error("Failed to fetch call transcript"),s}}async function F(o){var s,e;try{const r=await l.get(`/api/outboundcall/recording/${o}`,{responseType:"blob"}),n=window.URL.createObjectURL(new Blob([r.data])),c=document.createElement("a");return c.href=n,c.setAttribute("download",`call-recording-${o}.mp3`),document.body.appendChild(c),c.click(),c.remove(),window.URL.revokeObjectURL(n),a.success("Recording downloaded successfully"),r.data}catch(r){console.error("Error downloading call recording:",r);const n=((e=(s=r.response)==null?void 0:s.data)==null?void 0:e.message)||"Failed to download recording";throw a.error(n),r}}async function T(o,s){try{return(await l.get("/api/outboundcall/stats",{params:{dateFrom:o,dateTo:s}})).data}catch(e){throw console.error("Error fetching call stats:",e),a.error("Failed to fetch call statistics"),e}}async function j(o){var s,e;try{const r=await l.post("/api/outboundcall/createBulkCalls",o);return a.success(`${o.phoneNumbers.length} outbound calls initiated successfully`),r.data}catch(r){console.error("Error creating bulk outbound calls:",r);const n=((e=(s=r.response)==null?void 0:s.data)==null?void 0:e.message)||"Failed to create bulk outbound calls";throw a.error(n),r}}export{j as createBulkOutboundCalls,f as createOutboundCall,F as downloadCallRecording,O as endCallViaControl,C as endOutboundCall,w as getAllOutboundCalls,T as getCallStats,A as getCallTranscript,E as muteCall,k as unmuteCall};
//# sourceMappingURL=outboundService-DdWANr3W.js.map
