import{d as l,t as a}from"./index-glgaGrA-.js";import"./ui-BZ34e_bG.js";import"./vendor-DG599jyl.js";import"./router-BavLd_S0.js";import"./query-BwaCLewj.js";async function w(s){var o,e;try{const r=await l.post("/api/outboundcall/createCall",{id:s.assistantId,phoneNumber:s.phoneNumber,phoneNumberId:s.phoneNumberId,metadata:s.metadata,maxDurationSeconds:s.maxDurationSeconds,firstMessage:s.firstMessage,voicemailMessage:s.voicemailMessage});return a.success("Outbound call initiated successfully"),r.data}catch(r){console.error("Error creating outbound call:",r);const n=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to create outbound call";throw a.error(n),r}}async function C(s,o,e){try{return(await l.get("/api/outboundcall/getAllCalls",{params:{page:s,search:o,status:e}})).data}catch(r){throw console.error("Error fetching outbound calls:",r),a.error("Failed to fetch outbound calls"),r}}async function E(s){var o,e;try{const r=await l.post(`/api/outboundcall/endCall/${s}`);return a.success("Call ended successfully"),r.data}catch(r){console.error("Error ending outbound call:",r);const n=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to end call";throw a.error(n),r}}async function k(s,o){try{const e=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"control",control:"mute-assistant"})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return a.success("Assistant muted"),await e.json()}catch(e){throw console.error("Error muting call:",e),a.error("Failed to mute call"),e}}async function A(s,o){try{const e=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"control",control:"unmute-assistant"})});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return a.success("Assistant unmuted"),await e.json()}catch(e){throw console.error("Error unmuting call:",e),a.error("Failed to unmute call"),e}}async function F(s,o){var e,r,n,c,u,d,p,g;try{console.log("ðŸ›‘ Ending call via backend API:",{callId:s,controlUrl:o});const t=await l.post(`/api/outboundcall/endCall/${s}`,{controlUrl:o});if(t.data.success)return a.success("Call ended successfully"),t.data;throw new Error(t.data.message||"Failed to end call")}catch(t){console.error("Error ending call via control:",t),console.error("Error response data:",(e=t.response)==null?void 0:e.data),console.error("Error response status:",(r=t.response)==null?void 0:r.status),console.error("Error response headers:",(n=t.response)==null?void 0:n.headers),(c=t.response)!=null&&c.data&&(console.error("Detailed error breakdown:"),console.error("- success:",t.response.data.success),console.error("- message:",t.response.data.message),console.error("- message type:",typeof t.response.data.message),console.error("- message is array:",Array.isArray(t.response.data.message)),console.error("- error object:",t.response.data.error),console.error("- debug info:",t.response.data.debug));let i="Failed to end call";throw((u=t.response)==null?void 0:u.status)===402?i="Insufficient credits to end call. Please purchase credits.":((d=t.response)==null?void 0:d.status)===401?i="Authentication required. Please log in again.":(g=(p=t.response)==null?void 0:p.data)!=null&&g.message?Array.isArray(t.response.data.message)?i=t.response.data.message.join(", "):i=t.response.data.message:t.message&&(i=t.message),a.error(i),t}}async function O(s){try{return(await l.get(`/api/outboundcall/transcript/${s}`)).data}catch(o){throw console.error("Error fetching call transcript:",o),a.error("Failed to fetch call transcript"),o}}async function T(s){var o,e;try{const r=await l.get(`/api/outboundcall/recording/${s}`,{responseType:"blob"}),n=window.URL.createObjectURL(new Blob([r.data])),c=document.createElement("a");return c.href=n,c.setAttribute("download",`call-recording-${s}.mp3`),document.body.appendChild(c),c.click(),c.remove(),window.URL.revokeObjectURL(n),a.success("Recording downloaded successfully"),r.data}catch(r){console.error("Error downloading call recording:",r);const n=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to download recording";throw a.error(n),r}}async function j(s,o){try{return(await l.get("/api/outboundcall/stats",{params:{dateFrom:s,dateTo:o}})).data}catch(e){throw console.error("Error fetching call stats:",e),a.error("Failed to fetch call statistics"),e}}async function $(s){var o,e;try{const r=await l.post("/api/outboundcall/createBulkCalls",s);return a.success(`${s.phoneNumbers.length} outbound calls initiated successfully`),r.data}catch(r){console.error("Error creating bulk outbound calls:",r);const n=((e=(o=r.response)==null?void 0:o.data)==null?void 0:e.message)||"Failed to create bulk outbound calls";throw a.error(n),r}}export{$ as createBulkOutboundCalls,w as createOutboundCall,T as downloadCallRecording,F as endCallViaControl,E as endOutboundCall,C as getAllOutboundCalls,j as getCallStats,O as getCallTranscript,k as muteCall,A as unmuteCall};
//# sourceMappingURL=outboundService-gysI6ehK.js.map
