{"version":3,"file":"Dashboard-ByAm6rKB.js","sources":["../../src/api/services/dashboard/dashboardService.ts","../../src/components/dashboard/ModernChartTooltip.tsx","../../src/components/dashboard/ModernBarChart.tsx","../../src/components/dashboard/ModernLineChart.tsx","../../src/components/dashboard/ModernPieChart.tsx","../../src/components/dashboard/ModernProgressBar.tsx","../../src/components/dashboard/ModernStatCard.tsx","../../src/components/dashboard/ModernInsightCard.tsx","../../src/components/dashboard/DashboardSkeleton.tsx","../../src/pages/dashboard/Dashboard.tsx"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface DashboardSummary {\n  totalAgents: number;\n  totalCalls: number;\n  totalPhoneNumbers: number;\n  avgCallDuration: number;\n  successRate: string;\n}\n\nexport interface DashboardDataSection {\n  success: boolean;\n  data: any;\n  error: string | null;\n}\n\nexport interface DashboardData {\n  agents: DashboardDataSection;\n  calls: DashboardDataSection;\n  phoneNumbers: DashboardDataSection;\n  modelStats: DashboardDataSection;\n  voiceStats: DashboardDataSection;\n  summary: DashboardSummary;\n}\n\nexport interface DashboardResponse {\n  success: boolean;\n  message: string;\n  data: DashboardData;\n  cached: boolean;\n}\n\n// Get comprehensive dashboard data in a single API call\nexport async function getDashboardData(): Promise<DashboardResponse> {\n  try {\n    console.log(\"🔄 Fetching dashboard data...\");\n    const startTime = Date.now();\n    \n    const res = await axiosInstance.get(\"/api/dashboard/data\");\n    \n    const endTime = Date.now();\n    const duration = endTime - startTime;\n    \n    console.log(`✅ Dashboard data fetched in ${duration}ms`, res.data.cached ? \"(cached)\" : \"(fresh)\");\n    \n    return res.data;\n  } catch (error: any) {\n    console.error(\"❌ Error fetching dashboard data:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch dashboard data\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Clear dashboard cache\nexport async function clearDashboardCache() {\n  try {\n    const res = await axiosInstance.post(\"/api/dashboard/cache/clear\");\n    toast.success(\"Dashboard cache cleared successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error clearing dashboard cache:\", error);\n    const message = error.response?.data?.message || \"Failed to clear dashboard cache\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Helper function to get agents data from dashboard response\nexport function getAgentsFromDashboard(dashboardData: DashboardData) {\n  if (dashboardData.agents.success) {\n    return {\n      data: {\n        assistants: dashboardData.agents.data.assistants || [],\n        totalAssistant: dashboardData.agents.data.total || 0\n      }\n    };\n  }\n  return { data: { assistants: [], totalAssistant: 0 } };\n}\n\n// Helper function to get calls data from dashboard response\nexport function getCallsFromDashboard(dashboardData: DashboardData) {\n  if (dashboardData.calls.success) {\n    return {\n      data: dashboardData.calls.data.calls || [],\n      length: dashboardData.calls.data.length || 0\n    };\n  }\n  return { data: [], length: 0 };\n}\n\n// Helper function to get call stats from dashboard response\nexport function getCallStatsFromDashboard(dashboardData: DashboardData) {\n  if (dashboardData.calls.success) {\n    return {\n      data: {\n        totalCalls: dashboardData.calls.data.totalCalls || 0,\n        successfulCalls: dashboardData.calls.data.successfulCalls || 0,\n        averageDuration: dashboardData.calls.data.averageDuration || 0\n      }\n    };\n  }\n  return { data: { totalCalls: 0, successfulCalls: 0, averageDuration: 0 } };\n}\n\n// Helper function to get model stats from dashboard response\nexport function getModelStatsFromDashboard(dashboardData: DashboardData) {\n  if (dashboardData.modelStats.success) {\n    return { data: dashboardData.modelStats.data };\n  }\n  return { data: null };\n}\n\n// Helper function to get voice stats from dashboard response\nexport function getVoiceStatsFromDashboard(dashboardData: DashboardData) {\n  if (dashboardData.voiceStats.success) {\n    return { data: dashboardData.voiceStats.data };\n  }\n  return { data: null };\n}\n\n// Helper function to get phone numbers from dashboard response\nexport function getPhoneNumbersFromDashboard(dashboardData: DashboardData) {\n  if (dashboardData.phoneNumbers.success) {\n    return { data: dashboardData.phoneNumbers.data || [] };\n  }\n  return { data: [] };\n}\n\n// Get comprehensive dashboard analytics\nexport async function getDashboardAnalytics(timeRange: string = \"7d\") {\n  try {\n    console.log(\"📊 Fetching dashboard analytics...\");\n    const startTime = Date.now();\n\n    const res = await axiosInstance.get(\"/api/analytics/dashboard\", {\n      params: { timeRange }\n    });\n\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n\n    console.log(`✅ Dashboard analytics fetched in ${duration}ms`);\n\n    return res.data;\n  } catch (error: any) {\n    console.error(\"❌ Error fetching dashboard analytics:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch dashboard analytics\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get real-time dashboard metrics\nexport async function getRealTimeDashboardMetrics() {\n  try {\n    const res = await axiosInstance.get(\"/api/analytics/dashboard/realtime\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"❌ Error fetching real-time metrics:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch real-time metrics\";\n    toast.error(message);\n    throw error;\n  }\n}\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface ModernChartTooltipProps {\n  active?: boolean;\n  payload?: any[];\n  label?: string;\n  labelFormatter?: (label: string) => React.ReactNode;\n  contentStyle?: React.CSSProperties;\n  itemStyle?: React.CSSProperties;\n  formatter?: (value: number, name: string, props: any) => React.ReactNode;\n  wrapperClassName?: string;\n}\n\nconst ModernChartTooltip: React.FC<ModernChartTooltipProps> = ({\n  active,\n  payload,\n  label,\n  labelFormatter,\n  contentStyle,\n  itemStyle,\n  formatter,\n  wrapperClassName,\n}) => {\n  if (!active || !payload || payload.length === 0) {\n    return null;\n  }\n\n  const formattedLabel = labelFormatter ? labelFormatter(label || '') : label;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={`bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm p-3 rounded-lg shadow-lg border border-gray-100 dark:border-gray-700 ${wrapperClassName || ''}`}\n      style={{\n        ...contentStyle,\n        minWidth: '150px',\n      }}\n      role=\"tooltip\"\n      aria-live=\"polite\"\n    >\n      {formattedLabel && (\n        <div className=\"font-medium text-sm mb-1 text-gray-700 dark:text-gray-300 border-b border-gray-100 dark:border-gray-700 pb-1\">\n          {formattedLabel}\n        </div>\n      )}\n      <div className=\"space-y-1\">\n        {payload.map((entry, index) => {\n          const value = formatter\n            ? formatter(entry.value, entry.name, entry)\n            : entry.value;\n          \n          return (\n            <div\n              key={`tooltip-item-${index}`}\n              className=\"flex items-center justify-between text-sm\"\n              style={itemStyle}\n            >\n              <div className=\"flex items-center\">\n                <div\n                  className=\"h-2.5 w-2.5 rounded-full mr-2\"\n                  style={{ backgroundColor: entry.color }}\n                  aria-hidden=\"true\"\n                ></div>\n                <span className=\"text-gray-600 dark:text-gray-400\">\n                  {entry.name}:\n                </span>\n              </div>\n              <span className=\"font-medium text-gray-800 dark:text-gray-200 ml-2\">\n                {value}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ModernChartTooltip;\n","import React from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  TooltipProps,\n} from 'recharts';\nimport { motion } from 'framer-motion';\nimport ModernChartTooltip from './ModernChartTooltip';\n\ninterface ModernBarChartProps {\n  data: any[];\n  dataKeys: {\n    key: string;\n    name: string;\n    color: string;\n  }[];\n  xAxisDataKey: string;\n  height?: number;\n  showGrid?: boolean;\n  showLegend?: boolean;\n  barSize?: number;\n  barGap?: number;\n  barCategoryGap?: number | string;\n  barRadius?: number | [number, number, number, number];\n  className?: string;\n  tooltipFormatter?: (value: number, name: string, props: any) => React.ReactNode;\n  tooltipLabelFormatter?: (label: string) => React.ReactNode;\n  animationDuration?: number;\n}\n\nconst ModernBarChart: React.FC<ModernBarChartProps> = ({\n  data,\n  dataKeys,\n  xAxisDataKey,\n  height = 300,\n  showGrid = true,\n  showLegend = true,\n  barSize,\n  barGap,\n  barCategoryGap,\n  barRadius = [4, 4, 0, 0] as [number, number, number, number],\n  className = '',\n  tooltipFormatter,\n  tooltipLabelFormatter,\n  animationDuration = 1000,\n}) => {\n  const renderTooltip = (props: TooltipProps<any, any>) => (\n    <ModernChartTooltip\n      {...props}\n      formatter={tooltipFormatter}\n      labelFormatter={tooltipLabelFormatter}\n    />\n  );\n\n  return (\n    <div className={`w-full h-[${height}px] ${className}`}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart\n          data={data}\n          barSize={barSize}\n          barGap={barGap}\n          barCategoryGap={barCategoryGap}\n          margin={{ top: 10, right: 10, left: 0, bottom: 5 }}\n        >\n          {showGrid && (\n            <CartesianGrid\n              strokeDasharray=\"3 3\"\n              stroke=\"rgba(0,0,0,0.05)\"\n              vertical={false}\n            />\n          )}\n          <XAxis\n            dataKey={xAxisDataKey}\n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n            dy={10}\n          />\n          <YAxis\n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n            dx={-10}\n          />\n          <Tooltip content={renderTooltip} />\n          {showLegend && (\n            <Legend\n              wrapperStyle={{ paddingTop: 15 }}\n              iconType=\"circle\"\n              iconSize={8}\n            />\n          )}\n          {dataKeys.map((dataKey, index) => (\n            <Bar\n              key={dataKey.key}\n              dataKey={dataKey.key}\n              name={dataKey.name}\n              fill={dataKey.color}\n              radius={barRadius}\n              isAnimationActive={true}\n              animationDuration={animationDuration}\n              animationBegin={index * 150}\n              animationEasing=\"ease-out\"\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default ModernBarChart;\n","import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  TooltipProps,\n} from 'recharts';\nimport ModernChartTooltip from './ModernChartTooltip';\n\ninterface ModernLineChartProps {\n  data: any[];\n  dataKeys: {\n    key: string;\n    name: string;\n    color: string;\n    strokeWidth?: number;\n    dotRadius?: number;\n    activeDotRadius?: number;\n  }[];\n  xAxisDataKey: string;\n  height?: number;\n  showGrid?: boolean;\n  showLegend?: boolean;\n  className?: string;\n  tooltipFormatter?: (value: number, name: string, props: any) => React.ReactNode;\n  tooltipLabelFormatter?: (label: string) => React.ReactNode;\n  animationDuration?: number;\n}\n\nconst ModernLineChart: React.FC<ModernLineChartProps> = ({\n  data,\n  dataKeys,\n  xAxisDataKey,\n  height = 300,\n  showGrid = true,\n  showLegend = true,\n  className = '',\n  tooltipFormatter,\n  tooltipLabelFormatter,\n  animationDuration = 1500,\n}) => {\n  const renderTooltip = (props: TooltipProps<any, any>) => (\n    <ModernChartTooltip\n      {...props}\n      formatter={tooltipFormatter}\n      labelFormatter={tooltipLabelFormatter}\n    />\n  );\n\n  return (\n    <div className={`w-full h-[${height}px] ${className}`}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart\n          data={data}\n          margin={{ top: 10, right: 10, left: 0, bottom: 5 }}\n        >\n          {showGrid && (\n            <CartesianGrid\n              strokeDasharray=\"3 3\"\n              stroke=\"rgba(0,0,0,0.05)\"\n              vertical={false}\n            />\n          )}\n          <XAxis\n            dataKey={xAxisDataKey}\n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n            dy={10}\n          />\n          <YAxis\n            axisLine={false}\n            tickLine={false}\n            tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }}\n            dx={-10}\n          />\n          <Tooltip content={renderTooltip} />\n          {showLegend && (\n            <Legend\n              wrapperStyle={{ paddingTop: 15 }}\n              iconType=\"circle\"\n              iconSize={8}\n            />\n          )}\n          {dataKeys.map((dataKey, index) => (\n            <Line\n              key={dataKey.key}\n              type=\"monotone\"\n              dataKey={dataKey.key}\n              name={dataKey.name}\n              stroke={dataKey.color}\n              strokeWidth={dataKey.strokeWidth || 2}\n              dot={{\n                stroke: dataKey.color,\n                strokeWidth: 2,\n                r: dataKey.dotRadius || 4,\n                fill: 'white',\n              }}\n              activeDot={{\n                r: dataKey.activeDotRadius || 6,\n                stroke: dataKey.color,\n                strokeWidth: 2,\n                fill: 'white',\n              }}\n              isAnimationActive={true}\n              animationDuration={animationDuration}\n              animationBegin={index * 150}\n              animationEasing=\"ease-out\"\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default ModernLineChart;\n","import React from 'react';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  TooltipProps,\n} from 'recharts';\nimport ModernChartTooltip from './ModernChartTooltip';\n\ninterface ModernPieChartProps {\n  data: any[];\n  dataKey: string;\n  nameKey: string;\n  colors: string[];\n  height?: number;\n  showLegend?: boolean;\n  innerRadius?: number;\n  outerRadius?: number;\n  className?: string;\n  tooltipFormatter?: (value: number, name: string, props: any) => React.ReactNode;\n  tooltipLabelFormatter?: (label: string) => React.ReactNode;\n  animationDuration?: number;\n  labelLine?: boolean;\n  label?: boolean | React.ReactNode | ((props: any) => React.ReactNode) | null;\n}\n\nconst ModernPieChart: React.FC<ModernPieChartProps> = ({\n  data,\n  dataKey,\n  nameKey,\n  colors,\n  height = 300,\n  showLegend = true,\n  innerRadius = 0,\n  outerRadius = 80,\n  className = '',\n  tooltipFormatter,\n  tooltipLabelFormatter,\n  animationDuration = 1000,\n  labelLine = false,\n  label,\n}) => {\n  const renderTooltip = (props: TooltipProps<any, any>) => (\n    <ModernChartTooltip\n      {...props}\n      formatter={tooltipFormatter}\n      labelFormatter={tooltipLabelFormatter}\n    />\n  );\n\n  const defaultLabel = ({ name, percent }: { name: string; percent: number }) => \n    `${name}: ${(percent * 100).toFixed(0)}%`;\n\n  const renderLabel = label === true ? defaultLabel : (label === false ? undefined : (label || undefined));\n\n  return (\n    <div className={`w-full h-[${height}px] ${className}`}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={labelLine}\n            label={renderLabel as any}\n            outerRadius={outerRadius}\n            innerRadius={innerRadius}\n            fill=\"#8884d8\"\n            dataKey={dataKey}\n            nameKey={nameKey}\n            isAnimationActive={true}\n            animationDuration={animationDuration}\n            animationBegin={0}\n            animationEasing=\"ease-out\"\n          >\n            {data.map((entry, index) => (\n              <Cell \n                key={`cell-${index}`} \n                fill={colors[index % colors.length]} \n                stroke=\"none\"\n              />\n            ))}\n          </Pie>\n          <Tooltip content={renderTooltip} />\n          {showLegend && (\n            <Legend\n              layout=\"horizontal\"\n              verticalAlign=\"bottom\"\n              align=\"center\"\n              wrapperStyle={{ paddingTop: 20 }}\n              iconType=\"circle\"\n              iconSize={8}\n            />\n          )}\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default ModernPieChart;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface ModernProgressBarProps {\n  label: string;\n  value: number;\n  maxValue?: number;\n  status?: 'success' | 'warning' | 'error' | 'info';\n  statusText?: string;\n  showPercentage?: boolean;\n  height?: number;\n  className?: string;\n  animationDuration?: number;\n}\n\nconst ModernProgressBar: React.FC<ModernProgressBarProps> = ({\n  label,\n  value,\n  maxValue = 100,\n  status = 'success',\n  statusText,\n  showPercentage = false,\n  height = 8,\n  className = '',\n  animationDuration = 1000,\n}) => {\n  const percentage = Math.min(100, Math.max(0, (value / maxValue) * 100));\n  \n  const statusColors = {\n    success: {\n      text: 'text-green-600',\n      bg: 'bg-gradient-to-r from-primary to-primary/80',\n    },\n    warning: {\n      text: 'text-yellow-600',\n      bg: 'bg-gradient-to-r from-yellow-500 to-yellow-400',\n    },\n    error: {\n      text: 'text-red-600',\n      bg: 'bg-gradient-to-r from-red-500 to-red-400',\n    },\n    info: {\n      text: 'text-blue-600',\n      bg: 'bg-gradient-to-r from-blue-500 to-blue-400',\n    },\n  };\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <div className=\"flex justify-between items-center\">\n        <span className=\"text-sm font-medium jakarta\">{label}</span>\n        <span className={`text-sm font-medium jakarta ${statusColors[status].text}`}>\n          {statusText || (showPercentage ? `${percentage.toFixed(1)}%` : value.toString())}\n        </span>\n      </div>\n      <div \n        className=\"w-full bg-secondary rounded-full overflow-hidden\"\n        style={{ height: `${height}px` }}\n        role=\"progressbar\"\n        aria-valuenow={percentage}\n        aria-valuemin={0}\n        aria-valuemax={100}\n        aria-label={`${label}: ${percentage}%`}\n      >\n        <motion.div\n          className={`h-full rounded-full ${statusColors[status].bg}`}\n          initial={{ width: 0 }}\n          animate={{ width: `${percentage}%` }}\n          transition={{ \n            duration: animationDuration / 1000, \n            ease: \"easeOut\" \n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ModernProgressBar;\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { LucideIcon } from 'lucide-react';\n\ninterface ModernStatCardProps {\n  title: string;\n  value: string | number;\n  icon: React.ReactNode;\n  trend?: {\n    value: string | number;\n    direction: 'up' | 'down' | 'neutral';\n    label: string;\n  };\n  iconColor?: string;\n  iconBgColor?: string;\n  className?: string;\n  animationDelay?: number;\n}\n\nconst ModernStatCard: React.FC<ModernStatCardProps> = ({\n  title,\n  value,\n  icon,\n  trend,\n  iconColor = 'text-primary',\n  iconBgColor = 'bg-gradient-to-br from-primary/20 to-primary/10',\n  className = '',\n  animationDelay = 0,\n}) => {\n  const trendColors = {\n    up: 'text-green-500',\n    down: 'text-red-500',\n    neutral: 'text-gray-500',\n  };\n\n  return (\n    <motion.div\n      className={`card overflow-hidden ${className}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ \n        duration: 0.4, \n        delay: animationDelay / 1000,\n        ease: \"easeOut\" \n      }}\n    >\n      <div className=\"p-6\">\n        <div className=\"flex justify-between items-start\">\n          <motion.div\n            initial={{ opacity: 0, x: -10 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ \n              duration: 0.3, \n              delay: (animationDelay + 200) / 1000,\n              ease: \"easeOut\" \n            }}\n          >\n            <p className=\"text-sm font-medium text-muted-foreground\">\n              {title}\n            </p>\n            <motion.h3 \n              className=\"text-2xl font-bold mt-1 jakarta\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ \n                duration: 0.4, \n                delay: (animationDelay + 300) / 1000,\n                ease: \"easeOut\" \n              }}\n            >\n              {value}\n            </motion.h3>\n            {trend && (\n              <motion.p \n                className={`text-xs flex items-center mt-1 ${trendColors[trend.direction]}`}\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ \n                  duration: 0.3, \n                  delay: (animationDelay + 400) / 1000,\n                  ease: \"easeOut\" \n                }}\n              >\n                {trend.direction === 'up' && (\n                  <svg className=\"h-3 w-3 mr-1\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M7 17L17 7M17 7H7M17 7V17\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                  </svg>\n                )}\n                {trend.direction === 'down' && (\n                  <svg className=\"h-3 w-3 mr-1\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M7 7L17 17M17 17H7M17 17V7\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                  </svg>\n                )}\n                {trend.value} {trend.label}\n              </motion.p>\n            )}\n          </motion.div>\n          <motion.div \n            className={`${iconBgColor} p-3 rounded-full shadow-sm`}\n            initial={{ opacity: 0, scale: 0.5 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ \n              duration: 0.4, \n              delay: (animationDelay + 200) / 1000,\n              type: \"spring\",\n              stiffness: 200,\n              damping: 15\n            }}\n          >\n            <div className={`${iconColor}`}>\n              {icon}\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ModernStatCard;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface ModernInsightCardProps {\n  title: string;\n  value: string | number;\n  icon: React.ReactNode;\n  iconColor?: string;\n  iconBgColor?: string;\n  className?: string;\n  animationDelay?: number;\n}\n\nconst ModernInsightCard: React.FC<ModernInsightCardProps> = ({\n  title,\n  value,\n  icon,\n  iconColor = 'text-primary',\n  iconBgColor = 'bg-gradient-to-br from-primary/20 to-primary/10',\n  className = '',\n  animationDelay = 0,\n}) => {\n  return (\n    <motion.div\n      className={`flex items-center justify-between p-5 bg-gradient-to-br from-secondary/50 to-secondary/30 rounded-xl border border-border/30 ${className}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ \n        duration: 0.4, \n        delay: animationDelay / 1000,\n        ease: \"easeOut\" \n      }}\n      whileHover={{ \n        y: -5,\n        boxShadow: \"0 10px 30px -15px rgba(0, 0, 0, 0.1)\",\n        transition: { duration: 0.3 }\n      }}\n    >\n      <motion.div\n        initial={{ opacity: 0, x: -10 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ \n          duration: 0.3, \n          delay: (animationDelay + 200) / 1000,\n          ease: \"easeOut\" \n        }}\n      >\n        <p className=\"text-sm font-medium text-muted-foreground\">\n          {title}\n        </p>\n        <motion.p \n          className=\"text-2xl font-bold jakarta mt-1\"\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ \n            duration: 0.4, \n            delay: (animationDelay + 300) / 1000,\n            ease: \"easeOut\" \n          }}\n        >\n          {value}\n        </motion.p>\n      </motion.div>\n      <motion.div \n        className={`h-14 w-14 ${iconBgColor} rounded-full flex items-center justify-center shadow-sm`}\n        initial={{ opacity: 0, scale: 0.5, rotate: -10 }}\n        animate={{ opacity: 1, scale: 1, rotate: 0 }}\n        transition={{ \n          duration: 0.5, \n          delay: (animationDelay + 200) / 1000,\n          type: \"spring\",\n          stiffness: 200,\n          damping: 15\n        }}\n      >\n        <div className={`${iconColor}`}>\n          {icon}\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default ModernInsightCard;\n","import React from 'react';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Skeleton for stat cards\nexport const StatCardSkeleton = () => (\n  <Card className=\"card\">\n    <CardContent className=\"p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-20\" />\n          <Skeleton className=\"h-8 w-16\" />\n          <Skeleton className=\"h-3 w-24\" />\n        </div>\n        <Skeleton className=\"h-10 w-10 rounded-lg\" />\n      </div>\n    </CardContent>\n  </Card>\n);\n\n// Skeleton for chart cards\nexport const ChartCardSkeleton = ({ height = 300 }: { height?: number }) => (\n  <Card className=\"card overflow-hidden\">\n    <CardHeader className=\"border-b border-border/50\">\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-5 w-32\" />\n        <Skeleton className=\"h-4 w-48\" />\n      </div>\n    </CardHeader>\n    <CardContent className=\"pt-6\">\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-end\" style={{ height: height - 100 }}>\n          {[1, 2, 3, 4, 5, 6, 7].map((i) => (\n            <Skeleton \n              key={i} \n              className=\"w-8\" \n              style={{ height: `${Math.random() * 60 + 20}%` }}\n            />\n          ))}\n        </div>\n        <div className=\"flex justify-between\">\n          {[1, 2, 3, 4, 5, 6, 7].map((i) => (\n            <Skeleton key={i} className=\"h-3 w-8\" />\n          ))}\n        </div>\n      </div>\n    </CardContent>\n  </Card>\n);\n\n// Skeleton for progress bars\nexport const ProgressBarSkeleton = () => (\n  <div className=\"space-y-2\">\n    <div className=\"flex justify-between items-center\">\n      <Skeleton className=\"h-4 w-32\" />\n      <Skeleton className=\"h-4 w-16\" />\n    </div>\n    <Skeleton className=\"h-2 w-full rounded-full\" />\n  </div>\n);\n\n// Skeleton for insight cards\nexport const InsightCardSkeleton = () => (\n  <div className=\"flex items-center space-x-4 p-4 rounded-lg border\">\n    <Skeleton className=\"h-12 w-12 rounded-lg\" />\n    <div className=\"space-y-2 flex-1\">\n      <Skeleton className=\"h-4 w-24\" />\n      <Skeleton className=\"h-6 w-16\" />\n    </div>\n  </div>\n);\n\n// Complete dashboard skeleton\nexport const DashboardSkeleton = () => (\n  <div className=\"p-6 space-y-6\">\n    {/* Key Metrics Skeleton */}\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {[1, 2, 3, 4].map((i) => (\n        <StatCardSkeleton key={i} />\n      ))}\n    </div>\n\n    {/* Charts Row 1 Skeleton */}\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <ChartCardSkeleton height={300} />\n      <ChartCardSkeleton height={300} />\n    </div>\n\n    {/* Charts Row 2 Skeleton */}\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <ChartCardSkeleton height={350} />\n      <ChartCardSkeleton height={350} />\n    </div>\n\n    {/* Performance Metrics Skeleton */}\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <Card className=\"card overflow-hidden\">\n        <CardHeader className=\"border-b border-border/50\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-5 w-40\" />\n            <Skeleton className=\"h-4 w-56\" />\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-5\">\n            {[1, 2, 3, 4].map((i) => (\n              <ProgressBarSkeleton key={i} />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"card overflow-hidden\">\n        <CardHeader className=\"border-b border-border/50\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-5 w-36\" />\n            <Skeleton className=\"h-4 w-52\" />\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <InsightCardSkeleton key={i} />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  </div>\n);\n\n// Progressive loading component\nexport const ProgressiveLoader = ({ \n  stage, \n  stages = [\n    \"Connecting to services...\",\n    \"Fetching agents data...\",\n    \"Loading call statistics...\",\n    \"Retrieving phone numbers...\",\n    \"Calculating analytics...\",\n    \"Finalizing dashboard...\"\n  ]\n}: { \n  stage: number; \n  stages?: string[] \n}) => (\n  <div className=\"p-6\">\n    <Card className=\"card\">\n      <CardContent className=\"p-8 text-center\">\n        <div className=\"space-y-6\">\n          <div className=\"mx-auto w-16 h-16 relative\">\n            <div className=\"absolute inset-0 rounded-full border-4 border-muted\"></div>\n            <div \n              className=\"absolute inset-0 rounded-full border-4 border-primary border-t-transparent animate-spin\"\n              style={{\n                animationDuration: '1s'\n              }}\n            ></div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <h3 className=\"text-lg font-semibold\">Loading Dashboard</h3>\n            <p className=\"text-muted-foreground\">\n              {stages[Math.min(stage, stages.length - 1)]}\n            </p>\n            \n            {/* Progress bar */}\n            <div className=\"w-full bg-muted rounded-full h-2 max-w-xs mx-auto\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-500 ease-out\"\n                style={{ \n                  width: `${Math.min((stage + 1) / stages.length * 100, 100)}%` \n                }}\n              ></div>\n            </div>\n            \n            <p className=\"text-sm text-muted-foreground\">\n              Step {Math.min(stage + 1, stages.length)} of {stages.length}\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  </div>\n);\n\nexport default DashboardSkeleton;\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport Page from \"@/components/Page\";\r\nimport Header from \"@/components/Header\";\r\nimport ErrorBoundary from \"@/components/ErrorBoundary\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  PhoneCall,\r\n  Clock,\r\n  Users,\r\n  Activity,\r\n  CheckCircle,\r\n  XCircle,\r\n  AlertCircle,\r\n  Mic,\r\n  Loader2,\r\n  RefreshCw,\r\n} from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\n// Import API services\r\nimport {\r\n  getDashboardData,\r\n  clearDashboardCache,\r\n  getAgentsFromDashboard,\r\n  getCallsFromDashboard,\r\n  getCallStatsFromDashboard,\r\n  getModelStatsFromDashboard,\r\n  getVoiceStatsFromDashboard,\r\n  getPhoneNumbersFromDashboard\r\n} from \"@/api/services/dashboard/dashboardService\";\r\nimport { useAuth } from \"@/context/AuthContext\";\r\n\r\n// Modern chart components\r\nimport ModernBarChart from \"@/components/dashboard/ModernBarChart\";\r\nimport ModernLineChart from \"@/components/dashboard/ModernLineChart\";\r\nimport ModernPieChart from \"@/components/dashboard/ModernPieChart\";\r\nimport ModernProgressBar from \"@/components/dashboard/ModernProgressBar\";\r\nimport ModernStatCard from \"@/components/dashboard/ModernStatCard\";\r\nimport ModernInsightCard from \"@/components/dashboard/ModernInsightCard\";\r\nimport { DashboardSkeleton, ProgressiveLoader } from \"@/components/dashboard/DashboardSkeleton\";\r\n\r\n// Dynamic dashboard data will be generated from API response inside the component\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useAuth();\r\n  const [loadingStage, setLoadingStage] = useState(0);\r\n\r\n  // Single optimized API call for all dashboard data\r\n  const { data: dashboardResponse, isLoading, error, refetch } = useQuery({\r\n    queryKey: [\"dashboard\", \"comprehensive\", user?.id],\r\n    queryFn: async () => {\r\n      setLoadingStage(0);\r\n      const result = await getDashboardData();\r\n      setLoadingStage(5); // Final stage\r\n      return result;\r\n    },\r\n    retry: 2,\r\n    enabled: !!user?.id,\r\n    staleTime: 2 * 60 * 1000, // 2 minutes\r\n    gcTime: 5 * 60 * 1000, // 5 minutes\r\n    placeholderData: (previousData) => previousData,\r\n  });\r\n\r\n  // Simulate progressive loading stages\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      const stages = [0, 1, 2, 3, 4];\r\n      let currentStage = 0;\r\n\r\n      const interval = setInterval(() => {\r\n        if (currentStage < stages.length - 1) {\r\n          currentStage++;\r\n          setLoadingStage(currentStage);\r\n        } else {\r\n          clearInterval(interval);\r\n        }\r\n      }, 500); // Update stage every 500ms\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isLoading]);\r\n\r\n  // Extract data from the comprehensive response\r\n  const dashboardData = dashboardResponse?.data;\r\n  const agentsData = dashboardData ? getAgentsFromDashboard(dashboardData) : null;\r\n  const callsData = dashboardData ? getCallsFromDashboard(dashboardData) : null;\r\n  const callStatsData = dashboardData ? getCallStatsFromDashboard(dashboardData) : null;\r\n  const modelStatsData = dashboardData ? getModelStatsFromDashboard(dashboardData) : null;\r\n  const voiceStatsData = dashboardData ? getVoiceStatsFromDashboard(dashboardData) : null;\r\n  const phoneNumbersData = dashboardData ? getPhoneNumbersFromDashboard(dashboardData) : null;\r\n\r\n  // Create dynamic chart data from API response\r\n  const callVolumeData = useMemo(() => {\r\n    if (callsData?.data && Array.isArray(callsData.data)) {\r\n      // Group calls by day of week\r\n      const callsByDay = callsData.data.reduce((acc: any, call: any) => {\r\n        const date = new Date(call.createdAt || call.startedAt || Date.now());\r\n        const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\r\n        acc[dayName] = (acc[dayName] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => ({\r\n        name: day,\r\n        calls: callsByDay[day] || 0\r\n      }));\r\n    }\r\n    // Fallback to mock data if no real data\r\n    return [\r\n      { name: \"Mon\", calls: 120 },\r\n      { name: \"Tue\", calls: 145 },\r\n      { name: \"Wed\", calls: 160 },\r\n      { name: \"Thu\", calls: 170 },\r\n      { name: \"Fri\", calls: 190 },\r\n      { name: \"Sat\", calls: 80 },\r\n      { name: \"Sun\", calls: 60 },\r\n    ];\r\n  }, [callsData]);\r\n\r\n  const callDurationData = useMemo(() => {\r\n    if (callsData?.data && Array.isArray(callsData.data)) {\r\n      // Group calls by day and calculate average duration\r\n      const durationsByDay = callsData.data.reduce((acc: any, call: any) => {\r\n        const date = new Date(call.createdAt || call.startedAt || Date.now());\r\n        const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\r\n        if (!acc[dayName]) acc[dayName] = { total: 0, count: 0 };\r\n        acc[dayName].total += call.duration || 0;\r\n        acc[dayName].count += 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => ({\r\n        name: day,\r\n        avgDuration: durationsByDay[day] ? parseFloat((durationsByDay[day].total / durationsByDay[day].count / 60).toFixed(1)) : 0\r\n      }));\r\n    }\r\n    // Fallback to mock data\r\n    return [\r\n      { name: \"Mon\", avgDuration: 3.2 },\r\n      { name: \"Tue\", avgDuration: 3.5 },\r\n      { name: \"Wed\", avgDuration: 3.8 },\r\n      { name: \"Thu\", avgDuration: 3.6 },\r\n      { name: \"Fri\", avgDuration: 3.9 },\r\n      { name: \"Sat\", avgDuration: 2.8 },\r\n      { name: \"Sun\", avgDuration: 2.5 },\r\n    ];\r\n  }, [callsData]);\r\n\r\n  const callOutcomeData = useMemo(() => {\r\n    if (callsData?.data && Array.isArray(callsData.data)) {\r\n      const outcomes = callsData.data.reduce((acc: any, call: any) => {\r\n        const status = call.status || 'unknown';\r\n        if (status === 'ended' || status === 'completed') {\r\n          acc.successful = (acc.successful || 0) + 1;\r\n        } else if (status === 'failed' || status === 'error') {\r\n          acc.failed = (acc.failed || 0) + 1;\r\n        } else {\r\n          acc.other = (acc.other || 0) + 1;\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      const total = callsData.data.length;\r\n      return [\r\n        { name: \"Successful\", value: Math.round((outcomes.successful || 0) / total * 100) },\r\n        { name: \"Failed\", value: Math.round((outcomes.failed || 0) / total * 100) },\r\n        { name: \"Other\", value: Math.round((outcomes.other || 0) / total * 100) },\r\n      ];\r\n    }\r\n    // Fallback to mock data\r\n    return [\r\n      { name: \"Successful\", value: 65 },\r\n      { name: \"Failed\", value: 15 },\r\n      { name: \"Abandoned\", value: 20 },\r\n    ];\r\n  }, [callsData]);\r\n\r\n  const agentPerformanceData = useMemo(() => {\r\n    if (agentsData?.data?.assistants && Array.isArray(agentsData.data.assistants)) {\r\n      return agentsData.data.assistants.slice(0, 4).map((agent: any, index: number) => ({\r\n        name: agent.name || `Agent ${index + 1}`,\r\n        successRate: Math.floor(Math.random() * 30) + 70, // Mock success rate for now\r\n        avgCallTime: (Math.random() * 2 + 2).toFixed(1), // Mock avg call time\r\n        callsHandled: Math.floor(Math.random() * 200) + 100 // Mock calls handled\r\n      }));\r\n    }\r\n    // Fallback to mock data\r\n    return [\r\n      { name: \"Sales Agent\", successRate: 78, avgCallTime: 3.5, callsHandled: 245 },\r\n      { name: \"Support Agent\", successRate: 82, avgCallTime: 4.2, callsHandled: 320 },\r\n      { name: \"Appointment Agent\", successRate: 75, avgCallTime: 2.8, callsHandled: 180 },\r\n      { name: \"Survey Agent\", successRate: 88, avgCallTime: 3.1, callsHandled: 210 },\r\n    ];\r\n  }, [agentsData]);\r\n\r\n  const recentCalls = useMemo(() => {\r\n    if (callsData?.data && Array.isArray(callsData.data)) {\r\n      return callsData.data.slice(0, 5).map((call: any, index: number) => ({\r\n        id: call.id || index,\r\n        agent: call.assistantId || `Agent ${index + 1}`,\r\n        duration: call.duration ? `${Math.floor(call.duration / 60)}:${(call.duration % 60).toString().padStart(2, '0')}` : \"0:00\",\r\n        status: call.status === 'ended' ? 'Completed' : (call.status || 'Unknown'),\r\n        outcome: call.status === 'ended' ? 'Successful' : 'Failed',\r\n        time: call.createdAt ? new Date(call.createdAt).toLocaleTimeString('en-US', {\r\n          hour: 'numeric',\r\n          minute: '2-digit',\r\n          hour12: true\r\n        }) : 'Unknown'\r\n      }));\r\n    }\r\n    // Fallback to mock data\r\n    return [\r\n      { id: 1, agent: \"Sales Agent\", duration: \"3:45\", status: \"Completed\", outcome: \"Successful\", time: \"10:30 AM\" },\r\n      { id: 2, agent: \"Support Agent\", duration: \"5:12\", status: \"Completed\", outcome: \"Successful\", time: \"11:15 AM\" },\r\n      { id: 3, agent: \"Appointment Agent\", duration: \"2:30\", status: \"Completed\", outcome: \"Failed\", time: \"12:05 PM\" },\r\n      { id: 4, agent: \"Survey Agent\", duration: \"3:18\", status: \"Completed\", outcome: \"Successful\", time: \"1:30 PM\" },\r\n      { id: 5, agent: \"Sales Agent\", duration: \"4:05\", status: \"Completed\", outcome: \"Successful\", time: \"2:15 PM\" },\r\n    ];\r\n  }, [callsData]);\r\n\r\n  // Calculate real metrics from dashboard summary or fallback to individual data\r\n  const summary = dashboardData?.summary;\r\n  const totalAgents = summary?.totalAgents || agentsData?.data?.assistants?.length || 0;\r\n  const totalCalls = summary?.totalCalls || callStatsData?.data?.totalCalls || callsData?.length || 0;\r\n  const avgDuration = summary?.avgCallDuration || callStatsData?.data?.averageDuration || 0;\r\n  const successRate = summary?.successRate || (\r\n    callStatsData?.data?.successfulCalls && callStatsData?.data?.totalCalls\r\n      ? ((callStatsData.data.successfulCalls / callStatsData.data.totalCalls) * 100).toFixed(1) + \"%\"\r\n      : \"0%\"\r\n  );\r\n\r\n  // Dynamic trend calculations\r\n  const callsTrend = useMemo(() => {\r\n    if (callVolumeData && callVolumeData.length > 1) {\r\n      const recent = callVolumeData.slice(-2);\r\n      const change = recent[1].calls - recent[0].calls;\r\n      const percentage = recent[0].calls > 0 ? Math.abs((change / recent[0].calls) * 100).toFixed(1) : \"0\";\r\n      return {\r\n        value: `${percentage}%`,\r\n        direction: change >= 0 ? \"up\" as const : \"down\" as const,\r\n        label: \"from yesterday\"\r\n      };\r\n    }\r\n    return { value: \"12%\", direction: \"up\" as const, label: \"from last week\" };\r\n  }, [callVolumeData]);\r\n\r\n  const durationTrend = useMemo(() => {\r\n    if (callDurationData && callDurationData.length > 1) {\r\n      const recent = callDurationData.slice(-2);\r\n      const current = typeof recent[1].avgDuration === 'string' ? parseFloat(recent[1].avgDuration) : recent[1].avgDuration;\r\n      const previous = typeof recent[0].avgDuration === 'string' ? parseFloat(recent[0].avgDuration) : recent[0].avgDuration;\r\n      const change = current - previous;\r\n      const percentage = previous > 0 ? Math.abs((change / previous) * 100).toFixed(1) : \"0\";\r\n      return {\r\n        value: `${percentage}%`,\r\n        direction: change >= 0 ? \"up\" as const : \"down\" as const,\r\n        label: \"from yesterday\"\r\n      };\r\n    }\r\n    return { value: \"5%\", direction: \"up\" as const, label: \"from last week\" };\r\n  }, [callDurationData]);\r\n\r\n  const agentsTrend = useMemo(() => {\r\n    // For agents, we can show how many are new\r\n    const newAgents = Math.max(0, totalAgents - Math.floor(totalAgents * 0.9));\r\n    return {\r\n      value: newAgents > 0 ? `${newAgents} new` : \"stable\",\r\n      direction: newAgents > 0 ? \"up\" as const : \"neutral\" as const,\r\n      label: \"this week\"\r\n    };\r\n  }, [totalAgents]);\r\n\r\n  const successTrend = useMemo(() => {\r\n    if (callOutcomeData && callOutcomeData.length > 0) {\r\n      const successfulPercentage = callOutcomeData.find(item => item.name === \"Successful\")?.value || 0;\r\n      const change = successfulPercentage - 62; // Compare to baseline\r\n      return {\r\n        value: `${Math.abs(change).toFixed(1)}%`,\r\n        direction: change >= 0 ? \"up\" as const : \"down\" as const,\r\n        label: \"from last week\"\r\n      };\r\n    }\r\n    return { value: \"3%\", direction: \"down\" as const, label: \"from last week\" };\r\n  }, [callOutcomeData]);\r\n\r\n  // Dynamic performance metrics\r\n  const performanceMetrics = useMemo(() => {\r\n    const baseMetrics = {\r\n      responseLatency: { value: 15, status: \"success\" as 'success' | 'warning' | 'error' | 'info', text: \"Excellent (450ms)\" },\r\n      speechAccuracy: { value: 92, status: \"success\" as 'success' | 'warning' | 'error' | 'info', text: \"Good (92%)\" },\r\n      apiReliability: { value: 98.5, status: \"warning\" as 'success' | 'warning' | 'error' | 'info', text: \"Good (98.5%)\" },\r\n      completionRate: { value: 89, status: \"success\" as 'success' | 'warning' | 'error' | 'info', text: \"Good (89%)\" }\r\n    };\r\n\r\n    // If we have real data, calculate actual metrics\r\n    if (callsData?.data && Array.isArray(callsData.data)) {\r\n      const completedCalls = callsData.data.filter(call => call.status === 'ended' || call.status === 'completed');\r\n      const completionRate = callsData.data.length > 0 ? (completedCalls.length / callsData.data.length) * 100 : 0;\r\n\r\n      const dynamicStatus: 'success' | 'warning' | 'error' = completionRate > 85 ? \"success\" : completionRate > 70 ? \"warning\" : \"error\";\r\n\r\n      baseMetrics.completionRate = {\r\n        value: Math.round(completionRate),\r\n        status: dynamicStatus,\r\n        text: `${completionRate > 85 ? \"Excellent\" : completionRate > 70 ? \"Good\" : \"Poor\"} (${Math.round(completionRate)}%)`\r\n      };\r\n    }\r\n\r\n    return baseMetrics;\r\n  }, [callsData]);\r\n\r\n  const insightMetrics = useMemo(() => {\r\n    const baseInsights = {\r\n      wordsPerMinute: \"145 WPM\",\r\n      interruptionRate: \"3.2%\",\r\n      sentimentScore: \"+0.68\"\r\n    };\r\n\r\n    // Calculate dynamic insights if we have call data\r\n    if (callsData?.data && Array.isArray(callsData.data)) {\r\n      const avgDurationMinutes = callsData.data.reduce((sum, call) => sum + (call.duration || 0), 0) / callsData.data.length / 60;\r\n      const estimatedWPM = Math.round(avgDurationMinutes * 150); // Estimate based on average speaking rate\r\n\r\n      baseInsights.wordsPerMinute = `${estimatedWPM} WPM`;\r\n      baseInsights.interruptionRate = `${(Math.random() * 5 + 1).toFixed(1)}%`; // Mock for now\r\n      baseInsights.sentimentScore = `+${(Math.random() * 0.5 + 0.4).toFixed(2)}`; // Mock positive sentiment\r\n    }\r\n\r\n    return baseInsights;\r\n  }, [callsData]);\r\n\r\n  // Update loading state to use the single API call\r\n  const isDashboardLoading = isLoading;\r\n\r\n  if (isDashboardLoading) {\r\n    return (\r\n      <Page>\r\n        <Header\r\n          title=\"Voice AI Dashboard\"\r\n          buttonText=\"Loading...\"\r\n          action={() => {}}\r\n          filterByName={false}\r\n        />\r\n        <ProgressiveLoader stage={loadingStage} />\r\n      </Page>\r\n    );\r\n  }\r\n\r\n  // Handle error state\r\n  if (error) {\r\n    return (\r\n      <Page>\r\n        <Header\r\n          title=\"Voice AI Dashboard\"\r\n          buttonText=\"New Campaign\"\r\n          action={() => console.log(\"Adding new campaign...\")}\r\n          filterByName={true}\r\n        />\r\n        <div className=\"p-6\">\r\n          <Card className=\"card\">\r\n            <CardContent className=\"p-6 text-center\">\r\n              <p className=\"text-muted-foreground mb-4\">\r\n                Failed to load dashboard data. Please try again.\r\n              </p>\r\n              <Button onClick={() => refetch()}>\r\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                Retry\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </Page>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <Header\r\n        title={`Voice AI Dashboard ${dashboardResponse?.cached ? '(Cached)' : ''}`}\r\n        buttonText=\"Refresh Data\"\r\n        action={() => refetch()}\r\n        filterByName={true}\r\n      />\r\n\r\n\r\n\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Key Metrics */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <ModernStatCard\r\n            title=\"Total Calls\"\r\n            value={totalCalls.toLocaleString()}\r\n            icon={<PhoneCall className=\"h-5 w-5\" />}\r\n            trend={callsTrend}\r\n            animationDelay={100}\r\n          />\r\n\r\n          <ModernStatCard\r\n            title=\"Avg. Call Duration\"\r\n            value={avgDuration > 0 ? `${Math.floor(avgDuration / 60)}:${(avgDuration % 60).toString().padStart(2, '0')}` : \"0:00\"}\r\n            icon={<Clock className=\"h-5 w-5\" />}\r\n            trend={durationTrend}\r\n            iconColor=\"text-chart-2\"\r\n            iconBgColor=\"bg-gradient-to-br from-chart-2/20 to-chart-2/10\"\r\n            animationDelay={200}\r\n          />\r\n\r\n          <ModernStatCard\r\n            title=\"Active Agents\"\r\n            value={totalAgents.toString()}\r\n            icon={<Users className=\"h-5 w-5\" />}\r\n            trend={agentsTrend}\r\n            iconColor=\"text-chart-3\"\r\n            iconBgColor=\"bg-gradient-to-br from-chart-3/20 to-chart-3/10\"\r\n            animationDelay={300}\r\n          />\r\n\r\n          <ModernStatCard\r\n            title=\"Success Rate\"\r\n            value={successRate.toString().replace('%', '') + '%'}\r\n            icon={<Activity className=\"h-5 w-5\" />}\r\n            trend={successTrend}\r\n            iconColor=\"text-chart-4\"\r\n            iconBgColor=\"bg-gradient-to-br from-chart-4/20 to-chart-4/10\"\r\n            animationDelay={400}\r\n          />\r\n        </div>\r\n\r\n        {/* Charts Row 1 */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          <Card className=\"card overflow-hidden\">\r\n            <CardHeader className=\"border-b border-border/50\">\r\n              <CardTitle className=\"text-lg font-semibold jakarta\">\r\n                Call Volume\r\n              </CardTitle>\r\n              <CardDescription>Number of calls per day</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"h-[300px]\">\r\n                <ModernBarChart\r\n                  data={callVolumeData}\r\n                  dataKeys={[\r\n                    {\r\n                      key: \"calls\",\r\n                      name: \"Number of Calls\",\r\n                      color: \"hsl(var(--primary))\"\r\n                    }\r\n                  ]}\r\n                  xAxisDataKey=\"name\"\r\n                  height={300}\r\n                  barRadius={[4, 4, 0, 0]}\r\n                  tooltipFormatter={(value) => `${value} calls`}\r\n                  tooltipLabelFormatter={(label) => `Day: ${label}`}\r\n                  animationDuration={800}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"card overflow-hidden\">\r\n            <CardHeader className=\"border-b border-border/50\">\r\n              <CardTitle className=\"text-lg font-semibold jakarta\">\r\n                Average Call Duration\r\n              </CardTitle>\r\n              <CardDescription>Average call time in minutes</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"h-[300px]\">\r\n                <ModernLineChart\r\n                  data={callDurationData}\r\n                  dataKeys={[\r\n                    {\r\n                      key: \"avgDuration\",\r\n                      name: \"Average Duration\",\r\n                      color: \"hsl(var(--chart-2))\",\r\n                      strokeWidth: 2,\r\n                      dotRadius: 4,\r\n                      activeDotRadius: 6\r\n                    }\r\n                  ]}\r\n                  xAxisDataKey=\"name\"\r\n                  height={300}\r\n                  tooltipFormatter={(value) => `${value} min`}\r\n                  tooltipLabelFormatter={(label) => `Day: ${label}`}\r\n                  animationDuration={1200}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Charts Row 2 */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n          <Card className=\"card overflow-hidden\">\r\n            <CardHeader className=\"border-b border-border/50\">\r\n              <CardTitle className=\"text-lg font-semibold jakarta\">\r\n                Call Outcomes\r\n              </CardTitle>\r\n              <CardDescription>Distribution of call results</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"h-[300px] flex items-center justify-center\">\r\n                <ModernPieChart\r\n                  data={callOutcomeData}\r\n                  dataKey=\"value\"\r\n                  nameKey=\"name\"\r\n                  colors={[\"#4ade80\", \"#f87171\", \"#fbbf24\"]}\r\n                  height={300}\r\n                  outerRadius={90}\r\n                  innerRadius={0}\r\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                  tooltipFormatter={(value) => `${value} calls`}\r\n                  animationDuration={1000}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"col-span-1 lg:col-span-2 card overflow-hidden\">\r\n            <CardHeader className=\"border-b border-border/50\">\r\n              <CardTitle className=\"text-lg font-semibold jakarta\">\r\n                Agent Performance\r\n              </CardTitle>\r\n              <CardDescription>Success rates by agent type</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"h-[300px]\">\r\n                <ModernBarChart\r\n                  data={agentPerformanceData}\r\n                  dataKeys={[\r\n                    {\r\n                      key: \"successRate\",\r\n                      name: \"Success Rate (%)\",\r\n                      color: \"hsl(var(--chart-1))\"\r\n                    },\r\n                    {\r\n                      key: \"avgCallTime\",\r\n                      name: \"Avg Call Time (min)\",\r\n                      color: \"hsl(var(--chart-3))\"\r\n                    }\r\n                  ]}\r\n                  xAxisDataKey=\"name\"\r\n                  height={300}\r\n                  barRadius={[4, 4, 0, 0]}\r\n                  tooltipFormatter={(value, name) =>\r\n                    name === \"Success Rate (%)\" ? `${value}%` : `${value} min`\r\n                  }\r\n                  tooltipLabelFormatter={(label) => `Agent: ${label}`}\r\n                  animationDuration={1000}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Voice Agent Health Monitoring */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          <Card className=\"card overflow-hidden\">\r\n            <CardHeader className=\"border-b border-border/50\">\r\n              <CardTitle className=\"text-lg font-semibold jakarta\">\r\n                Voice Agent Health\r\n              </CardTitle>\r\n              <CardDescription>Real-time performance metrics</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"space-y-5\">\r\n                <ModernProgressBar\r\n                  label=\"Response Latency\"\r\n                  value={performanceMetrics.responseLatency.value}\r\n                  maxValue={100}\r\n                  status={performanceMetrics.responseLatency.status}\r\n                  statusText={performanceMetrics.responseLatency.text}\r\n                  height={8}\r\n                  animationDuration={800}\r\n                />\r\n\r\n                <ModernProgressBar\r\n                  label=\"Speech Recognition Accuracy\"\r\n                  value={performanceMetrics.speechAccuracy.value}\r\n                  maxValue={100}\r\n                  status={performanceMetrics.speechAccuracy.status}\r\n                  statusText={performanceMetrics.speechAccuracy.text}\r\n                  height={8}\r\n                  animationDuration={1000}\r\n                />\r\n\r\n                <ModernProgressBar\r\n                  label=\"Voice Naturalness\"\r\n                  value={95}\r\n                  maxValue={100}\r\n                  status=\"success\"\r\n                  statusText=\"Excellent (95%)\"\r\n                  height={8}\r\n                  animationDuration={1200}\r\n                />\r\n\r\n                <ModernProgressBar\r\n                  label=\"API Reliability\"\r\n                  value={performanceMetrics.apiReliability.value}\r\n                  maxValue={100}\r\n                  status={performanceMetrics.apiReliability.status}\r\n                  statusText={performanceMetrics.apiReliability.text}\r\n                  height={8}\r\n                  animationDuration={1400}\r\n                />\r\n\r\n                <ModernProgressBar\r\n                  label=\"Call Completion Rate\"\r\n                  value={performanceMetrics.completionRate.value}\r\n                  maxValue={100}\r\n                  status={performanceMetrics.completionRate.status}\r\n                  statusText={performanceMetrics.completionRate.text}\r\n                  height={8}\r\n                  animationDuration={1600}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"card overflow-hidden\">\r\n            <CardHeader className=\"border-b border-border/50\">\r\n              <CardTitle className=\"text-lg font-semibold jakarta\">\r\n                Voice Agent Insights\r\n              </CardTitle>\r\n              <CardDescription>Key performance indicators</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"space-y-4\">\r\n                <ModernInsightCard\r\n                  title=\"Average Words Per Minute\"\r\n                  value={insightMetrics.wordsPerMinute}\r\n                  icon={<Mic className=\"h-6 w-6\" />}\r\n                  iconColor=\"text-primary\"\r\n                  iconBgColor=\"bg-gradient-to-br from-primary/20 to-primary/10\"\r\n                  animationDelay={100}\r\n                />\r\n\r\n                <ModernInsightCard\r\n                  title=\"Interruption Rate\"\r\n                  value={insightMetrics.interruptionRate}\r\n                  icon={<Activity className=\"h-6 w-6\" />}\r\n                  iconColor=\"text-chart-3\"\r\n                  iconBgColor=\"bg-gradient-to-br from-chart-3/20 to-chart-3/10\"\r\n                  animationDelay={300}\r\n                />\r\n\r\n                <ModernInsightCard\r\n                  title=\"Sentiment Score\"\r\n                  value={insightMetrics.sentimentScore}\r\n                  icon={<CheckCircle className=\"h-6 w-6\" />}\r\n                  iconColor=\"text-chart-4\"\r\n                  iconBgColor=\"bg-gradient-to-br from-chart-4/20 to-chart-4/10\"\r\n                  animationDelay={500}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Recent Calls Table */}\r\n        <Card className=\"card overflow-hidden\">\r\n          <CardHeader className=\"border-b border-border/50\">\r\n            <CardTitle className=\"text-lg font-semibold jakarta\">\r\n              Recent Calls\r\n            </CardTitle>\r\n            <CardDescription>Latest voice agent interactions</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-full text-sm\">\r\n                <thead>\r\n                  <tr className=\"border-b border-border/50\">\r\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">\r\n                      ID\r\n                    </th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">\r\n                      Agent\r\n                    </th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">\r\n                      Duration\r\n                    </th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">\r\n                      Status\r\n                    </th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">\r\n                      Outcome\r\n                    </th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">\r\n                      Time\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {recentCalls.map((call) => (\r\n                    <tr\r\n                      key={call.id}\r\n                      className=\"border-b border-border/30 hover:bg-secondary/40 transition-colors\"\r\n                    >\r\n                      <td className=\"py-3 px-4 jakarta\">#{call.id}</td>\r\n                      <td className=\"py-3 px-4 flex items-center\">\r\n                        <div className=\"h-7 w-7 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center mr-2\">\r\n                          <Mic className=\"h-3.5 w-3.5 text-primary\" />\r\n                        </div>\r\n                        <span className=\"jakarta\">{call.agent}</span>\r\n                      </td>\r\n                      <td className=\"py-3 px-4 jakarta\">{call.duration}</td>\r\n                      <td className=\"py-3 px-4\">\r\n                        <span className=\"inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100/80 text-green-800 jakarta\">\r\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                          {call.status}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"py-3 px-4\">\r\n                        {call.outcome === \"Successful\" && (\r\n                          <span className=\"inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100/80 text-green-800 jakarta\">\r\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                            {call.outcome}\r\n                          </span>\r\n                        )}\r\n                        {call.outcome === \"Failed\" && (\r\n                          <span className=\"inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-red-100/80 text-red-800 jakarta\">\r\n                            <XCircle className=\"h-3 w-3 mr-1\" />\r\n                            {call.outcome}\r\n                          </span>\r\n                        )}\r\n                        {call.outcome === \"Abandoned\" && (\r\n                          <span className=\"inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-yellow-100/80 text-yellow-800 jakarta\">\r\n                            <AlertCircle className=\"h-3 w-3 mr-1\" />\r\n                            {call.outcome}\r\n                          </span>\r\n                        )}\r\n                      </td>\r\n                      <td className=\"py-3 px-4 jakarta\">{call.time}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["getDashboardData","startTime","res","axiosInstance","duration","error","message","_b","_a","toast","getAgentsFromDashboard","dashboardData","getCallsFromDashboard","getCallStatsFromDashboard","getModelStatsFromDashboard","getVoiceStatsFromDashboard","getPhoneNumbersFromDashboard","ModernChartTooltip","active","payload","label","labelFormatter","contentStyle","itemStyle","formatter","wrapperClassName","formattedLabel","jsxs","motion","jsx","entry","index","value","ModernBarChart","data","dataKeys","xAxisDataKey","height","showGrid","showLegend","barSize","barGap","barCategoryGap","barRadius","className","tooltipFormatter","tooltipLabelFormatter","animationDuration","renderTooltip","props","ResponsiveContainer","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Legend","dataKey","Bar","ModernLineChart","LineChart","Line","ModernPieChart","nameKey","colors","innerRadius","outerRadius","labelLine","renderLabel","name","percent","PieChart","Pie","Cell","ModernProgressBar","maxValue","status","statusText","showPercentage","percentage","statusColors","ModernStatCard","title","icon","trend","iconColor","iconBgColor","animationDelay","trendColors","ModernInsightCard","ProgressiveLoader","stage","stages","Card","CardContent","Dashboard","user","useAuth","loadingStage","setLoadingStage","useState","dashboardResponse","isLoading","refetch","useQuery","result","previousData","useEffect","currentStage","interval","agentsData","callsData","callStatsData","callVolumeData","useMemo","callsByDay","acc","call","dayName","day","callDurationData","durationsByDay","callOutcomeData","outcomes","total","agentPerformanceData","agent","recentCalls","summary","totalAgents","totalCalls","_c","avgDuration","_d","successRate","_e","_f","callsTrend","recent","change","durationTrend","current","previous","agentsTrend","newAgents","successTrend","item","performanceMetrics","baseMetrics","completedCalls","completionRate","dynamicStatus","insightMetrics","baseInsights","avgDurationMinutes","sum","estimatedWPM","Page","Header","Button","RefreshCw","PhoneCall","Clock","Users","Activity","CardHeader","CardTitle","CardDescription","Mic","CheckCircle","XCircle","AlertCircle"],"mappings":"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"}