{"version":3,"file":"contactService-DlN-ROlO.js","sources":["../../src/api/services/contact/contactService.ts"],"sourcesContent":["// src/api/services/contact/contactService.ts\r\n\r\nimport axiosInstance from \"@/api/axios/axiosInstance\";\r\nimport { toast } from \"sonner\";\r\n\r\n// Types\r\nexport interface Contact {\r\n  id: string;\r\n  email: string;\r\n  contact_number: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  company?: string;\r\n  tags?: string[];\r\n  metadata?: Record<string, any>;\r\n  listId?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface ContactList {\r\n  id: string;\r\n  list_name: string;\r\n  list_description?: string;\r\n  user_id: number;\r\n  contactCount: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface ContactPayload {\r\n  email: string;\r\n  contact_number: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  fullName?: string;\r\n  phoneNumber?: string;\r\n  company?: string;\r\n  tags?: string[];\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface ContactServiceData {\r\n  user_id: number;\r\n  list_name: string;\r\n  list_description: string;\r\n  contacts: ContactPayload[];\r\n}\r\n\r\nexport interface ContactStats {\r\n  totalContacts: number;\r\n  totalLists: number;\r\n  contactsByList: Array<{\r\n    listId: string;\r\n    listName: string;\r\n    count: number;\r\n  }>;\r\n  contactsByTag: Array<{\r\n    tag: string;\r\n    count: number;\r\n  }>;\r\n  recentContacts: Contact[];\r\n}\r\n\r\n// Create contact list\r\nexport const createContactService = async (\r\n  data: ContactServiceData\r\n): Promise<string> => {\r\n  try {\r\n    const response = await axiosInstance.post(\"/api/contacts\", data);\r\n    toast.success(\"Contact list created successfully\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Contact Service Error:\", error);\r\n    toast.error(\"Failed to create contact list\");\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all contacts\r\nexport const getAllContacts = async (page: number, search: string) => {\r\n  try {\r\n    const response = await axiosInstance.get(\"/api/contacts\", {\r\n      params: { page, search },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching contacts:\", error);\r\n    toast.error(\"Failed to fetch contacts\");\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get contact by ID\r\nexport const getContactById = async (id: string) => {\r\n  try {\r\n    const response = await axiosInstance.get(`/api/contacts/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching contact:\", error);\r\n    toast.error(\"Failed to fetch contact\");\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update contact (using new PATCH endpoint)\r\nexport const updateContact = async (id: string, data: Partial<ContactPayload>) => {\r\n  try {\r\n    // Map frontend field names to backend expected names\r\n    const payload = {\r\n      fullName: data.fullName,\r\n      email: data.email,\r\n      phoneNumber: data.phoneNumber,\r\n    };\r\n\r\n    const response = await axiosInstance.patch(`/api/contacts/${id}`, payload);\r\n    // Don't show toast here - let the component handle it\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error updating contact:\", error);\r\n    const message = error.response?.data?.error || error.response?.data?.message || \"Failed to update contact\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete contact\r\nexport const deleteContact = async (id: string) => {\r\n  try {\r\n    const response = await axiosInstance.delete(`/api/contacts/${id}`);\r\n    // Don't show toast here - let the component handle it\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error deleting contact:\", error);\r\n    const message = error.response?.data?.message || \"Failed to delete contact\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all contact lists (using new lists API)\r\nexport const getAllContactLists = async (page?: number, search?: string, includeDeleted?: boolean) => {\r\n  try {\r\n    const response = await axiosInstance.get(\"/api/lists\", {\r\n      params: { page, search, includeDeleted },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching contact lists:\", error);\r\n\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Legacy function for backward compatibility\r\nexport const getListNamesWithContactCount = async () => {\r\n  try {\r\n    const response = await axiosInstance.get(\"/api/contacts/lists\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching list names:\", error);\r\n    toast.error(\"Failed to fetch list names\");\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get contact list by ID (using new lists API)\r\nexport const getContactListById = async (id: string) => {\r\n  try {\r\n    const response = await axiosInstance.get(`/api/lists/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching contact list:\", error);\r\n    toast.error(\"Failed to fetch contact list\");\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get contacts for a specific list\r\nexport const getContactsForList = async (listId: string, page?: number, search?: string) => {\r\n  try {\r\n    const response = await axiosInstance.get(`/api/lists/${listId}/contacts`, {\r\n      params: { page, search },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching list contacts:\", error);\r\n   \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new list\r\nexport const createList = async (data: {\r\n  listName: string;\r\n  description: string;\r\n  type?: string;\r\n}) => {\r\n  try {\r\n    // Map frontend field names to backend expected names\r\n    const payload = {\r\n      list_name: data.listName,\r\n      list_description: data.description,\r\n      type: data.type || 'General'\r\n    };\r\n\r\n    const response = await axiosInstance.post(\"/api/lists\", payload);\r\n    toast.success(\"List created successfully\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error creating list:\", error);\r\n    const message = error.response?.data?.error || error.response?.data?.message || \"Failed to create list\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update contact list\r\nexport const updateContactList = async (id: string, data: {\r\n  list_name?: string;\r\n  list_description?: string;\r\n}) => {\r\n  try {\r\n    const response = await axiosInstance.put(`/api/lists/${id}`, data);\r\n    toast.success(\"Contact list updated successfully\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error updating contact list:\", error);\r\n    const message = error.response?.data?.error || error.response?.data?.message || \"Failed to update contact list\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete contact list (soft delete)\r\nexport const deleteContactList = async (id: string) => {\r\n  try {\r\n    const response = await axiosInstance.delete(`/api/lists/${id}`);\r\n    toast.success(\"Contact list disabled successfully\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error deleting contact list:\", error);\r\n    const message = error.response?.data?.error || error.response?.data?.message || \"Failed to delete contact list\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Restore contact list (super admin only)\r\nexport const restoreContactList = async (id: string) => {\r\n  try {\r\n    const response = await axiosInstance.patch(`/api/lists/${id}/restore`);\r\n    toast.success(\"Contact list restored successfully\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error restoring contact list:\", error);\r\n    const message = error.response?.data?.error || error.response?.data?.message || \"Failed to restore contact list\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add contact to list\r\nexport const addContactToList = async (listId: string, contact: ContactPayload) => {\r\n  try {\r\n    // Map frontend field names to backend expected names\r\n    const payload = {\r\n      email: contact.email,\r\n      contact_number: contact.phoneNumber || contact.contact_number, // Map phoneNumber to contact_number\r\n      first_name: contact.fullName || contact.firstName || '', // Map fullName to first_name\r\n    };\r\n\r\n    const response = await axiosInstance.post(`/api/lists/${listId}/contacts`, payload);\r\n    // Don't show toast here - let the component handle it\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error adding contact to list:\", error);\r\n    const message = error.response?.data?.error || error.response?.data?.message || \"Failed to add contact to list\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Remove contact from list\r\nexport const removeContactFromList = async (listId: string, contactId: string) => {\r\n  try {\r\n    const response = await axiosInstance.delete(`/api/lists/${listId}/contacts/${contactId}`);\r\n    toast.success(\"Contact removed from list successfully\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error removing contact from list:\", error);\r\n    const message = error.response?.data?.error || error.response?.data?.message || \"Failed to remove contact from list\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Import contacts from CSV\r\nexport const importContactsFromCSV = async (listId: string, file: File) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"listId\", listId);\r\n\r\n    const response = await axiosInstance.post(\"/api/contacts/import\", formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n    toast.success(\"Contacts imported successfully\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error importing contacts:\", error);\r\n    const message = error.response?.data?.message || \"Failed to import contacts\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export contacts to CSV\r\nexport const exportContactsToCSV = async (listId?: string) => {\r\n  try {\r\n    const response = await axiosInstance.get(\"/api/contacts/export\", {\r\n      params: { listId },\r\n      responseType: \"blob\",\r\n    });\r\n\r\n    // Create blob link to download\r\n    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.setAttribute(\"download\", `contacts-export.csv`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n    window.URL.revokeObjectURL(url);\r\n\r\n    toast.success(\"Contacts exported successfully\");\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error exporting contacts:\", error);\r\n    const message = error.response?.data?.message || \"Failed to export contacts\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get contact statistics\r\nexport const getContactStats = async () => {\r\n  try {\r\n    const response = await axiosInstance.get(\"/api/contacts/stats\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching contact stats:\", error);\r\n    toast.error(\"Failed to fetch contact statistics\");\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Search contacts\r\nexport const searchContacts = async (query: string, filters?: {\r\n  listId?: string;\r\n  tags?: string[];\r\n  company?: string;\r\n}) => {\r\n  try {\r\n    const response = await axiosInstance.get(\"/api/contacts/search\", {\r\n      params: { query, ...filters },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error searching contacts:\", error);\r\n    toast.error(\"Failed to search contacts\");\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["createContactService","data","response","axiosInstance","toast","error","getAllContacts","page","search","updateContact","id","payload","message","_b","_a","_d","_c","deleteContact","getAllContactLists","includeDeleted","getContactListById","getContactsForList","listId","createList","deleteContactList","restoreContactList","addContactToList","contact"],"mappings":"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"}