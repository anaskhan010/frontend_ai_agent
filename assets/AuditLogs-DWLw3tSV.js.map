{"version":3,"file":"AuditLogs-DWLw3tSV.js","sources":["../../src/api/services/auditLogs/auditLogService.ts","../../src/pages/AuditLogs/AuditLogs.tsx"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface AuditLog {\n  id: number;\n  user_id?: number;\n  user_email?: string;\n  user_name?: string;\n  operation_type: 'CREATE' | 'UPDATE' | 'DELETE' | 'READ';\n  display_operation?: string; // Enhanced operation display (e.g., \"Login\", \"Logout\")\n  table_name: string;\n  record_id?: string;\n  old_values?: any;\n  new_values?: any;\n  changed_fields?: any[];\n  ip_address?: string;\n  user_agent?: string;\n  browser_info?: string; // Extracted browser information\n  request_method?: string;\n  request_url?: string;\n  request_body?: any;\n  response_status?: number;\n  execution_time_ms?: number;\n  error_message?: string;\n  metadata?: any;\n  session_id?: string;\n  transaction_id?: string;\n  created_at: string;\n}\n\nexport interface AuditLogFilters {\n  user_id?: number;\n  user_email?: string;\n  operation_type?: 'CREATE' | 'UPDATE' | 'DELETE' | 'READ';\n  table_name?: string;\n  record_id?: string;\n  start_date?: string;\n  end_date?: string;\n  limit?: number;\n  offset?: number;\n  sort_by?: string;\n  sort_order?: 'ASC' | 'DESC';\n}\n\nexport interface AuditLogResponse {\n  success: boolean;\n  message: string;\n  data: AuditLog[];\n  pagination: {\n    total: number;\n    limit: number;\n    offset: number;\n    hasMore: boolean;\n    currentPage: number;\n    totalPages: number;\n  };\n}\n\nexport interface AuditLogStats {\n  operationStats: Array<{\n    operation_type: string;\n    count: number;\n  }>;\n  tableStats: Array<{\n    table_name: string;\n    count: number;\n  }>;\n  userStats: Array<{\n    user_email: string;\n    user_name: string;\n    count: number;\n  }>;\n  dailyActivity: Array<{\n    date: string;\n    count: number;\n  }>;\n}\n\nexport interface ExportResult {\n  success: boolean;\n  message: string;\n  data: {\n    filename: string;\n    filepath: string;\n    recordCount: number;\n    exportDate: string;\n  };\n}\n\n// Get audit logs with filtering and pagination\nexport async function getAuditLogs(filters: AuditLogFilters = {}): Promise<AuditLogResponse> {\n  try {\n    const params = new URLSearchParams();\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        params.append(key, String(value));\n      }\n    });\n\n    const res = await axiosInstance.get(`/api/audit-logs?${params.toString()}`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching audit logs:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch audit logs\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get audit log by ID\nexport async function getAuditLogById(id: number): Promise<{ success: boolean; data: AuditLog }> {\n  try {\n    const res = await axiosInstance.get(`/api/audit-logs/${id}`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching audit log:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch audit log\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get audit log statistics\nexport async function getAuditLogStats(filters: Partial<AuditLogFilters> = {}): Promise<{ success: boolean; data: AuditLogStats }> {\n  try {\n    const params = new URLSearchParams();\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        params.append(key, String(value));\n      }\n    });\n\n    const res = await axiosInstance.get(`/api/audit-logs/stats?${params.toString()}`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching audit log stats:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch audit log statistics\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Export audit logs to Excel\nexport async function exportAuditLogs(filters: AuditLogFilters = {}): Promise<ExportResult> {\n  try {\n    const params = new URLSearchParams();\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        params.append(key, String(value));\n      }\n    });\n\n    const res = await axiosInstance.get(`/api/audit-logs/export?${params.toString()}`);\n    toast.success(\"Audit logs exported successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error exporting audit logs:\", error);\n    const message = error.response?.data?.message || \"Failed to export audit logs\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Download exported file\nexport async function downloadAuditLogFile(filename: string, date?: string): Promise<void> {\n  try {\n    const params = date ? `?date=${date}` : '';\n    const res = await axiosInstance.get(`/api/audit-logs/download/${filename}${params}`, {\n      responseType: 'blob',\n    });\n    \n    // Create blob link to download\n    const url = window.URL.createObjectURL(new Blob([res.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n    \n    toast.success(\"File downloaded successfully\");\n  } catch (error: any) {\n    console.error(\"Error downloading file:\", error);\n    const message = error.response?.data?.message || \"Failed to download file\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Clean up old audit logs\nexport async function cleanupOldAuditLogs(days: number = 90): Promise<{ success: boolean; data: { deletedCount: number; daysKept: number } }> {\n  try {\n    const res = await axiosInstance.delete(`/api/audit-logs/cleanup?days=${days}`);\n    toast.success(`Cleaned up audit logs older than ${days} days`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error cleaning up audit logs:\", error);\n    const message = error.response?.data?.message || \"Failed to cleanup audit logs\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Create audit log entry (for authentication events)\nexport async function createAuditLog(auditData: Partial<AuditLog>): Promise<{ success: boolean; data: { id: number } }> {\n  try {\n    const res = await axiosInstance.post('/api/audit-logs', auditData);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error creating audit log:\", error);\n    // Don't show toast for audit log creation errors to avoid spam\n    throw error;\n  }\n}\n\n// Helper function to format operation type for display\nexport function formatOperationType(operationType: string): string {\n  const typeMap: Record<string, string> = {\n    'CREATE': 'Created',\n    'UPDATE': 'Updated',\n    'DELETE': 'Deleted',\n    'READ': 'Viewed'\n  };\n  return typeMap[operationType] || operationType;\n}\n\n// Helper function to format table name for display\nexport function formatTableName(tableName: string): string {\n  return tableName\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n// Helper function to get operation color\nexport function getOperationColor(operationType: string): string {\n  const colorMap: Record<string, string> = {\n    'CREATE': 'text-green-600 bg-green-50',\n    'UPDATE': 'text-blue-600 bg-blue-50',\n    'DELETE': 'text-red-600 bg-red-50',\n    'READ': 'text-gray-600 bg-gray-50',\n    'Login': 'text-emerald-600 bg-emerald-50',\n    'Logout': 'text-orange-600 bg-orange-50'\n  };\n  return colorMap[operationType] || 'text-gray-600 bg-gray-50';\n}\n","import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { \n  Download, \n  Filter, \n  Search, \n  Calendar as CalendarIcon,\n  FileText,\n  User,\n  Database,\n  Clock,\n  AlertCircle,\n  RefreshCw,\n  Trash2\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { \n  getAuditLogs, \n  getAuditLogStats, \n  exportAuditLogs,\n  cleanupOldAuditLogs,\n  formatOperationType,\n  formatTableName,\n  getOperationColor,\n  type AuditLogFilters \n} from '@/api/services/auditLogs/auditLogService';\nimport { toast } from 'sonner';\n\nconst AuditLogs: React.FC = () => {\n  const [filters, setFilters] = useState<AuditLogFilters>({\n    limit: 50,\n    offset: 0,\n    sort_by: 'created_at',\n    sort_order: 'DESC'\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [dateRange, setDateRange] = useState<{ from?: Date; to?: Date }>({ from: undefined, to: undefined });\n\n  // Handle calendar date range selection\n  const handleDateRangeSelect = (range: { from?: Date; to?: Date } | undefined) => {\n    setDateRange(range || { from: undefined, to: undefined });\n  };\n  const [isExporting, setIsExporting] = useState(false);\n  const [isCleaningUp, setIsCleaningUp] = useState(false);\n  const [selectedLogValues, setSelectedLogValues] = useState<{\n    id: number;\n    oldValues: any;\n    newValues: any;\n    operation: string;\n    table: string;\n    timestamp: string;\n  } | null>(null);\n\n  // Fetch audit logs\n  const {\n    data: auditLogsData,\n    isLoading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['auditLogs', filters],\n    queryFn: () => getAuditLogs(filters),\n    refetchInterval: 2 * 60 * 1000, // Reduced from 30s to 2 minutes\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fetch statistics\n  const { data: statsData } = useQuery({\n    queryKey: ['auditLogStats', filters],\n    queryFn: () => getAuditLogStats(filters),\n  });\n\n  // Handle search\n  useEffect(() => {\n    const delayedSearch = setTimeout(() => {\n      if (searchTerm) {\n        setFilters(prev => ({ ...prev, user_email: searchTerm, offset: 0 }));\n      } else {\n        setFilters(prev => {\n          const { user_email, ...rest } = prev;\n          return { ...rest, offset: 0 };\n        });\n      }\n    }, 500);\n\n    return () => clearTimeout(delayedSearch);\n  }, [searchTerm]);\n\n  // Handle date range filter\n  useEffect(() => {\n    if (dateRange.from || dateRange.to) {\n      setFilters(prev => ({\n        ...prev,\n        start_date: dateRange.from ? format(dateRange.from, 'yyyy-MM-dd') : undefined,\n        end_date: dateRange.to ? format(dateRange.to, 'yyyy-MM-dd') : undefined,\n        offset: 0\n      }));\n    }\n  }, [dateRange]);\n\n  const handleFilterChange = (key: keyof AuditLogFilters, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value, offset: 0 }));\n  };\n\n  const handleExport = async () => {\n    setIsExporting(true);\n    try {\n      const result = await exportAuditLogs(filters);\n      toast.success(`Exported ${result.data.recordCount} records to ${result.data.filename}`);\n    } catch (error) {\n      console.error('Export failed:', error);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleCleanup = async () => {\n    setIsCleaningUp(true);\n    try {\n      const result = await cleanupOldAuditLogs(90);\n      toast.success(`Cleaned up ${result.data.deletedCount} old audit log entries`);\n      refetch();\n    } catch (error) {\n      console.error('Cleanup failed:', error);\n    } finally {\n      setIsCleaningUp(false);\n    }\n  };\n\n  const handlePagination = (direction: 'prev' | 'next') => {\n    const currentOffset = filters.offset || 0;\n    const limit = filters.limit || 50;\n    \n    if (direction === 'next') {\n      setFilters(prev => ({ ...prev, offset: currentOffset + limit }));\n    } else {\n      setFilters(prev => ({ ...prev, offset: Math.max(0, currentOffset - limit) }));\n    }\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return format(new Date(dateString), 'MMM dd, yyyy HH:mm:ss');\n  };\n\n  const formatDuration = (ms?: number) => {\n    if (!ms) return 'N/A';\n    return `${ms}ms`;\n  };\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-8\">\n            <div className=\"text-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Error Loading Audit Logs</h3>\n              <p className=\"text-gray-600 mb-4\">Failed to load audit logs. Please try again.</p>\n              <Button onClick={() => refetch()}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Retry\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Audit Logs</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Track all system activities and changes\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => refetch()}\n            disabled={isLoading}\n          >\n            <RefreshCw className={cn(\"h-4 w-4 mr-2\", isLoading && \"animate-spin\")} />\n            Refresh\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={handleExport}\n            disabled={isExporting}\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            {isExporting ? 'Exporting...' : 'Export'}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={handleCleanup}\n            disabled={isCleaningUp}\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            {isCleaningUp ? 'Cleaning...' : 'Cleanup Old'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {statsData?.data && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-blue-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Operations</p>\n                  <p className=\"text-2xl font-bold\">\n                    {statsData.data.operationStats.reduce((sum, stat) => sum + stat.count, 0)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5 text-green-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Active Users</p>\n                  <p className=\"text-2xl font-bold\">{statsData.data.userStats.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5 text-purple-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Tables Affected</p>\n                  <p className=\"text-2xl font-bold\">{statsData.data.tableStats.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Days Tracked</p>\n                  <p className=\"text-2xl font-bold\">{statsData.data.dailyActivity.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"h-5 w-5\" />\n              Filters & Search\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowFilters(!showFilters)}\n            >\n              {showFilters ? 'Hide' : 'Show'} Advanced Filters\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search by user email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Advanced Filters */}\n          {showFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 pt-4 border-t\">\n              <Select\n                value={filters.operation_type || ''}\n                onValueChange={(value) => handleFilterChange('operation_type', value || undefined)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Operation Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Operations</SelectItem>\n                  <SelectItem value=\"CREATE\">Create</SelectItem>\n                  <SelectItem value=\"UPDATE\">Update</SelectItem>\n                  <SelectItem value=\"DELETE\">Delete</SelectItem>\n                  <SelectItem value=\"READ\">Read</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Input\n                placeholder=\"Table name...\"\n                value={filters.table_name || ''}\n                onChange={(e) => handleFilterChange('table_name', e.target.value || undefined)}\n              />\n\n              <Input\n                placeholder=\"Record ID...\"\n                value={filters.record_id || ''}\n                onChange={(e) => handleFilterChange('record_id', e.target.value || undefined)}\n              />\n\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" className=\"justify-start text-left font-normal\">\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {dateRange.from ? (\n                      dateRange.to ? (\n                        <>\n                          {format(dateRange.from, \"LLL dd, y\")} -{\" \"}\n                          {format(dateRange.to, \"LLL dd, y\")}\n                        </>\n                      ) : (\n                        format(dateRange.from, \"LLL dd, y\")\n                      )\n                    ) : (\n                      <span>Pick a date range</span>\n                    )}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    initialFocus\n                    mode=\"range\"\n                    defaultMonth={dateRange.from}\n                    selected={dateRange.from ? dateRange as any : undefined}\n                    onSelect={handleDateRangeSelect}\n                    numberOfMonths={2}\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Audit Logs Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>\n            Audit Log Entries\n            {auditLogsData?.pagination && (\n              <span className=\"text-sm font-normal text-gray-500 ml-2\">\n                ({auditLogsData.pagination.total} total)\n              </span>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <RefreshCw className=\"h-8 w-8 animate-spin text-gray-400\" />\n              <span className=\"ml-2 text-gray-600\">Loading audit logs...</span>\n            </div>\n          ) : auditLogsData?.data && auditLogsData.data.length > 0 ? (\n            <>\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Timestamp</TableHead>\n                      <TableHead>User</TableHead>\n                      <TableHead>Operation</TableHead>\n                      <TableHead>Table</TableHead>\n                      <TableHead>IP Address</TableHead>\n                      <TableHead>Browser</TableHead>\n                      <TableHead>Values</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {auditLogsData.data.map((log) => (\n                      <TableRow key={log.id}>\n                        <TableCell className=\"font-mono text-sm\">\n                          {formatDateTime(log.created_at)}\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{log.user_name || 'Unknown'}</p>\n                            <p className=\"text-sm text-gray-500\">{log.user_email || 'N/A'}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getOperationColor(log.display_operation || log.operation_type)}>\n                            {log.display_operation || formatOperationType(log.operation_type)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <code className=\"text-sm bg-gray-100 px-2 py-1 rounded\">\n                            {formatTableName(log.table_name)}\n                          </code>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm font-mono\">\n                            {log.ip_address || 'N/A'}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {log.browser_info || 'Unknown'}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"max-w-xs\">\n                            {(log.old_values || log.new_values) ? (\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"text-sm text-blue-600 hover:text-blue-800 border-blue-200 hover:border-blue-300\"\n                                    onClick={() => setSelectedLogValues({\n                                      id: log.id,\n                                      oldValues: log.old_values,\n                                      newValues: log.new_values,\n                                      operation: log.display_operation || log.operation_type,\n                                      table: log.table_name,\n                                      timestamp: log.created_at\n                                    })}\n                                  >\n                                    View Values\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                                  <DialogHeader>\n                                    <DialogTitle className=\"flex items-center gap-2\">\n                                      <FileText className=\"h-5 w-5\" />\n                                      Audit Log Values - {log.display_operation || log.operation_type}\n                                    </DialogTitle>\n                                    <div className=\"text-sm text-gray-600\">\n                                      <p>Table: <code className=\"bg-gray-100 px-1 rounded\">{log.table_name}</code></p>\n                                      <p>Timestamp: {formatDateTime(log.created_at)}</p>\n                                      <p>User: {log.user_email || 'Unknown'}</p>\n                                    </div>\n                                  </DialogHeader>\n\n                                  <div className=\"space-y-6 mt-4\">\n                                    {/* Old Values Section */}\n                                    <div>\n                                      <h3 className=\"text-lg font-semibold text-red-700 mb-3 flex items-center gap-2\">\n                                        <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                                        Old Values\n                                      </h3>\n                                      {log.old_values ? (\n                                        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                                          <pre className=\"text-sm text-red-800 whitespace-pre-wrap overflow-auto\">\n                                            {JSON.stringify(log.old_values, null, 2)}\n                                          </pre>\n                                        </div>\n                                      ) : (\n                                        <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 text-center\">\n                                          <p className=\"text-gray-500 italic\">No old values</p>\n                                        </div>\n                                      )}\n                                    </div>\n\n                                    {/* New Values Section */}\n                                    <div>\n                                      <h3 className=\"text-lg font-semibold text-green-700 mb-3 flex items-center gap-2\">\n                                        <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                                        New Values\n                                      </h3>\n                                      {log.new_values ? (\n                                        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                                          <pre className=\"text-sm text-green-800 whitespace-pre-wrap overflow-auto\">\n                                            {JSON.stringify(log.new_values, null, 2)}\n                                          </pre>\n                                        </div>\n                                      ) : (\n                                        <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 text-center\">\n                                          <p className=\"text-gray-500 italic\">No new values</p>\n                                        </div>\n                                      )}\n                                    </div>\n\n                                    {/* Changed Fields Section (if available) */}\n                                    {log.changed_fields && log.changed_fields.length > 0 && (\n                                      <div>\n                                        <h3 className=\"text-lg font-semibold text-blue-700 mb-3 flex items-center gap-2\">\n                                          <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                                          Changed Fields\n                                        </h3>\n                                        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                                          <div className=\"space-y-2\">\n                                            {log.changed_fields.map((change: any, index: number) => (\n                                              <div key={index} className=\"border-b border-blue-200 pb-2 last:border-b-0\">\n                                                <p className=\"font-medium text-blue-800\">{change.field}</p>\n                                                <div className=\"grid grid-cols-2 gap-4 mt-1\">\n                                                  <div>\n                                                    <span className=\"text-xs text-red-600 font-medium\">Old:</span>\n                                                    <p className=\"text-sm text-red-700 bg-red-100 p-1 rounded\">\n                                                      {JSON.stringify(change.oldValue)}\n                                                    </p>\n                                                  </div>\n                                                  <div>\n                                                    <span className=\"text-xs text-green-600 font-medium\">New:</span>\n                                                    <p className=\"text-sm text-green-700 bg-green-100 p-1 rounded\">\n                                                      {JSON.stringify(change.newValue)}\n                                                    </p>\n                                                  </div>\n                                                </div>\n                                              </div>\n                                            ))}\n                                          </div>\n                                        </div>\n                                      </div>\n                                    )}\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            ) : (\n                              <span className=\"text-gray-400 text-sm\">No values</span>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Pagination */}\n              {auditLogsData.pagination && (\n                <div className=\"flex items-center justify-between mt-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    Showing {auditLogsData.pagination.offset + 1} to{' '}\n                    {Math.min(\n                      auditLogsData.pagination.offset + auditLogsData.pagination.limit,\n                      auditLogsData.pagination.total\n                    )}{' '}\n                    of {auditLogsData.pagination.total} entries\n                  </p>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handlePagination('prev')}\n                      disabled={auditLogsData.pagination.offset === 0}\n                    >\n                      Previous\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handlePagination('next')}\n                      disabled={!auditLogsData.pagination.hasMore}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"text-center py-8\">\n              <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Audit Logs Found</h3>\n              <p className=\"text-gray-600\">\n                No audit log entries match your current filters.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AuditLogs;\n"],"names":["getAuditLogs","filters","params","key","value","axiosInstance","error","message","_b","_a","toast","getAuditLogStats","exportAuditLogs","res","cleanupOldAuditLogs","days","formatOperationType","operationType","formatTableName","tableName","word","getOperationColor","AuditLogs","setFilters","useState","searchTerm","setSearchTerm","showFilters","setShowFilters","dateRange","setDateRange","handleDateRangeSelect","range","isExporting","setIsExporting","isCleaningUp","setIsCleaningUp","selectedLogValues","setSelectedLogValues","auditLogsData","isLoading","refetch","useQuery","statsData","useEffect","delayedSearch","prev","user_email","rest","format","handleFilterChange","handleExport","result","handleCleanup","handlePagination","direction","currentOffset","limit","formatDateTime","dateString","jsx","Card","CardContent","jsxs","AlertCircle","Button","RefreshCw","cn","Download","Trash2","FileText","sum","stat","User","Database","Clock","CardHeader","CardTitle","Filter","Search","Input","e","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Popover","PopoverTrigger","CalendarIcon","Fragment","PopoverContent","Calendar","Table","TableHeader","TableRow","TableHead","TableBody","log","TableCell","Badge","Dialog","DialogTrigger","DialogContent","DialogHeader","DialogTitle","change","index"],"mappings":"g2BA2FsB,eAAAA,GAAaC,EAA2B,GAA+B,SACvF,GAAA,CACI,MAAAC,EAAS,IAAI,gBAEZ,cAAA,QAAQD,CAAO,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACrBA,GAAU,MAAQA,IAAU,IACrDF,EAAO,OAAOC,EAAK,OAAOC,CAAK,CAAC,CAClC,CACD,GAEW,MAAMC,EAAc,IAAI,mBAAmBH,EAAO,SAAU,CAAA,EAAE,GAC/D,WACJI,EAAY,CACX,QAAA,MAAM,6BAA8BA,CAAK,EACjD,MAAMC,IAAUC,GAAAC,EAAAH,EAAM,WAAN,YAAAG,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,6BACjDE,MAAAA,EAAM,MAAMH,CAAO,EACbD,CAAA,CAEV,CAgBsB,eAAAK,GAAiBV,EAAoC,GAAwD,SAC7H,GAAA,CACI,MAAAC,EAAS,IAAI,gBAEZ,cAAA,QAAQD,CAAO,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACrBA,GAAU,MAAQA,IAAU,IACrDF,EAAO,OAAOC,EAAK,OAAOC,CAAK,CAAC,CAClC,CACD,GAEW,MAAMC,EAAc,IAAI,yBAAyBH,EAAO,SAAU,CAAA,EAAE,GACrE,WACJI,EAAY,CACX,QAAA,MAAM,kCAAmCA,CAAK,EACtD,MAAMC,IAAUC,GAAAC,EAAAH,EAAM,WAAN,YAAAG,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,uCACjDE,MAAAA,EAAM,MAAMH,CAAO,EACbD,CAAA,CAEV,CAGsB,eAAAM,GAAgBX,EAA2B,GAA2B,SACtF,GAAA,CACI,MAAAC,EAAS,IAAI,gBAEZ,OAAA,QAAQD,CAAO,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACrBA,GAAU,MAAQA,IAAU,IACrDF,EAAO,OAAOC,EAAK,OAAOC,CAAK,CAAC,CAClC,CACD,EAEK,MAAAS,EAAM,MAAMR,EAAc,IAAI,0BAA0BH,EAAO,SAAU,CAAA,EAAE,EACjFQ,OAAAA,EAAM,QAAQ,kCAAkC,EACzCG,EAAI,WACJP,EAAY,CACX,QAAA,MAAM,8BAA+BA,CAAK,EAClD,MAAMC,IAAUC,GAAAC,EAAAH,EAAM,WAAN,YAAAG,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,8BACjDE,MAAAA,EAAM,MAAMH,CAAO,EACbD,CAAA,CAEV,CA8BsB,eAAAQ,GAAoBC,EAAe,GAAqF,SACxI,GAAA,CACF,MAAMF,EAAM,MAAMR,EAAc,OAAO,gCAAgCU,CAAI,EAAE,EACvEL,OAAAA,EAAA,QAAQ,oCAAoCK,CAAI,OAAO,EACtDF,EAAI,WACJP,EAAY,CACX,QAAA,MAAM,gCAAiCA,CAAK,EACpD,MAAMC,IAAUC,GAAAC,EAAAH,EAAM,WAAN,YAAAG,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,+BACjDE,MAAAA,EAAM,MAAMH,CAAO,EACbD,CAAA,CAEV,CAeO,SAASU,GAAoBC,EAA+B,CAO1D,MANiC,CACtC,OAAU,UACV,OAAU,UACV,OAAU,UACV,KAAQ,QACV,EACeA,CAAa,GAAKA,CACnC,CAGO,SAASC,GAAgBC,EAA2B,CACzD,OAAOA,EACJ,MAAM,GAAG,EACT,IAAIC,GAAQA,EAAK,OAAO,CAAC,EAAE,cAAgBA,EAAK,MAAM,CAAC,CAAC,EACxD,KAAK,GAAG,CACb,CAGO,SAASC,GAAkBJ,EAA+B,CASxD,MARkC,CACvC,OAAU,6BACV,OAAU,2BACV,OAAU,yBACV,KAAQ,2BACR,MAAS,iCACT,OAAU,8BACZ,EACgBA,CAAa,GAAK,0BACpC,CC5MA,MAAMK,GAAsB,IAAM,CAChC,KAAM,CAACrB,EAASsB,CAAU,EAAIC,WAA0B,CACtD,MAAO,GACP,OAAQ,EACR,QAAS,aACT,WAAY,MAAA,CACb,EACK,CAACC,EAAYC,CAAa,EAAIF,EAAAA,SAAS,EAAE,EACzC,CAACG,EAAaC,CAAc,EAAIJ,EAAAA,SAAS,EAAK,EAC9C,CAACK,EAAWC,CAAY,EAAIN,WAAqC,CAAE,KAAM,OAAW,GAAI,OAAW,EAGnGO,EAAyBC,GAAkD,CAC/EF,EAAaE,GAAS,CAAE,KAAM,OAAW,GAAI,OAAW,CAC1D,EACM,CAACC,EAAaC,CAAc,EAAIV,EAAAA,SAAS,EAAK,EAC9C,CAACW,EAAcC,CAAe,EAAIZ,EAAAA,SAAS,EAAK,EAChD,CAACa,GAAmBC,CAAoB,EAAId,EAAAA,SAOxC,IAAI,EAGR,CACJ,KAAMe,EACN,UAAAC,EACA,MAAAlC,EACA,QAAAmC,GACEC,EAAS,CACX,SAAU,CAAC,YAAazC,CAAO,EAC/B,QAAS,IAAMD,GAAaC,CAAO,EACnC,gBAAiB,EAAI,GAAK,IAC1B,UAAW,GAAK,IAChB,OAAQ,EAAI,GAAK,GAAA,CAClB,EAGK,CAAE,KAAM0C,CAAU,EAAID,EAAS,CACnC,SAAU,CAAC,gBAAiBzC,CAAO,EACnC,QAAS,IAAMU,GAAiBV,CAAO,CAAA,CACxC,EAGD2C,EAAAA,UAAU,IAAM,CACR,MAAAC,EAAgB,WAAW,IAAM,CAExBtB,EADTE,EACSqB,IAAS,CAAE,GAAGA,EAAM,WAAYrB,EAAY,OAAQ,IAE5CqB,GAAA,CACjB,KAAM,CAAE,WAAAC,EAAY,GAAGC,CAAA,EAASF,EAChC,MAAO,CAAE,GAAGE,EAAM,OAAQ,CAAE,CAAA,CAJqC,GAOpE,GAAG,EAEC,MAAA,IAAM,aAAaH,CAAa,CAAA,EACtC,CAACpB,CAAU,CAAC,EAGfmB,EAAAA,UAAU,IAAM,EACVf,EAAU,MAAQA,EAAU,KAC9BN,EAAoBuB,IAAA,CAClB,GAAGA,EACH,WAAYjB,EAAU,KAAOoB,EAAOpB,EAAU,KAAM,YAAY,EAAI,OACpE,SAAUA,EAAU,GAAKoB,EAAOpB,EAAU,GAAI,YAAY,EAAI,OAC9D,OAAQ,CAAA,EACR,CACJ,EACC,CAACA,CAAS,CAAC,EAER,MAAAqB,EAAqB,CAAC/C,EAA4BC,IAAe,CAC1DmB,EAAAuB,IAAS,CAAE,GAAGA,EAAM,CAAC3C,CAAG,EAAGC,EAAO,OAAQ,CAAA,EAAI,CAC3D,EAEM+C,EAAe,SAAY,CAC/BjB,EAAe,EAAI,EACf,GAAA,CACI,MAAAkB,EAAS,MAAMxC,GAAgBX,CAAO,EACtCS,EAAA,QAAQ,YAAY0C,EAAO,KAAK,WAAW,eAAeA,EAAO,KAAK,QAAQ,EAAE,QAC/E9C,EAAO,CACN,QAAA,MAAM,iBAAkBA,CAAK,CAAA,QACrC,CACA4B,EAAe,EAAK,CAAA,CAExB,EAEMmB,EAAgB,SAAY,CAChCjB,EAAgB,EAAI,EAChB,GAAA,CACI,MAAAgB,EAAS,MAAMtC,GAAoB,EAAE,EAC3CJ,EAAM,QAAQ,cAAc0C,EAAO,KAAK,YAAY,wBAAwB,EACpEX,EAAA,QACDnC,EAAO,CACN,QAAA,MAAM,kBAAmBA,CAAK,CAAA,QACtC,CACA8B,EAAgB,EAAK,CAAA,CAEzB,EAEMkB,EAAoBC,GAA+B,CACjD,MAAAC,EAAgBvD,EAAQ,QAAU,EAClCwD,EAAQxD,EAAQ,OAAS,GAG7BsB,EADEgC,IAAc,WACI,CAAE,GAAGT,EAAM,OAAQU,EAAgBC,IAE5CX,IAAS,CAAE,GAAGA,EAAM,OAAQ,KAAK,IAAI,EAAGU,EAAgBC,CAAK,CAAI,EAFb,CAInE,EAEMC,EAAkBC,GACfV,EAAO,IAAI,KAAKU,CAAU,EAAG,uBAAuB,EAQ7D,OAAIrD,EAECsD,EAAA,IAAA,MAAA,CAAI,UAAU,MACb,SAACA,EAAA,IAAAC,EAAA,CACC,SAACD,EAAAA,IAAAE,EAAA,CAAY,UAAU,wCACrB,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,cACb,SAAA,CAACH,EAAAA,IAAAI,EAAA,CAAY,UAAU,qCAAsC,CAAA,EAC5DJ,EAAA,IAAA,KAAA,CAAG,UAAU,6BAA6B,SAAwB,2BAAA,EAClEA,EAAA,IAAA,IAAA,CAAE,UAAU,qBAAqB,SAA4C,+CAAA,EAC7EG,EAAA,KAAAE,EAAA,CAAO,QAAS,IAAMxB,IACrB,SAAA,CAACmB,EAAAA,IAAAM,EAAA,CAAU,UAAU,cAAe,CAAA,EAAE,OAAA,CAExC,CAAA,CAAA,EACF,CAAA,CACF,CACF,CAAA,EACF,EAKFH,EAAA,KAAC,MAAI,CAAA,UAAU,gBAEb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACH,EAAA,IAAA,KAAA,CAAG,UAAU,qBAAqB,SAAU,aAAA,EAC5CA,EAAA,IAAA,IAAA,CAAE,UAAU,qBAAqB,SAElC,yCAAA,CAAA,CAAA,EACF,EACAG,EAAAA,KAAC,MAAI,CAAA,UAAU,0BACb,SAAA,CAAAA,EAAA,KAACE,EAAA,CACC,QAAQ,UACR,QAAS,IAAMxB,EAAQ,EACvB,SAAUD,EAEV,SAAA,CAAAoB,MAACM,GAAU,UAAWC,GAAG,eAAgB3B,GAAa,cAAc,EAAG,EAAE,SAAA,CAAA,CAE3E,EACAuB,EAAA,KAACE,EAAA,CACC,QAAQ,UACR,QAASd,EACT,SAAUlB,EAEV,SAAA,CAAC2B,EAAAA,IAAAQ,EAAA,CAAS,UAAU,cAAe,CAAA,EAClCnC,EAAc,eAAiB,QAAA,CAAA,CAClC,EACA8B,EAAA,KAACE,EAAA,CACC,QAAQ,UACR,QAASZ,EACT,SAAUlB,EAEV,SAAA,CAACyB,EAAAA,IAAAS,EAAA,CAAO,UAAU,cAAe,CAAA,EAChClC,EAAe,cAAgB,aAAA,CAAA,CAAA,CAClC,CACF,CAAA,CAAA,EACF,GAGCQ,GAAA,YAAAA,EAAW,OACToB,OAAA,MAAA,CAAI,UAAU,wCACb,SAAA,CAACH,EAAA,IAAAC,EAAA,CACC,eAACC,EAAY,CAAA,UAAU,MACrB,SAACC,EAAA,KAAA,MAAA,CAAI,UAAU,0BACb,SAAA,CAACH,EAAAA,IAAAU,EAAA,CAAS,UAAU,uBAAwB,CAAA,SAC3C,MACC,CAAA,SAAA,CAACV,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAAgB,mBAAA,EACpDA,EAAA,IAAA,IAAA,CAAE,UAAU,qBACV,WAAU,KAAK,eAAe,OAAO,CAACW,EAAKC,IAASD,EAAMC,EAAK,MAAO,CAAC,CAC1E,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EACAZ,EAAA,IAACC,GACC,SAACD,EAAAA,IAAAE,EAAA,CAAY,UAAU,MACrB,SAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,0BACb,SAAA,CAACH,EAAAA,IAAAa,EAAA,CAAK,UAAU,wBAAyB,CAAA,SACxC,MACC,CAAA,SAAA,CAACb,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAAY,eAAA,QAChD,IAAE,CAAA,UAAU,qBAAsB,SAAUjB,EAAA,KAAK,UAAU,MAAO,CAAA,CAAA,CACrE,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EACAiB,EAAA,IAACC,GACC,SAACD,EAAAA,IAAAE,EAAA,CAAY,UAAU,MACrB,SAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,0BACb,SAAA,CAACH,EAAAA,IAAAc,EAAA,CAAS,UAAU,yBAA0B,CAAA,SAC7C,MACC,CAAA,SAAA,CAACd,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAAe,kBAAA,QACnD,IAAE,CAAA,UAAU,qBAAsB,SAAUjB,EAAA,KAAK,WAAW,MAAO,CAAA,CAAA,CACtE,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EACAiB,EAAA,IAACC,GACC,SAACD,EAAAA,IAAAE,EAAA,CAAY,UAAU,MACrB,SAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,0BACb,SAAA,CAACH,EAAAA,IAAAe,EAAA,CAAM,UAAU,yBAA0B,CAAA,SAC1C,MACC,CAAA,SAAA,CAACf,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAAY,eAAA,QAChD,IAAE,CAAA,UAAU,qBAAsB,SAAUjB,EAAA,KAAK,cAAc,MAAO,CAAA,CAAA,CACzE,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CAAA,EACF,SAIDkB,EACC,CAAA,SAAA,CAAAD,MAACgB,EACC,CAAA,SAAAb,EAAAA,KAAC,MAAI,CAAA,UAAU,oCACb,SAAA,CAACA,EAAAA,KAAAc,EAAA,CAAU,UAAU,0BACnB,SAAA,CAACjB,EAAAA,IAAAkB,EAAA,CAAO,UAAU,SAAU,CAAA,EAAE,kBAAA,EAEhC,EACAf,EAAA,KAACE,EAAA,CACC,QAAQ,QACR,KAAK,KACL,QAAS,IAAMrC,EAAe,CAACD,CAAW,EAEzC,SAAA,CAAAA,EAAc,OAAS,OAAO,mBAAA,CAAA,CAAA,CACjC,CAAA,CACF,CACF,CAAA,EACAoC,EAAAA,KAACD,EAAY,CAAA,UAAU,YAErB,SAAA,CAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,WACb,SAAA,CAACH,EAAAA,IAAAmB,EAAA,CAAO,UAAU,0EAA2E,CAAA,EAC7FnB,EAAA,IAACoB,EAAA,CACC,YAAY,0BACZ,MAAOvD,EACP,SAAWwD,GAAMvD,EAAcuD,EAAE,OAAO,KAAK,EAC7C,UAAU,OAAA,CAAA,CACZ,EACF,EAGCtD,GACCoC,EAAA,KAAC,MAAI,CAAA,UAAU,sDACb,SAAA,CAAAA,EAAA,KAACmB,GAAA,CACC,MAAOjF,EAAQ,gBAAkB,GACjC,cAAgBG,GAAU8C,EAAmB,iBAAkB9C,GAAS,MAAS,EAEjF,SAAA,CAAAwD,MAACuB,GACC,CAAA,SAAAvB,EAAA,IAACwB,GAAY,CAAA,YAAY,gBAAiB,CAAA,EAC5C,SACCC,GACC,CAAA,SAAA,CAACzB,EAAA,IAAA0B,EAAA,CAAW,MAAM,GAAG,SAAc,iBAAA,EAClC1B,EAAA,IAAA0B,EAAA,CAAW,MAAM,SAAS,SAAM,SAAA,EAChC1B,EAAA,IAAA0B,EAAA,CAAW,MAAM,SAAS,SAAM,SAAA,EAChC1B,EAAA,IAAA0B,EAAA,CAAW,MAAM,SAAS,SAAM,SAAA,EAChC1B,EAAA,IAAA0B,EAAA,CAAW,MAAM,OAAO,SAAI,MAAA,CAAA,CAAA,CAC/B,CAAA,CAAA,CAAA,CACF,EAEA1B,EAAA,IAACoB,EAAA,CACC,YAAY,gBACZ,MAAO/E,EAAQ,YAAc,GAC7B,SAAWgF,GAAM/B,EAAmB,aAAc+B,EAAE,OAAO,OAAS,MAAS,CAAA,CAC/E,EAEArB,EAAA,IAACoB,EAAA,CACC,YAAY,eACZ,MAAO/E,EAAQ,WAAa,GAC5B,SAAWgF,GAAM/B,EAAmB,YAAa+B,EAAE,OAAO,OAAS,MAAS,CAAA,CAC9E,SAECM,GACC,CAAA,SAAA,CAAC3B,EAAAA,IAAA4B,GAAA,CAAe,QAAO,GACrB,SAAAzB,EAAAA,KAACE,GAAO,QAAQ,UAAU,UAAU,sCAClC,SAAA,CAACL,EAAAA,IAAA6B,GAAA,CAAa,UAAU,cAAe,CAAA,EACtC5D,EAAU,KACTA,EAAU,GAELkC,EAAAA,KAAA2B,EAAAA,SAAA,CAAA,SAAA,CAAOzC,EAAApB,EAAU,KAAM,WAAW,EAAE,KAAG,IACvCoB,EAAOpB,EAAU,GAAI,WAAW,CACnC,CAAA,CAAA,EAEAoB,EAAOpB,EAAU,KAAM,WAAW,EAGpC+B,EAAAA,IAAC,QAAK,SAAiB,mBAAA,CAAA,CAAA,CAAA,CAE3B,CACF,CAAA,EACCA,EAAA,IAAA+B,GAAA,CAAe,UAAU,aAAa,MAAM,QAC3C,SAAA/B,EAAA,IAACgC,GAAA,CACC,aAAY,GACZ,KAAK,QACL,aAAc/D,EAAU,KACxB,SAAUA,EAAU,KAAOA,EAAmB,OAC9C,SAAUE,EACV,eAAgB,CAAA,CAAA,CAEpB,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,SAGC8B,EACC,CAAA,SAAA,CAACD,EAAA,IAAAgB,EAAA,CACC,gBAACC,EAAU,CAAA,SAAA,CAAA,qBAERtC,GAAA,YAAAA,EAAe,aACbwB,OAAA,OAAA,CAAK,UAAU,yCAAyC,SAAA,CAAA,IACrDxB,EAAc,WAAW,MAAM,SAAA,CACnC,CAAA,CAAA,CAAA,CAEJ,CACF,CAAA,QACCuB,EACE,CAAA,SAAAtB,EACEuB,OAAA,MAAA,CAAI,UAAU,wCACb,SAAA,CAACH,EAAAA,IAAAM,EAAA,CAAU,UAAU,oCAAqC,CAAA,EACzDN,EAAA,IAAA,OAAA,CAAK,UAAU,qBAAqB,SAAqB,uBAAA,CAAA,CAAA,CAAA,CAC5D,EACErB,GAAA,MAAAA,EAAe,MAAQA,EAAc,KAAK,OAAS,EAEnDwB,EAAAA,KAAA2B,EAAA,SAAA,CAAA,SAAA,CAAA9B,MAAC,MAAI,CAAA,UAAU,oBACb,SAAAG,EAAA,KAAC8B,GACC,CAAA,SAAA,CAACjC,EAAA,IAAAkC,GAAA,CACC,gBAACC,EACC,CAAA,SAAA,CAAAnC,EAAAA,IAACoC,GAAU,SAAS,WAAA,CAAA,EACpBpC,EAAAA,IAACoC,GAAU,SAAI,MAAA,CAAA,EACfpC,EAAAA,IAACoC,GAAU,SAAS,WAAA,CAAA,EACpBpC,EAAAA,IAACoC,GAAU,SAAK,OAAA,CAAA,EAChBpC,EAAAA,IAACoC,GAAU,SAAU,YAAA,CAAA,EACrBpC,EAAAA,IAACoC,GAAU,SAAO,SAAA,CAAA,EAClBpC,EAAAA,IAACoC,GAAU,SAAM,QAAA,CAAA,CAAA,CAAA,CACnB,CACF,CAAA,EACApC,EAAAA,IAACqC,IACE,SAAc1D,EAAA,KAAK,IAAK2D,UACtBH,EACC,CAAA,SAAA,CAAAnC,MAACuC,GAAU,UAAU,oBAClB,SAAezC,EAAAwC,EAAI,UAAU,EAChC,EACAtC,EAAA,IAACuC,EACC,CAAA,SAAApC,EAAAA,KAAC,MACC,CAAA,SAAA,CAAAH,MAAC,IAAE,CAAA,UAAU,cAAe,SAAAsC,EAAI,WAAa,UAAU,QACtD,IAAE,CAAA,UAAU,wBAAyB,SAAAA,EAAI,YAAc,KAAM,CAAA,CAAA,CAAA,CAChE,CACF,CAAA,QACCC,EACC,CAAA,SAAAvC,EAAA,IAACwC,GAAM,CAAA,UAAW/E,GAAkB6E,EAAI,mBAAqBA,EAAI,cAAc,EAC5E,SAAIA,EAAA,mBAAqBlF,GAAoBkF,EAAI,cAAc,CAClE,CAAA,EACF,EACAtC,EAAAA,IAACuC,EACC,CAAA,SAAAvC,EAAA,IAAC,OAAK,CAAA,UAAU,wCACb,SAAgB1C,GAAAgF,EAAI,UAAU,CAAA,CACjC,CACF,CAAA,EACAtC,EAAAA,IAACuC,GACC,SAACvC,EAAA,IAAA,OAAA,CAAK,UAAU,oBACb,SAAAsC,EAAI,YAAc,KAAA,CACrB,CACF,CAAA,EACAtC,EAAAA,IAACuC,GACC,SAACvC,EAAA,IAAA,OAAA,CAAK,UAAU,UACb,SAAAsC,EAAI,cAAgB,SAAA,CACvB,CACF,CAAA,EACAtC,EAAA,IAACuC,EACC,CAAA,SAAAvC,EAAA,IAAC,MAAI,CAAA,UAAU,WACX,SAAAsC,EAAI,YAAcA,EAAI,WACtBnC,EAAAA,KAACsC,GACC,CAAA,SAAA,CAACzC,EAAAA,IAAA0C,GAAA,CAAc,QAAO,GACpB,SAAA1C,EAAA,IAACK,EAAA,CACC,QAAQ,UACR,KAAK,KACL,UAAU,kFACV,QAAS,IAAM3B,EAAqB,CAClC,GAAI4D,EAAI,GACR,UAAWA,EAAI,WACf,UAAWA,EAAI,WACf,UAAWA,EAAI,mBAAqBA,EAAI,eACxC,MAAOA,EAAI,WACX,UAAWA,EAAI,UAAA,CAChB,EACF,SAAA,aAAA,CAAA,EAGH,EACAnC,EAAAA,KAACwC,GAAc,CAAA,UAAU,yCACvB,SAAA,CAAAxC,OAACyC,GACC,CAAA,SAAA,CAACzC,EAAAA,KAAA0C,GAAA,CAAY,UAAU,0BACrB,SAAA,CAAC7C,EAAAA,IAAAU,EAAA,CAAS,UAAU,SAAU,CAAA,EAAE,sBACZ4B,EAAI,mBAAqBA,EAAI,cAAA,EACnD,EACAnC,EAAAA,KAAC,MAAI,CAAA,UAAU,wBACb,SAAA,CAAAA,OAAC,IAAE,CAAA,SAAA,CAAA,UAAQH,EAAA,IAAA,OAAA,CAAK,UAAU,2BAA4B,WAAI,UAAW,CAAA,CAAA,EAAO,SAC3E,IAAE,CAAA,SAAA,CAAA,cAAYF,EAAewC,EAAI,UAAU,CAAA,EAAE,SAC7C,IAAE,CAAA,SAAA,CAAA,SAAOA,EAAI,YAAc,SAAA,CAAU,CAAA,CAAA,CACxC,CAAA,CAAA,EACF,EAEAnC,EAAAA,KAAC,MAAI,CAAA,UAAU,iBAEb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACA,EAAAA,KAAA,KAAA,CAAG,UAAU,kEACZ,SAAA,CAACH,EAAAA,IAAA,MAAA,CAAI,UAAU,iCAAkC,CAAA,EAAM,YAAA,EAEzD,EACCsC,EAAI,WACFtC,MAAA,MAAA,CAAI,UAAU,iDACb,SAACA,EAAAA,IAAA,MAAA,CAAI,UAAU,yDACZ,SAAK,KAAA,UAAUsC,EAAI,WAAY,KAAM,CAAC,CACzC,CAAA,EACF,EAEAtC,EAAA,IAAC,MAAI,CAAA,UAAU,+DACb,SAAAA,EAAA,IAAC,IAAE,CAAA,UAAU,uBAAuB,SAAA,eAAA,CAAa,CACnD,CAAA,CAAA,EAEJ,SAGC,MACC,CAAA,SAAA,CAACG,EAAAA,KAAA,KAAA,CAAG,UAAU,oEACZ,SAAA,CAACH,EAAAA,IAAA,MAAA,CAAI,UAAU,mCAAoC,CAAA,EAAM,YAAA,EAE3D,EACCsC,EAAI,WACFtC,MAAA,MAAA,CAAI,UAAU,qDACb,SAACA,EAAAA,IAAA,MAAA,CAAI,UAAU,2DACZ,SAAK,KAAA,UAAUsC,EAAI,WAAY,KAAM,CAAC,CACzC,CAAA,EACF,EAEAtC,EAAA,IAAC,MAAI,CAAA,UAAU,+DACb,SAAAA,EAAA,IAAC,IAAE,CAAA,UAAU,uBAAuB,SAAA,eAAA,CAAa,CACnD,CAAA,CAAA,EAEJ,EAGCsC,EAAI,gBAAkBA,EAAI,eAAe,OAAS,UAChD,MACC,CAAA,SAAA,CAACnC,EAAAA,KAAA,KAAA,CAAG,UAAU,mEACZ,SAAA,CAACH,EAAAA,IAAA,MAAA,CAAI,UAAU,kCAAmC,CAAA,EAAM,gBAAA,EAE1D,QACC,MAAI,CAAA,UAAU,mDACb,SAAAA,EAAAA,IAAC,OAAI,UAAU,YACZ,SAAIsC,EAAA,eAAe,IAAI,CAACQ,EAAaC,IACnC5C,OAAA,MAAA,CAAgB,UAAU,gDACzB,SAAA,CAAAH,EAAA,IAAC,IAAE,CAAA,UAAU,4BAA6B,SAAA8C,EAAO,MAAM,EACvD3C,EAAAA,KAAC,MAAI,CAAA,UAAU,8BACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACH,EAAA,IAAA,OAAA,CAAK,UAAU,mCAAmC,SAAI,OAAA,EACvDA,MAAC,KAAE,UAAU,8CACV,cAAK,UAAU8C,EAAO,QAAQ,CACjC,CAAA,CAAA,EACF,SACC,MACC,CAAA,SAAA,CAAC9C,EAAA,IAAA,OAAA,CAAK,UAAU,qCAAqC,SAAI,OAAA,EACzDA,MAAC,KAAE,UAAU,kDACV,cAAK,UAAU8C,EAAO,QAAQ,CACjC,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,GAfQC,CAgBV,CACD,CAAA,CACH,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAEC/C,MAAA,OAAA,CAAK,UAAU,wBAAwB,SAAA,YAAS,EAErD,CACF,CAAA,CAAA,GA9IasC,EAAI,EA+InB,CACD,CACH,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EAGC3D,EAAc,YACZwB,OAAA,MAAA,CAAI,UAAU,yCACb,SAAA,CAACA,EAAAA,KAAA,IAAA,CAAE,UAAU,wBAAwB,SAAA,CAAA,WAC1BxB,EAAc,WAAW,OAAS,EAAE,MAAI,IAChD,KAAK,IACJA,EAAc,WAAW,OAASA,EAAc,WAAW,MAC3DA,EAAc,WAAW,KAC3B,EAAG,IAAI,MACHA,EAAc,WAAW,MAAM,UAAA,EACrC,EACAwB,EAAAA,KAAC,MAAI,CAAA,UAAU,0BACb,SAAA,CAAAH,EAAA,IAACK,EAAA,CACC,QAAQ,UACR,KAAK,KACL,QAAS,IAAMX,EAAiB,MAAM,EACtC,SAAUf,EAAc,WAAW,SAAW,EAC/C,SAAA,UAAA,CAED,EACAqB,EAAA,IAACK,EAAA,CACC,QAAQ,UACR,KAAK,KACL,QAAS,IAAMX,EAAiB,MAAM,EACtC,SAAU,CAACf,EAAc,WAAW,QACrC,SAAA,MAAA,CAAA,CAED,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,EAEAwB,EAAAA,KAAC,MAAI,CAAA,UAAU,mBACb,SAAA,CAACH,EAAAA,IAAAU,EAAA,CAAS,UAAU,sCAAuC,CAAA,EAC1DV,EAAA,IAAA,KAAA,CAAG,UAAU,6BAA6B,SAAmB,sBAAA,EAC7DA,EAAA,IAAA,IAAA,CAAE,UAAU,gBAAgB,SAE7B,kDAAA,CAAA,CAAA,CAAA,CACF,CAEJ,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ"}