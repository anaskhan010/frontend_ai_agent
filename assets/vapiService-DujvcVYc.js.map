{"version":3,"file":"vapiService-DujvcVYc.js","sources":["../../src/api/services/vapi/vapiService.ts"],"sourcesContent":["import axiosInstance from \"../../axios/axiosInstance\";\nimport { toast } from \"sonner\";\nimport { Workflow, WorkflowNode, WorkflowEdge } from \"@/types/api\";\n\n// VAPI API Base Configuration\nconst VAPI_BASE_URL = import.meta.env.VITE_VAPI_BASE_URL || \"https://api.vapi.ai\";\n\n// VAPI Workflow API Service\nexport class VapiWorkflowService {\n  // Create workflow in VAPI\n  static async createWorkflow(workflowData: Partial<Workflow>): Promise<Workflow> {\n    try {\n      const response = await axiosInstance.post(\"/api/workflows/vapi\", workflowData);\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error creating VAPI workflow:\", error);\n      const message = error.response?.data?.message || \"Failed to create workflow\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // Get workflow from VAPI\n  static async getWorkflow(workflowId: string): Promise<Workflow> {\n    try {\n      const response = await axiosInstance.get(`/api/workflows/vapi/${workflowId}`);\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error fetching VAPI workflow:\", error);\n      const message = error.response?.data?.message || \"Failed to fetch workflow\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // Update workflow in VAPI\n  static async updateWorkflow(workflowId: string, workflowData: Partial<Workflow>): Promise<Workflow> {\n    try {\n      const response = await axiosInstance.patch(`/api/workflows/vapi/${workflowId}`, workflowData);\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error updating VAPI workflow:\", error);\n      const message = error.response?.data?.message || \"Failed to update workflow\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // Delete workflow from VAPI\n  static async deleteWorkflow(workflowId: string): Promise<void> {\n    try {\n      await axiosInstance.delete(`/api/workflows/vapi/${workflowId}`);\n      toast.success(\"Workflow deleted successfully\");\n    } catch (error: any) {\n      console.error(\"Error deleting VAPI workflow:\", error);\n      const message = error.response?.data?.message || \"Failed to delete workflow\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // List all workflows from VAPI\n  static async listWorkflows(params?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n  }): Promise<{ workflows: Workflow[]; total: number; page: number; limit: number }> {\n    try {\n      const response = await axiosInstance.get(\"/api/workflows/vapi\", { params });\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error listing VAPI workflows:\", error);\n      const message = error.response?.data?.message || \"Failed to list workflows\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // Create a call with workflow\n  static async createCall(callData: {\n    workflowId: string;\n    phoneNumberId?: string;\n    customer: {\n      number: string;\n      name?: string;\n    };\n    metadata?: any;\n  }): Promise<any> {\n    try {\n      const response = await axiosInstance.post(\"/api/workflows/vapi/calls\", callData);\n      toast.success(\"Call initiated successfully\");\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error creating VAPI call:\", error);\n      const message = error.response?.data?.message || \"Failed to create call\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // Get workflow templates\n  static async getTemplates(): Promise<any[]> {\n    try {\n      const response = await axiosInstance.get(\"/api/workflows/vapi/templates\");\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error fetching VAPI templates:\", error);\n      const message = error.response?.data?.message || \"Failed to fetch templates\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // Validate workflow structure\n  static async validateWorkflow(workflowData: Workflow): Promise<{\n    valid: boolean;\n    errors: string[];\n    warnings: string[];\n  }> {\n    try {\n      const response = await axiosInstance.post(\"/api/workflows/vapi/validate\", workflowData);\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error validating VAPI workflow:\", error);\n      const message = error.response?.data?.message || \"Failed to validate workflow\";\n      toast.error(message);\n      throw error;\n    }\n  }\n\n  // Auto-save workflow (silent operation)\n  static async autoSaveWorkflow(workflowId: string, workflowData: Partial<Workflow>): Promise<void> {\n    try {\n      await axiosInstance.patch(`/api/workflows/vapi/${workflowId}`, workflowData);\n    } catch (error: any) {\n      console.warn(\"Auto-save failed:\", error);\n      // Silent failure for auto-save\n    }\n  }\n\n  // Duplicate workflow\n  static async duplicateWorkflow(workflowId: string, newName: string): Promise<Workflow> {\n    try {\n      const response = await axiosInstance.post(`/api/workflows/vapi/${workflowId}/duplicate`, {\n        name: newName\n      });\n      toast.success(\"Workflow duplicated successfully\");\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error duplicating VAPI workflow:\", error);\n      const message = error.response?.data?.message || \"Failed to duplicate workflow\";\n      toast.error(message);\n      throw error;\n    }\n  }\n}\n\n// VAPI Node Configuration Service\nexport class VapiNodeService {\n  // Get available node types and their configurations\n  static async getNodeTypes(): Promise<any[]> {\n    try {\n      const response = await axiosInstance.get(\"/api/workflows/vapi/node-types\");\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error fetching VAPI node types:\", error);\n      throw error;\n    }\n  }\n\n  // Get node configuration schema\n  static async getNodeSchema(nodeType: string): Promise<any> {\n    try {\n      const response = await axiosInstance.get(`/api/workflows/vapi/node-types/${nodeType}/schema`);\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error fetching VAPI node schema:\", error);\n      throw error;\n    }\n  }\n\n  // Validate node configuration\n  static async validateNode(nodeData: WorkflowNode): Promise<{\n    valid: boolean;\n    errors: string[];\n  }> {\n    try {\n      const response = await axiosInstance.post(\"/api/workflows/vapi/nodes/validate\", nodeData);\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error validating VAPI node:\", error);\n      throw error;\n    }\n  }\n}\n\n// VAPI Variable Service\nexport class VapiVariableService {\n  // Extract variables from conversation\n  static async extractVariables(conversationText: string, schema: any): Promise<Record<string, any>> {\n    try {\n      const response = await axiosInstance.post(\"/api/workflows/vapi/variables/extract\", {\n        text: conversationText,\n        schema\n      });\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error extracting variables:\", error);\n      throw error;\n    }\n  }\n\n  // Validate variable schema\n  static async validateSchema(schema: any): Promise<{\n    valid: boolean;\n    errors: string[];\n  }> {\n    try {\n      const response = await axiosInstance.post(\"/api/workflows/vapi/variables/validate-schema\", {\n        schema\n      });\n      return response.data.data;\n    } catch (error: any) {\n      console.error(\"Error validating variable schema:\", error);\n      throw error;\n    }\n  }\n}\n\nexport default VapiWorkflowService;\n"],"names":["VapiWorkflowService","workflowData","axiosInstance","error","message","_b","_a","toast","workflowId","params","callData","response","newName"],"mappings":"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"}