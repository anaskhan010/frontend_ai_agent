{"version":3,"file":"Login-Ba7qvuMm.js","sources":["../../src/api/services/auth/authService.ts","../../src/pages/auth/Login.tsx"],"sourcesContent":["// src/api/services/auth/authService.ts\r\n\r\nimport axiosInstance from \"@/api/axios/axiosInstance\";\r\nimport { toast } from \"sonner\";\r\n\r\nexport interface LoginResponse {\r\n  message: string;\r\n  data: string;\r\n}\r\n\r\nexport const loginService = async (data: {\r\n  email: string;\r\n  password: string;\r\n}): Promise<string> => {\r\n  try {\r\n    const response = await axiosInstance.post<LoginResponse>(\r\n      \"/api/users/login\",\r\n      data\r\n    );\r\n\r\n    if (response.status === 200) {\r\n      toast.success(response.data.message);\r\n      // Assuming the token is in response.data.data.token\r\n      return response.data.data;\r\n    }\r\n\r\n    throw new Error(\"Login failed\");\r\n  } catch (error: any) {\r\n    if (error.response && error.response.data && error.response.data.message) {\r\n      toast.error(error.response.data.message);\r\n    } else {\r\n      toast.error(\"An unexpected error occurred.\");\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\ninterface DemoLoginResponse {\r\n  success: boolean;\r\n  message: string;\r\n  data: {\r\n    token: string;\r\n    user: any;\r\n  };\r\n}\r\n\r\n","// src/pages/auth/Login.tsx\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport AuthCard from \"@/components/auth/AuthCard\";\r\n\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\n\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nimport { loginService } from \"@/api/services/auth/authService\";\r\nimport { useState } from \"react\";\r\n\r\nimport { useAuth } from \"@/context/AuthContext\";\r\n\r\n// Define the schema with 'email' and 'password'\r\nconst FormSchema = z.object({\r\n  email: z.string().email({ message: \"Invalid email address\" }),\r\n  password: z\r\n    .string()\r\n    .min(4, { message: \"Password must be at least 6 characters\" }) // Adjusted min from 4 to 6\r\n    .max(100),\r\n});\r\n\r\n// Define the type inferred from the schema\r\ntype FormData = z.infer<typeof FormSchema>;\r\n\r\nconst Login = () => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const navigate = useNavigate();\r\n  const { login } = useAuth();\r\n\r\n  const form = useForm<FormData>({\r\n    resolver: zodResolver(FormSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  // Handle form submission\r\n  const onSubmit = async (values: FormData) => {\r\n    setLoading(true);\r\n    try {\r\n      const token = await loginService(values);\r\n      console.log(\"Token:\", token);\r\n      if (token) {\r\n        login(token); // Store token in AuthContext\r\n        navigate(\"/\"); // Navigate to protected route\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      // Error toast is already handled in loginService\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <AuthCard>\r\n      <Form {...form}>\r\n        <h1 className=\"text-3xl text-foreground font-bold tracking-wide mb-2\">\r\n          Welcome Back\r\n        </h1>\r\n        <p className=\"text-muted-foreground mb-6\">Sign in to your account to continue</p>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          {/* Email Field */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"email\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className=\"text-sm font-medium\">Email</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Enter your email\"\r\n                    {...field}\r\n                    className=\"bg-white border-[#E4E8F0]\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Password Field */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"password\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <FormLabel className=\"text-sm font-medium\">Password</FormLabel>\r\n                  <Link to=\"/forgot-password\" className=\"text-xs text-primary hover:underline\">\r\n                    Forgot password?\r\n                  </Link>\r\n                </div>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter your password\"\r\n                    {...field}\r\n                    className=\"bg-white border-[#E4E8F0]\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Submit Button */}\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"w-full mt-4\"\r\n            disabled={loading}\r\n            style={{\r\n              background: 'linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary) / 0.9))'\r\n            }}\r\n          >\r\n            {loading ? \"Signing in...\" : \"Sign In\"}\r\n          </Button>\r\n\r\n         \r\n        \r\n         \r\n        </form>\r\n      </Form>\r\n    </AuthCard>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["loginService","data","response","axiosInstance","toast","error","FormSchema","z","Login","loading","setLoading","useState","navigate","useNavigate","login","useAuth","form","useForm","zodResolver","onSubmit","values","token","jsx","AuthCard","jsxs","Form","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","Link","Button"],"mappings":"+fAUa,MAAAA,EAAe,MAAOC,GAGZ,CACjB,GAAA,CACI,MAAAC,EAAW,MAAMC,EAAc,KACnC,mBACAF,CACF,EAEI,GAAAC,EAAS,SAAW,IAChBE,OAAAA,EAAA,QAAQF,EAAS,KAAK,OAAO,EAE5BA,EAAS,KAAK,KAGjB,MAAA,IAAI,MAAM,cAAc,QACvBG,EAAY,CACf,MAAAA,EAAM,UAAYA,EAAM,SAAS,MAAQA,EAAM,SAAS,KAAK,QAC/DD,EAAM,MAAMC,EAAM,SAAS,KAAK,OAAO,EAEvCD,EAAM,MAAM,+BAA+B,EAEvCC,CAAA,CAEV,ECTMC,EAAaC,EAAE,OAAO,CAC1B,MAAOA,EAAE,OAAO,EAAE,MAAM,CAAE,QAAS,wBAAyB,EAC5D,SAAUA,EACP,OAAO,EACP,IAAI,EAAG,CAAE,QAAS,wCAAyC,CAAC,EAC5D,IAAI,GAAG,CACZ,CAAC,EAKKC,EAAQ,IAAM,CAClB,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAAA,SAAkB,EAAK,EAE/CC,EAAWC,EAAY,EACvB,CAAE,MAAAC,CAAM,EAAIC,EAAQ,EAEpBC,EAAOC,EAAkB,CAC7B,SAAUC,EAAYZ,CAAU,EAChC,cAAe,CACb,MAAO,GACP,SAAU,EAAA,CACZ,CACD,EAGKa,EAAW,MAAOC,GAAqB,CAC3CV,EAAW,EAAI,EACX,GAAA,CACI,MAAAW,EAAQ,MAAMrB,EAAaoB,CAAM,EAC/B,QAAA,IAAI,SAAUC,CAAK,EACvBA,IACFP,EAAMO,CAAK,EACXT,EAAS,GAAG,SAEPP,EAAO,CACN,QAAA,MAAM,gBAAiBA,CAAK,CAAA,QAEpC,CACAK,EAAW,EAAK,CAAA,CAEpB,EAIA,OACGY,EAAA,IAAAC,EAAA,CACC,SAACC,EAAA,KAAAC,EAAA,CAAM,GAAGT,EACR,SAAA,CAACM,EAAA,IAAA,KAAA,CAAG,UAAU,wDAAwD,SAEtE,eAAA,EACCA,EAAA,IAAA,IAAA,CAAE,UAAU,6BAA6B,SAAmC,sCAAA,EAC7EE,OAAC,QAAK,SAAUR,EAAK,aAAaG,CAAQ,EAAG,UAAU,YAErD,SAAA,CAAAG,EAAA,IAACI,EAAA,CACC,QAASV,EAAK,QACd,KAAK,QACL,OAAQ,CAAC,CAAE,MAAAW,CAAM,WACdC,EACC,CAAA,SAAA,CAACN,EAAA,IAAAO,EAAA,CAAU,UAAU,sBAAsB,SAAK,QAAA,QAC/CC,EACC,CAAA,SAAAR,EAAA,IAACS,EAAA,CACC,YAAY,mBACX,GAAGJ,EACJ,UAAU,2BAAA,CAAA,EAEd,QACCK,EAAY,CAAA,CAAA,CAAA,CACf,CAAA,CAAA,CAEJ,EAGAV,EAAA,IAACI,EAAA,CACC,QAASV,EAAK,QACd,KAAK,WACL,OAAQ,CAAC,CAAE,MAAAW,CAAM,WACdC,EACC,CAAA,SAAA,CAACJ,EAAAA,KAAA,MAAA,CAAI,UAAU,oCACb,SAAA,CAACF,EAAA,IAAAO,EAAA,CAAU,UAAU,sBAAsB,SAAQ,WAAA,QAClDI,EAAK,CAAA,GAAG,mBAAmB,UAAU,uCAAuC,SAE7E,kBAAA,CAAA,CAAA,EACF,QACCH,EACC,CAAA,SAAAR,EAAA,IAACS,EAAA,CACC,KAAK,WACL,YAAY,sBACX,GAAGJ,EACJ,UAAU,2BAAA,CAAA,EAEd,QACCK,EAAY,CAAA,CAAA,CAAA,CACf,CAAA,CAAA,CAEJ,EAGAV,EAAA,IAACY,EAAA,CACC,KAAK,SACL,UAAU,cACV,SAAUzB,EACV,MAAO,CACL,WAAY,yEACd,EAEC,WAAU,gBAAkB,SAAA,CAAA,CAC/B,CAKF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAEJ"}