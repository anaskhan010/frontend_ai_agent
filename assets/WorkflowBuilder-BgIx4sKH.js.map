{"version":3,"file":"WorkflowBuilder-BgIx4sKH.js","sources":["../../src/pages/Workflows/components/VapiCanvasSimple.tsx","../../src/pages/Workflows/components/VapiNode.tsx","../../src/api/services/vapi/nodeTypesService.ts","../../src/pages/Workflows/components/VapiNodeSidePanel.tsx","../../src/pages/Workflows/components/EdgeLabelEditSidebar.tsx","../../src/pages/Workflows/components/VapiWebCall.tsx","../../src/pages/Workflows/WorkflowBuilder.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { MessageCircle, Settings, Trash2, Star, Globe, Variable, GripVertical } from 'lucide-react';\n\n// Mock types since we don't have access to the actual types\ninterface Node {\n  id: string;\n  type: string;\n  position: { x: number; y: number };\n  data?: {\n    name?: string;\n    type?: string;\n    prompt?: string;\n    firstMessage?: string;\n    isStart?: boolean;\n    variables?: any[];\n    globalNodePlan?: { enabled: boolean };\n  };\n}\n\ninterface Edge {\n  id: string;\n  source: string;\n  target: string;\n  label?: string;\n  type?: string;\n}\n\ninterface ButtonProps {\n  children: React.ReactNode;\n  variant?: string;\n  size?: string;\n  className?: string;\n  onClick?: (e: React.MouseEvent) => void;\n  [key: string]: any;\n}\n\ninterface BadgeProps {\n  children: React.ReactNode;\n  variant?: string;\n  className?: string;\n  [key: string]: any;\n}\n\ninterface NodeComponentProps {\n  data: any;\n  selected: boolean;\n  nodeId: string;\n}\n\n// Mock Button and Badge components\nconst Button: React.FC<ButtonProps> = ({ children, variant, size, className, onClick, ...props }) => (\n  <button\n    className={`inline-flex items-center justify-center font-medium transition-colors ${className || ''}`}\n    onClick={onClick}\n    {...props}\n  >\n    {children}\n  </button>\n);\n\nconst Badge: React.FC<BadgeProps> = ({ children, variant, className, ...props }) => (\n  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${className || ''}`} {...props}>\n    {children}\n  </span>\n);\n\n// VapiNode component with fixed connection handling\nconst VapiNode: React.FC<NodeComponentProps> = ({ data, selected, nodeId }) => {\n  const [isConfigOpen, setIsConfigOpen] = useState(false);\n  const [localData, setLocalData] = useState(data);\n\n  // Sync localData with incoming data prop changes (e.g., from sidebar updates)\n  useEffect(() => {\n    setLocalData(data);\n  }, [data]);\n\n  const handleUpdate = (updates: any) => {\n    const newData = { ...localData, ...updates };\n    setLocalData(newData);\n    data.onUpdate(newData);\n  };\n\n  const getNodeIcon = () => {\n    switch (data.type) {\n      case 'conversation':\n        return <MessageCircle className=\"h-4 w-4 text-blue-600\" />;\n      case 'apiRequest':\n        return <div className=\"h-4 w-4 bg-purple-600 rounded\" />;\n      case 'transferCall':\n        return <div className=\"h-4 w-4 bg-green-600 rounded\" />;\n      case 'endCall':\n        return <div className=\"h-4 w-4 bg-red-600 rounded\" />;\n      case 'tool':\n        return <div className=\"h-4 w-4 bg-orange-600 rounded\" />;\n      default:\n        return <MessageCircle className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  const getNodeColor = () => {\n    if (data.isStart) return 'border-green-500 bg-green-50';\n    if (selected) return 'border-blue-500 shadow-lg';\n    return 'border-gray-300 hover:border-gray-400';\n  };\n\n  return (\n    <div\n      className={`group relative w-[280px] bg-gradient-to-br from-white via-gray-50/30 to-white border-2 rounded-2xl shadow-lg transition-all duration-300 cursor-move hover:shadow-xl hover:shadow-teal-500/10 hover:scale-102 ${getNodeColor()}`}\n      style={{\n        filter: selected\n          ? 'drop-shadow(0 12px 28px rgba(20, 184, 166, 0.2))'\n          : 'drop-shadow(0 6px 16px rgba(0, 0, 0, 0.08))',\n        backdropFilter: 'blur(8px)',\n        background: selected\n          ? 'linear-gradient(135deg, #ffffff 0%, #f0fdfa 30%, #ffffff 100%)'\n          : 'linear-gradient(135deg, #ffffff 0%, #f8fafc 50%, #ffffff 100%)'\n      }}\n      draggable={false}\n      onMouseDown={(e) => {\n        const target = e.target as HTMLElement;\n        if (target.closest('button') || target.closest('[role=\"button\"]') || target.closest('[data-connection-point]')) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }}\n      title=\"Click and drag to move this node\"\n    >\n      {/* TOP CONNECTION POINT - Input */}\n      <div\n        className=\"absolute -top-1.5 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-white border-2 border-teal-500 rounded-full cursor-crosshair transition-all duration-200 hover:scale-125 hover:border-teal-600 z-40\"\n        title=\"Input connection point - drag from another node's output to connect here\"\n        data-connection-point=\"input\"\n        data-node-id={nodeId}\n        style={{\n          boxShadow: '0 0 0 1px rgba(255, 255, 255, 0.9), 0 2px 4px rgba(20, 184, 166, 0.3)'\n        }}\n      />\n\n      {/* Header */}\n      <div className=\"p-3 border-b border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <GripVertical className=\"h-4 w-4 text-gray-400 cursor-move\" />\n            <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n              {getNodeIcon()}\n            </div>\n            <div>\n              <div className=\"text-sm font-medium text-gray-900\">\n                {localData.name || 'Conversation'}\n              </div>\n              <div className=\"flex items-center gap-1 mt-1\">\n                {localData.isStart && (\n                  <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-700\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    Start\n                  </Badge>\n                )}\n                {localData.globalNodePlan?.enabled && (\n                  <Badge variant=\"outline\" className=\"text-xs border-orange-200 text-orange-700\">\n                    <Globe className=\"h-3 w-3 mr-1\" />\n                    Global\n                  </Badge>\n                )}\n                {localData.variables && localData.variables.length > 0 && (\n                  <Badge variant=\"outline\" className=\"text-xs border-purple-200 text-purple-700\">\n                    <Variable className=\"h-3 w-3 mr-1\" />\n                    {localData.variables.length}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-8 w-8 p-0 hover:bg-gray-100 rounded-md\"\n              onClick={(e: React.MouseEvent) => {\n                e.stopPropagation();\n                e.preventDefault();\n                if (data.onConfigure) {\n                  data.onConfigure();\n                } else {\n                  setIsConfigOpen(true);\n                }\n              }}\n            >\n              <Settings className=\"h-4 w-4 text-gray-500\" />\n            </Button>\n            {!localData.isStart && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 w-8 p-0 hover:bg-red-100 text-red-500 hover:text-red-700 rounded-md\"\n                onClick={(e: React.MouseEvent) => {\n                  e.stopPropagation();\n                  e.preventDefault();\n                  if (confirm('Are you sure you want to delete this node?')) {\n                    data.onDelete();\n                  }\n                }}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3 space-y-2\">\n        <div className=\"text-xs\">\n          <div className=\"font-medium text-gray-900 mb-1\">Prompt</div>\n          <div className=\"text-gray-600 leading-relaxed\">\n            {localData.prompt?.length > 80\n              ? `${localData.prompt.substring(0, 80)}...`\n              : localData.prompt || 'No prompt configured'}\n          </div>\n        </div>\n      </div>\n\n      {/* BOTTOM CONNECTION POINT - Output (for manual connections) */}\n      {localData.type !== 'endCall' && (\n        <div\n          className=\"absolute -bottom-1.5 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-white border-2 border-teal-500 rounded-full cursor-crosshair transition-all duration-200 hover:scale-125 hover:border-teal-600 z-40\"\n          title=\"Output connection point - drag to another node's input to connect\"\n          data-connection-point=\"output\"\n          data-node-id={nodeId}\n          onMouseDown={(e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            console.log('🔗 Starting manual connection from node:', nodeId);\n            if (data.onManualConnectionStart && nodeId) {\n              // Pass the exact position of this connection point\n              const rect = e.currentTarget.getBoundingClientRect();\n              const canvasRect = e.currentTarget.closest('[data-canvas]')?.getBoundingClientRect();\n              if (canvasRect) {\n                const relativeX = rect.left + rect.width / 2 - canvasRect.left;\n                const relativeY = rect.top + rect.height / 2 - canvasRect.top;\n                data.onManualConnectionStart(nodeId, { x: relativeX, y: relativeY });\n              }\n            }\n          }}\n          style={{\n            boxShadow: '0 0 0 1px rgba(255, 255, 255, 0.9), 0 2px 4px rgba(20, 184, 166, 0.3)'\n          }}\n        />\n      )}\n\n      {/* ADD NODE BUTTON - For quick node creation - Only visible on hover */}\n      {localData.type !== 'endCall' && (\n        <div className=\"absolute -bottom-12 left-1/2 transform -translate-x-1/2 z-30 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n          <button\n            className=\"w-8 h-8 bg-teal-500 hover:bg-teal-600 text-white rounded-full flex items-center justify-center transition-all duration-200 shadow-lg hover:shadow-xl border-2 border-white hover:scale-110 active:scale-95\"\n            title=\"Add new connected node\"\n            onClick={(e) => {\n              e.stopPropagation();\n              console.log('➕ Quick add node for:', nodeId);\n              if (data.onConnectionStart && nodeId) {\n                data.onConnectionStart(nodeId, { x: 0, y: 0 });\n              }\n            }}\n            style={{\n              boxShadow: '0 0 0 2px rgba(255, 255, 255, 0.9), 0 4px 12px rgba(20, 184, 166, 0.3)'\n            }}\n          >\n            <span className=\"text-lg font-bold leading-none\">+</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main Canvas Component\ninterface VapiCanvasSimpleProps {\n  nodes: Node[];\n  edges: Edge[];\n  onNodesChange: (nodes: Node[]) => void;\n  onEdgesChange?: (edges: Edge[]) => void;\n  onNodeClick: (node: Node) => void;\n  selectedNode?: Node | null;\n  nodeTypes: any;\n  onEdgeLabelClick?: (edge: Edge) => void;\n}\n\nconst VapiCanvasSimple: React.FC<VapiCanvasSimpleProps> = ({\n  nodes,\n  edges,\n  onNodesChange,\n  onEdgesChange,\n  onNodeClick,\n  selectedNode,\n  nodeTypes,\n  onEdgeLabelClick,\n}) => {\n  // Drag state\n  const [isDragging, setIsDragging] = useState(false);\n  const [draggedNodeId, setDraggedNodeId] = useState<string | null>(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [forceRender, setForceRender] = useState(0);\n  const [hasMoved, setHasMoved] = useState(false); // Track if mouse actually moved during drag\n\n  // Zoom state\n  const [zoom, setZoom] = useState(1);\n  const [panOffset, setPanOffset] = useState({ x: 0, y: 0 });\n\n  // Canvas panning state\n  const [isPanning, setIsPanning] = useState(false);\n  const [panStart, setPanStart] = useState({ x: 0, y: 0 });\n  const [lastPanOffset, setLastPanOffset] = useState({ x: 0, y: 0 });\n\n  // Manual connection state - FIXED\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionStart, setConnectionStart] = useState<{ nodeId: string; x: number; y: number } | null>(null);\n  const [mousePosition, setMousePosition] = useState<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const nodesRef = useRef(nodes);\n  const onNodesChangeRef = useRef(onNodesChange);\n  const onNodeClickRef = useRef(onNodeClick);\n\n  // Update refs when props change\n  nodesRef.current = nodes;\n  onNodesChangeRef.current = onNodesChange;\n  onNodeClickRef.current = onNodeClick;\n\n  // Zoom handler\n  const handleWheel = useCallback((e: React.WheelEvent) => {\n    e.preventDefault();\n\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (!rect) return;\n\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    // Calculate zoom factor\n    const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;\n    const newZoom = Math.min(Math.max(zoom * zoomFactor, 0.1), 3);\n\n    // Calculate new pan offset to zoom towards mouse position\n    const zoomRatio = newZoom / zoom;\n    const newPanX = mouseX - (mouseX - panOffset.x) * zoomRatio;\n    const newPanY = mouseY - (mouseY - panOffset.y) * zoomRatio;\n\n    setZoom(newZoom);\n    setPanOffset({ x: newPanX, y: newPanY });\n  }, [zoom, panOffset]);\n\n  // Canvas panning handlers - VAPI style (simple click and drag)\n  const handleCanvasMouseDown = useCallback((e: React.MouseEvent) => {\n    // Only start panning if clicking on empty canvas (not on nodes or connections)\n    const target = e.target as HTMLElement;\n    if (target.closest('[data-node]') || target.closest('button') || target.closest('[data-connection-point]')) {\n      return;\n    }\n\n    // Start panning with left mouse button on empty canvas (VAPI behavior)\n    if (e.button === 0) {\n      e.preventDefault();\n      setIsPanning(true);\n      setPanStart({ x: e.clientX, y: e.clientY });\n      setLastPanOffset({ ...panOffset });\n      document.body.style.cursor = 'grabbing';\n    }\n  }, [panOffset]);\n\n  const handleCanvasPanMove = useCallback((e: React.MouseEvent) => {\n    if (isPanning) {\n      e.preventDefault();\n      const deltaX = e.clientX - panStart.x;\n      const deltaY = e.clientY - panStart.y;\n\n      setPanOffset({\n        x: lastPanOffset.x + deltaX,\n        y: lastPanOffset.y + deltaY\n      });\n    }\n  }, [isPanning, panStart, lastPanOffset]);\n\n  const handleCanvasPanEnd = useCallback(() => {\n    if (isPanning) {\n      setIsPanning(false);\n      document.body.style.cursor = 'default';\n    }\n  }, [isPanning]);\n\n  // FIXED: Manual connection start handler\n  const startManualConnection = useCallback((nodeId: string, position: { x: number; y: number }) => {\n    console.log('🔗 Starting manual connection from:', nodeId, 'at position:', position);\n\n    const node = nodes.find(n => n.id === nodeId);\n    if (!node) {\n      console.error('❌ Source node not found:', nodeId);\n      return;\n    }\n\n    // Calculate the actual connection point position (in transformed space)\n    const connectionX = node.position.x + 140; // Center of node (280px width / 2)\n    const connectionY = node.position.y + 180; // Bottom of node (approximate height)\n\n    setIsConnecting(true);\n    setConnectionStart({\n      nodeId,\n      x: connectionX,\n      y: connectionY\n    });\n\n    // Change cursor to indicate connection mode\n    document.body.style.cursor = 'crosshair';\n    console.log('✅ Manual connection started from:', nodeId, { x: connectionX, y: connectionY });\n  }, [nodes]);\n\n  // Handle canvas mouse move for connection preview\n  const handleCanvasMouseMove = useCallback((e: React.MouseEvent) => {\n    if (isConnecting) {\n      const rect = canvasRef.current?.getBoundingClientRect();\n      if (rect) {\n        // Account for zoom and pan when calculating mouse position\n        const rawX = e.clientX - rect.left;\n        const rawY = e.clientY - rect.top;\n        const adjustedX = (rawX - panOffset.x) / zoom;\n        const adjustedY = (rawY - panOffset.y) / zoom;\n\n        setMousePosition({\n          x: adjustedX,\n          y: adjustedY\n        });\n      }\n    }\n  }, [isConnecting, zoom, panOffset]);\n\n  // FIXED: Handle canvas mouse up for connection completion\n  const handleCanvasMouseUp = useCallback((e: React.MouseEvent) => {\n    if (!isConnecting || !connectionStart) return;\n\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (!rect) return;\n\n    // Account for zoom and pan when calculating mouse position\n    const rawX = e.clientX - rect.left;\n    const rawY = e.clientY - rect.top;\n    const mouseX = (rawX - panOffset.x) / zoom;\n    const mouseY = (rawY - panOffset.y) / zoom;\n\n    console.log('🎯 Trying to complete connection at:', { mouseX, mouseY });\n\n    // Find target node under mouse\n    const targetNode = nodes.find(node => {\n      const nodeLeft = node.position.x;\n      const nodeRight = node.position.x + 280; // Node width\n      const nodeTop = node.position.y;\n      const nodeBottom = node.position.y + 180; // Approximate node height\n\n      const isInside = mouseX >= nodeLeft && mouseX <= nodeRight &&\n                      mouseY >= nodeTop && mouseY <= nodeBottom &&\n                      node.id !== connectionStart.nodeId; // Can't connect to self\n\n      if (isInside) {\n        console.log('🎯 Found target node:', node.id, {\n          nodeBounds: { left: nodeLeft, right: nodeRight, top: nodeTop, bottom: nodeBottom },\n          mousePos: { mouseX, mouseY }\n        });\n      }\n\n      return isInside;\n    });\n\n    if (targetNode && onEdgesChange) {\n      // Check if connection already exists\n      const existingEdge = edges.find(edge => \n        edge.source === connectionStart.nodeId && edge.target === targetNode.id\n      );\n\n      if (existingEdge) {\n        console.log('⚠️ Connection already exists between these nodes');\n      } else {\n        // Create new connection\n        const newEdge: Edge = {\n          id: `edge-${connectionStart.nodeId}-${targetNode.id}-${Date.now()}`,\n          source: connectionStart.nodeId,\n          target: targetNode.id,\n          label: 'Manual Connection',\n          type: 'default'\n        };\n\n        const updatedEdges = [...edges, newEdge];\n        onEdgesChange(updatedEdges);\n\n        console.log('✅ Created manual connection:', connectionStart.nodeId, '->', targetNode.id);\n      }\n    } else {\n      console.log('❌ No valid target node found for connection');\n    }\n\n    // Reset connection state\n    setIsConnecting(false);\n    setConnectionStart(null);\n    document.body.style.cursor = 'default';\n  }, [isConnecting, connectionStart, nodes, edges, onEdgesChange]);\n\n  // Auto add node functionality (existing)\n  const handleAddNode = useCallback((sourceNodeId: string) => {\n    console.log('➕ Adding new node after:', sourceNodeId);\n\n    const sourceNode = nodes.find(n => n.id === sourceNodeId);\n    if (!sourceNode) return;\n\n    const newNodeId = `node-${Date.now()}`;\n    const newNode: Node = {\n      id: newNodeId,\n      type: 'conversation',\n      position: {\n        x: sourceNode.position.x,\n        y: sourceNode.position.y + 300\n      },\n      data: {\n        type: 'conversation',\n        name: 'New Conversation',\n        prompt: 'Enter your prompt here...',\n        firstMessage: '',\n        isStart: false,\n        variables: [],\n        globalNodePlan: { enabled: false },\n      },\n    };\n\n    const newEdge: Edge = {\n      id: `edge-${sourceNodeId}-${newNodeId}`,\n      source: sourceNodeId,\n      target: newNodeId,\n      label: 'Auto Connection'\n    };\n\n    const updatedNodes = [...nodes, newNode];\n    const updatedEdges = [...edges, newEdge];\n\n    onNodesChangeRef.current(updatedNodes);\n    if (onEdgesChange) {\n      onEdgesChange(updatedEdges);\n    }\n  }, [nodes, edges, onEdgesChange]);\n\n  // Node drag handlers (existing)\n  const handleNodeMouseDown = useCallback((e: React.MouseEvent, node: Node) => {\n    const target = e.target as HTMLElement;\n    if (target.closest('button') || target.closest('[role=\"button\"]') || target.closest('[data-connection-point]')) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (!rect) return;\n\n    // Account for zoom and pan when calculating mouse position\n    const rawX = e.clientX - rect.left;\n    const rawY = e.clientY - rect.top;\n    const mouseX = (rawX - panOffset.x) / zoom;\n    const mouseY = (rawY - panOffset.y) / zoom;\n\n    const offset = {\n      x: mouseX - node.position.x,\n      y: mouseY - node.position.y,\n    };\n\n    setIsDragging(true);\n    setDraggedNodeId(node.id);\n    setDragOffset(offset);\n    setHasMoved(false); // Reset movement tracking\n  }, [zoom, panOffset]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent) => {\n    // Handle canvas panning\n    handleCanvasPanMove(e);\n\n    // Handle node dragging\n    if (isDragging && draggedNodeId) {\n      e.preventDefault();\n      const rect = canvasRef.current?.getBoundingClientRect();\n      if (!rect) return;\n\n      // Account for zoom and pan when calculating mouse position\n      const rawX = e.clientX - rect.left;\n      const rawY = e.clientY - rect.top;\n      const mouseX = (rawX - panOffset.x) / zoom;\n      const mouseY = (rawY - panOffset.y) / zoom;\n\n      const newX = mouseX - dragOffset.x;\n      const newY = mouseY - dragOffset.y;\n\n      // Check if the node actually moved (not just a click)\n      const currentNode = nodesRef.current.find(n => n.id === draggedNodeId);\n      if (currentNode) {\n        const deltaX = Math.abs(newX - currentNode.position.x);\n        const deltaY = Math.abs(newY - currentNode.position.y);\n        if (deltaX > 2 || deltaY > 2) { // Threshold to distinguish drag from click\n          setHasMoved(true);\n        }\n      }\n\n      const updatedNodes = nodesRef.current.map(node =>\n        node.id === draggedNodeId\n          ? { ...node, position: { x: newX, y: newY } }\n          : node\n      );\n\n      nodesRef.current = updatedNodes;\n      setForceRender(prev => prev + 1);\n      onNodesChangeRef.current(updatedNodes);\n    }\n\n    // Handle connection preview\n    handleCanvasMouseMove(e);\n  }, [isDragging, draggedNodeId, dragOffset, handleCanvasMouseMove, zoom, panOffset, handleCanvasPanMove]);\n\n  const handleMouseUp = useCallback((e: React.MouseEvent) => {\n    // Handle canvas panning end\n    handleCanvasPanEnd();\n\n    if (isDragging) {\n      e.preventDefault();\n      setIsDragging(false);\n      setDraggedNodeId(null);\n      setDragOffset({ x: 0, y: 0 });\n      // Note: Don't reset hasMoved here, let handleNodeClick use it first\n    }\n\n    // Handle connection completion\n    handleCanvasMouseUp(e);\n  }, [isDragging, handleCanvasMouseUp, handleCanvasPanEnd]);\n\n  const handleNodeClick = useCallback((node: Node) => {\n    // Only open sidebar if the node wasn't dragged (just clicked)\n    if (!hasMoved) {\n      onNodeClickRef.current(node);\n    }\n    // Reset the movement tracking after handling the click\n    setHasMoved(false);\n  }, [hasMoved]);\n\n  // Render connections\n  const renderConnections = useCallback(() => {\n    if (!edges || edges.length === 0) return null;\n\n    return edges.map((edge, index) => {\n      const currentNodes = nodesRef.current;\n      const sourceNode = currentNodes.find(n => n.id === edge.source);\n      const targetNode = currentNodes.find(n => n.id === edge.target);\n\n      if (!sourceNode || !targetNode) return null;\n\n      const sourceX = sourceNode.position.x + 140; // Center\n      const sourceY = sourceNode.position.y + 160; // Bottom\n      const targetX = targetNode.position.x + 140; // Center  \n      const targetY = targetNode.position.y - 8; // Top\n\n      const midX = sourceX + (targetX - sourceX) / 2;\n      const midY = sourceY + (targetY - sourceY) / 2;\n\n      const distance = Math.sqrt(\n        Math.pow(targetX - sourceX, 2) + Math.pow(targetY - sourceY, 2)\n      );\n      const controlOffset = Math.min(distance * 0.4, 100);\n\n      const cp1x = sourceX;\n      const cp1y = sourceY + controlOffset;\n      const cp2x = targetX;\n      const cp2y = targetY - controlOffset;\n\n      const pathData = `M ${sourceX} ${sourceY} C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${targetX} ${targetY}`;\n\n      return (\n        <g key={`edge-${index}`}>\n          <defs>\n            <marker\n              id={`arrowhead-${index}`}\n              markerWidth=\"8\"\n              markerHeight=\"6\"\n              refX=\"7\"\n              refY=\"3\"\n              orient=\"auto\"\n              markerUnits=\"strokeWidth\"\n            >\n              <polygon points=\"0 0, 8 3, 0 6\" fill=\"#6b7280\" />\n            </marker>\n          </defs>\n\n          <path\n            d={pathData}\n            stroke=\"#6b7280\"\n            strokeWidth=\"2\"\n            fill=\"none\"\n            strokeLinecap=\"round\"\n            markerEnd={`url(#arrowhead-${index})`}\n            className=\"transition-all duration-300 hover:stroke-teal-500\"\n          />\n\n          <foreignObject\n            x={midX - 60}\n            y={midY - 12}\n            width=\"120\"\n            height=\"24\"\n            className=\"pointer-events-auto\"\n          >\n            <div\n              className=\"bg-white text-gray-800 text-xs font-medium px-3 py-1 rounded-full text-center shadow-md border border-gray-200 cursor-pointer hover:shadow-lg transition-shadow\"\n              onClick={(e) => {\n                e.stopPropagation();\n                if (onEdgeLabelClick) {\n                  onEdgeLabelClick(edge);\n                }\n              }}\n            >\n              {edge.label || 'Connection'}\n            </div>\n          </foreignObject>\n        </g>\n      );\n    });\n  }, [edges, forceRender, onEdgeLabelClick]);\n\n  return (\n    <div className=\"relative w-full h-full bg-gradient-to-br from-slate-50 via-white to-gray-50 overflow-hidden\">\n      {/* Grid background */}\n      <div\n        className=\"absolute inset-0 opacity-[0.12]\"\n        style={{\n          backgroundImage: `\n            linear-gradient(rgba(99, 102, 241, 0.15) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(99, 102, 241, 0.15) 1px, transparent 1px)\n          `,\n          backgroundSize: '24px 24px'\n        }}\n      />\n\n      <div\n        ref={canvasRef}\n        data-canvas=\"true\"\n        className=\"relative w-full h-full\"\n        onMouseDown={handleCanvasMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n        onWheel={handleWheel}\n        style={{ cursor: isPanning ? 'grabbing' : 'grab' }}\n      >\n        {/* Workflow content container - Only this gets transformed */}\n        <div\n          className=\"absolute inset-0\"\n          style={{\n            transform: `translate(${panOffset.x}px, ${panOffset.y}px) scale(${zoom})`,\n            transformOrigin: '0 0',\n          }}\n        >\n    \n     \n\n        {/* Render nodes */}\n        {nodes.map((node) => (\n          <div\n            key={node.id}\n            data-node=\"true\"\n            className=\"absolute\"\n            style={{\n              left: node.position.x,\n              top: node.position.y,\n              zIndex: 10,\n            }}\n            onMouseDown={(e) => handleNodeMouseDown(e, node)}\n            onClick={() => handleNodeClick(node)}\n          >\n            <VapiNode\n              data={{\n                name: node.data?.name || node.type,\n                type: node.type,\n                prompt: node.data?.prompt || '',\n                firstMessage: node.data?.firstMessage || '',\n                isStart: node.data?.isStart || false,\n                variables: node.data?.variables || [],\n                globalNodePlan: node.data?.globalNodePlan || { enabled: false },\n                onUpdate: (data: any) => {\n                  const updatedNodes = nodesRef.current.map(n =>\n                    n.id === node.id ? { ...n, data: { ...n.data, ...data } } : n\n                  );\n                  onNodesChangeRef.current(updatedNodes);\n                },\n                onDelete: () => {\n                  const updatedNodes = nodesRef.current.filter(n => n.id !== node.id);\n                  const updatedEdges = edges.filter(e => e.source !== node.id && e.target !== node.id);\n                  onNodesChangeRef.current(updatedNodes);\n                  if (onEdgesChange) {\n                    onEdgesChange(updatedEdges);\n                  }\n                },\n                onConfigure: () => handleNodeClick(node),\n                onConnectionStart: () => handleAddNode(node.id), // Quick add\n                onManualConnectionStart: startManualConnection, // Manual connection\n              }}\n              selected={selectedNode?.id === node.id}\n              nodeId={node.id}\n            />\n          </div>\n        ))}\n\n        {/* Connection SVG Layer */}\n        <svg\n          className=\"absolute inset-0 pointer-events-none\"\n          style={{ zIndex: 5 }}\n          width=\"100%\"\n          height=\"100%\"\n        >\n          {renderConnections()}\n\n          {/* Manual connection preview line */}\n          {isConnecting && connectionStart && (\n            <g>\n              <defs>\n                <linearGradient id=\"connectionPreview\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"#14b8a6\" stopOpacity=\"1.0\" />\n                  <stop offset=\"100%\" stopColor=\"#06b6d4\" stopOpacity=\"0.8\" />\n                </linearGradient>\n              </defs>\n\n              <path\n                d={`M ${connectionStart.x} ${connectionStart.y} Q ${connectionStart.x + (mousePosition.x - connectionStart.x) / 2} ${connectionStart.y + 50}, ${mousePosition.x} ${mousePosition.y}`}\n                stroke=\"url(#connectionPreview)\"\n                strokeWidth=\"3\"\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeDasharray=\"8,4\"\n                className=\"animate-pulse\"\n              />\n\n              <circle\n                cx={mousePosition.x}\n                cy={mousePosition.y}\n                r=\"6\"\n                fill=\"#14b8a6\"\n                stroke=\"white\"\n                strokeWidth=\"2\"\n                className=\"animate-pulse\"\n              />\n            </g>\n          )}\n        </svg>\n        </div>\n\n        {/* Canvas controls - VAPI style */}\n        <div className=\"absolute bottom-4 right-4 bg-white rounded-lg shadow-sm border border-gray-200 z-50 flex items-center gap-1 px-2 py-1\">\n          <button\n            className=\"w-7 h-7 hover:bg-gray-100 rounded flex items-center justify-center text-gray-600 hover:text-gray-800 transition-colors\"\n            onClick={() => {\n              const newZoom = Math.max(zoom * 0.8, 0.1);\n              setZoom(newZoom);\n            }}\n            title=\"Zoom Out\"\n          >\n            <span className=\"text-sm font-bold leading-none\">−</span>\n          </button>\n          <div className=\"text-xs text-gray-500 font-medium px-2 min-w-[40px] text-center\">\n            {Math.round(zoom * 100)}%\n          </div>\n          <button\n            className=\"w-7 h-7 hover:bg-gray-100 rounded flex items-center justify-center text-gray-600 hover:text-gray-800 transition-colors\"\n            onClick={() => {\n              const newZoom = Math.min(zoom * 1.2, 3);\n              setZoom(newZoom);\n            }}\n            title=\"Zoom In\"\n          >\n            <span className=\"text-sm font-bold leading-none\">+</span>\n          </button>\n        </div>\n\n        \n       \n      </div>\n    </div>\n  );\n};\nexport default VapiCanvasSimple;\n","import React, { useState } from 'react';\nimport { MessageCircle, Settings, Trash2, Globe, Variable } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\n\n\ninterface VapiNodeProps {\n  data: {\n    name?: string;\n    type: string;\n    prompt?: string;\n    firstMessage?: string;\n    isStart?: boolean;\n    variables?: any[];\n    globalNodePlan?: { enabled: boolean };\n    onUpdate: (data: any) => void;\n    onDelete: () => void;\n    onConfigure?: () => void;\n    onConnectionStart?: (nodeId: string, position: { x: number; y: number }) => void;\n  onManualConnectionStart?: (nodeId: string, position: { x: number; y: number }) => void; // New prop for opening side panel\n  };\n  selected: boolean;\n  nodeId?: string; // Add nodeId prop\n}\n\nconst VapiNode: React.FC<VapiNodeProps> = ({ data, selected, nodeId }) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n\n\n  const getNodeIcon = (type: string) => {\n    switch (type) {\n      case 'conversation':\n        return {\n          icon: <MessageCircle className=\"h-4 w-4 text-white\" />,\n          bgColor: 'bg-teal-500'\n        };\n      case 'apiRequest':\n        return {\n          icon: <Globe className=\"h-4 w-4 text-white\" />,\n          bgColor: 'bg-blue-500'\n        };\n      case 'transferCall':\n        return {\n          icon: <Variable className=\"h-4 w-4 text-white\" />,\n          bgColor: 'bg-green-500'\n        };\n      case 'endCall':\n        return {\n          icon: <Trash2 className=\"h-4 w-4 text-white\" />,\n          bgColor: 'bg-red-500'\n        };\n      case 'tool':\n        return {\n          icon: <Settings className=\"h-4 w-4 text-white\" />,\n          bgColor: 'bg-orange-500'\n        };\n      default:\n        return {\n          icon: <MessageCircle className=\"h-4 w-4 text-white\" />,\n          bgColor: 'bg-teal-500'\n        };\n    }\n  };\n\n  const getNodeDisplayName = (type: string) => {\n    switch (type) {\n      case 'conversation':\n        return 'Conversation';\n      case 'apiRequest':\n        return 'API Request';\n      case 'transferCall':\n        return 'Transfer Call';\n      case 'endCall':\n        return 'End Call';\n      case 'tool':\n        return 'Tool';\n      default:\n        return 'Node';\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={`\n          relative rounded-2xl border-2 shadow-xl transition-all duration-300 min-w-[300px] max-w-[340px] bg-gradient-to-br from-white via-slate-50 to-white backdrop-blur-sm\n          ${selected\n            ? 'border-indigo-500 shadow-2xl ring-4 ring-indigo-100'\n            : 'border-gray-200 hover:border-indigo-300 hover:shadow-lg'\n          }\n          ${data.isStart\n            ? 'ring-4 ring-blue-100 border-blue-400 shadow-blue-100'\n            : ''\n          }\n        `}\n        style={{\n          minHeight: '140px',\n          boxShadow: selected\n            ? '0 25px 50px -12px rgba(79, 70, 229, 0.25), 0 0 0 1px rgba(79, 70, 229, 0.05)'\n            : '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(0, 0, 0, 0.05)',\n          transform: selected ? 'scale(1.02)' : 'scale(1)',\n        }}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        {/* Enterprise Header with gradient background */}\n        <div className=\"flex items-center justify-between p-5 border-b border-gray-100 bg-gradient-to-r from-slate-50 to-gray-50 rounded-t-2xl\">\n          <div className=\"flex items-center gap-4\">\n            <div className={`\n              w-10 h-10 rounded-xl flex items-center justify-center shadow-lg transition-all duration-300 hover:scale-110\n              ${getNodeIcon(data.type).bgColor}\n            `}\n            style={{\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15), inset 0 1px 0 rgba(255, 255, 255, 0.2)'\n            }}>\n              {getNodeIcon(data.type).icon}\n            </div>\n            <div>\n              <div className=\"font-bold text-base text-gray-900 tracking-tight\">\n                {data.name || getNodeDisplayName(data.type)}\n              </div>\n              <div className=\"text-xs text-gray-500 font-medium mt-0.5\">\n                {data.type.charAt(0).toUpperCase() + data.type.slice(1)} Node\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-8 w-8 p-0 hover:bg-indigo-50 text-gray-500 hover:text-indigo-600 rounded-lg transition-all duration-200\"\n            >\n              <Globe className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-8 w-8 p-0 hover:bg-indigo-50 text-gray-500 hover:text-indigo-600 rounded-lg transition-all duration-200\"\n            >\n              <Variable className=\"h-4 w-4\" />\n            </Button>\n            {/* Delete Button - Only show for non-start nodes */}\n            {!data.isStart && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  if (window.confirm('Are you sure you want to delete this node?')) {\n                    data.onDelete();\n                  }\n                }}\n                className=\"h-8 w-8 p-0 hover:bg-red-50 text-gray-500 hover:text-red-600 rounded-lg transition-all duration-200\"\n                title=\"Delete node\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Enterprise Content */}\n        <div className=\"p-5 space-y-4\">\n          <div className=\"text-sm\">\n            <div className=\"font-semibold text-gray-700 mb-3 flex items-center gap-2\">\n              <div className=\"w-1 h-4 bg-gradient-to-b from-indigo-500 to-purple-500 rounded-full\"></div>\n              Prompt Configuration\n            </div>\n            <div className=\"text-gray-600 leading-relaxed bg-gray-50 p-3 rounded-lg border border-gray-100\">\n              {data.prompt && data.prompt.length > 100\n                ? `${data.prompt.substring(0, 100)}...`\n                : data.prompt || 'No Prompt Specified'}\n            </div>\n          </div>\n\n          {/* Enterprise Metrics */}\n          <div className=\"flex items-center justify-between text-xs bg-gradient-to-r from-indigo-50 to-purple-50 p-3 rounded-lg border border-indigo-100\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"font-medium text-gray-700\">Cost: $0.09/min</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n              <span className=\"font-medium text-gray-700\">Latency: 1.1s</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Enterprise Top Connection Point (Input) - Perfect positioning */}\n        <div\n          className=\"absolute left-1/2 transform -translate-x-1/2 w-4 h-4 bg-gradient-to-br from-indigo-400 to-indigo-600 rounded-full z-20 border-3 border-white cursor-pointer hover:scale-150 hover:from-indigo-500 hover:to-indigo-700 transition-all duration-300 shadow-lg\"\n          data-connection-point=\"input\"\n          data-node-id={nodeId}\n          title=\"Input connection point\"\n          style={{\n            top: '-8px', // Perfect flush positioning\n            boxShadow: '0 4px 12px rgba(79, 70, 229, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.3)'\n          }}\n        />\n\n        {/* Enterprise Bottom Connection Point (Output) - Perfect positioning */}\n        <div\n          className=\"absolute left-1/2 transform -translate-x-1/2 w-4 h-4 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full z-20 border-3 border-white cursor-pointer hover:scale-150 hover:from-purple-500 hover:to-purple-700 transition-all duration-300 shadow-lg\"\n          data-connection-point=\"output\"\n          data-node-id={nodeId}\n          title=\"Output connection point - drag to connect\"\n          onMouseDown={(e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            console.log('🔗 Starting connection from node:', nodeId);\n            if (data.onConnectionStart && nodeId) {\n              data.onConnectionStart(nodeId, { x: 0, y: 0 });\n            }\n          }}\n          style={{\n            bottom: '-8px', // Perfect flush positioning\n            boxShadow: '0 4px 12px rgba(139, 92, 246, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.3)'\n          }}\n        />\n\n        {/* Enterprise Hover Add Button with Perfect Spacing */}\n        {isHovered && data.type !== 'endCall' && (\n          <div className=\"absolute -bottom-16 left-1/2 transform -translate-x-1/2 z-30\">\n            <button\n              className=\"w-12 h-12 bg-gradient-to-br from-indigo-500 via-indigo-600 to-purple-600 hover:from-indigo-600 hover:via-indigo-700 hover:to-purple-700 text-white rounded-full flex items-center justify-center transition-all duration-300 shadow-2xl hover:shadow-3xl hover:scale-110 border-2 border-white\"\n              style={{\n                boxShadow: '0 8px 25px rgba(79, 70, 229, 0.4), 0 0 0 4px rgba(255, 255, 255, 0.8), inset 0 1px 0 rgba(255, 255, 255, 0.2)'\n              }}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (data.onConnectionStart && nodeId) {\n                  data.onConnectionStart(nodeId, { x: 0, y: 0 });\n                }\n              }}\n              title=\"Add new node\"\n            >\n              <span className=\"text-xl font-bold leading-none drop-shadow-sm\">+</span>\n\n              {/* Subtle pulse ring animation */}\n              <div className=\"absolute inset-0 rounded-full border-2 border-indigo-400 animate-ping opacity-30\"></div>\n            </button>\n          </div>\n        )}\n\n      </div>\n    </>\n  );\n};\n\nexport default VapiNode;\n","import { apiClient } from '@/api/client';\n\nexport interface VapiNodeType {\n  type: string;\n  label: string;\n  description: string;\n  icon: string;\n  color: string;\n  category: string;\n  configuration: {\n    fields: Array<{\n      name: string;\n      type: 'text' | 'textarea' | 'select' | 'number' | 'boolean';\n      label: string;\n      description?: string;\n      required?: boolean;\n      options?: Array<{ label: string; value: string }>;\n      defaultValue?: any;\n    }>;\n  };\n}\n\n// Mock VAPI node types (in real implementation, this would come from VAPI API)\nconst VAPI_NODE_TYPES: VapiNodeType[] = [\n  {\n    type: 'conversation',\n    label: 'Conversation',\n    description: 'AI conversation with users',\n    icon: 'MessageCircle',\n    color: 'bg-blue-100 text-blue-600',\n    category: 'core',\n    configuration: {\n      fields: [\n        {\n          name: 'name',\n          type: 'text',\n          label: 'Node Name',\n          description: 'Name for this conversation node',\n          required: true,\n          defaultValue: 'Conversation'\n        },\n        {\n          name: 'firstMessage',\n          type: 'text',\n          label: 'First Message',\n          description: 'Initial message to send to the user',\n          required: false,\n          defaultValue: 'Hello! How can I help you today?'\n        },\n        {\n          name: 'prompt',\n          type: 'textarea',\n          label: 'System Prompt',\n          description: 'Instructions for the AI assistant',\n          required: true,\n          defaultValue: 'You are a helpful AI assistant. Respond naturally and helpfully to user queries.'\n        },\n        {\n          name: 'model',\n          type: 'select',\n          label: 'AI Model',\n          description: 'Choose the AI model to use',\n          required: true,\n          options: [\n            { label: 'GPT-4', value: 'gpt-4' },\n            { label: 'GPT-3.5 Turbo', value: 'gpt-3.5-turbo' },\n            { label: 'Claude 3', value: 'claude-3' }\n          ],\n          defaultValue: 'gpt-4'\n        },\n        {\n          name: 'temperature',\n          type: 'number',\n          label: 'Temperature',\n          description: 'Controls randomness (0.0 to 1.0)',\n          required: false,\n          defaultValue: 0.7\n        }\n      ]\n    }\n  },\n  {\n    type: 'apiRequest',\n    label: 'API Request',\n    description: 'Make HTTP requests',\n    icon: 'Zap',\n    color: 'bg-purple-100 text-purple-600',\n    category: 'integration',\n    configuration: {\n      fields: [\n        {\n          name: 'name',\n          type: 'text',\n          label: 'Node Name',\n          required: true,\n          defaultValue: 'API Request'\n        },\n        {\n          name: 'method',\n          type: 'select',\n          label: 'HTTP Method',\n          required: true,\n          options: [\n            { label: 'GET', value: 'GET' },\n            { label: 'POST', value: 'POST' },\n            { label: 'PUT', value: 'PUT' },\n            { label: 'DELETE', value: 'DELETE' }\n          ],\n          defaultValue: 'GET'\n        },\n        {\n          name: 'url',\n          type: 'text',\n          label: 'URL',\n          description: 'API endpoint URL',\n          required: true,\n          defaultValue: ''\n        },\n        {\n          name: 'headers',\n          type: 'textarea',\n          label: 'Headers (JSON)',\n          description: 'HTTP headers as JSON object',\n          required: false,\n          defaultValue: '{}'\n        },\n        {\n          name: 'body',\n          type: 'textarea',\n          label: 'Request Body (JSON)',\n          description: 'Request body for POST/PUT requests',\n          required: false,\n          defaultValue: '{}'\n        }\n      ]\n    }\n  },\n  {\n    type: 'transferCall',\n    label: 'Transfer Call',\n    description: 'Transfer to another number',\n    icon: 'PhoneCall',\n    color: 'bg-green-100 text-green-600',\n    category: 'telephony',\n    configuration: {\n      fields: [\n        {\n          name: 'name',\n          type: 'text',\n          label: 'Node Name',\n          required: true,\n          defaultValue: 'Transfer Call'\n        },\n        {\n          name: 'destination',\n          type: 'text',\n          label: 'Destination Number',\n          description: 'Phone number to transfer to',\n          required: true,\n          defaultValue: ''\n        },\n        {\n          name: 'transferMessage',\n          type: 'text',\n          label: 'Transfer Message',\n          description: 'Message to play before transfer',\n          required: false,\n          defaultValue: 'Please hold while I transfer you.'\n        },\n        {\n          name: 'summary',\n          type: 'textarea',\n          label: 'Call Summary',\n          description: 'Summary to provide to the receiving party',\n          required: false,\n          defaultValue: ''\n        }\n      ]\n    }\n  },\n  {\n    type: 'endCall',\n    label: 'End Call',\n    description: 'Terminate the call',\n    icon: 'StopCircle',\n    color: 'bg-red-100 text-red-600',\n    category: 'telephony',\n    configuration: {\n      fields: [\n        {\n          name: 'name',\n          type: 'text',\n          label: 'Node Name',\n          required: true,\n          defaultValue: 'End Call'\n        },\n        {\n          name: 'endMessage',\n          type: 'text',\n          label: 'End Message',\n          description: 'Final message before ending call',\n          required: false,\n          defaultValue: 'Thank you for calling. Have a great day!'\n        }\n      ]\n    }\n  },\n  {\n    type: 'tool',\n    label: 'Tool',\n    description: 'Use external tools',\n    icon: 'Wrench',\n    color: 'bg-orange-100 text-orange-600',\n    category: 'integration',\n    configuration: {\n      fields: [\n        {\n          name: 'name',\n          type: 'text',\n          label: 'Node Name',\n          required: true,\n          defaultValue: 'Tool'\n        },\n        {\n          name: 'toolType',\n          type: 'select',\n          label: 'Tool Type',\n          required: true,\n          options: [\n            { label: 'Web Search', value: 'web_search' },\n            { label: 'Calculator', value: 'calculator' },\n            { label: 'Weather', value: 'weather' },\n            { label: 'Custom Function', value: 'custom' }\n          ],\n          defaultValue: 'web_search'\n        },\n        {\n          name: 'configuration',\n          type: 'textarea',\n          label: 'Tool Configuration (JSON)',\n          description: 'Tool-specific configuration',\n          required: false,\n          defaultValue: '{}'\n        }\n      ]\n    }\n  }\n];\n\nexport const getVapiNodeTypes = async (): Promise<VapiNodeType[]> => {\n  try {\n    // In a real implementation, this would be:\n    // const response = await apiClient.get('/vapi/node-types');\n    // return response.data;\n    \n    // For now, return mock data\n    return new Promise((resolve) => {\n      setTimeout(() => resolve(VAPI_NODE_TYPES), 500); // Simulate API delay\n    });\n  } catch (error) {\n    console.error('Error fetching VAPI node types:', error);\n    throw error;\n  }\n};\n\nexport const getNodeTypeConfiguration = async (nodeType: string): Promise<VapiNodeType | null> => {\n  try {\n    const nodeTypes = await getVapiNodeTypes();\n    return nodeTypes.find(type => type.type === nodeType) || null;\n  } catch (error) {\n    console.error('Error fetching node type configuration:', error);\n    throw error;\n  }\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { X, Settings, MessageCircle, Globe, Variable, Star } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { getNodeTypeConfiguration, VapiNodeType } from '@/api/services/vapi/nodeTypesService';\nimport { Node } from '../types/workflow';\n\ninterface VapiNodeSidePanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  node: Node | null;\n  onSave: (nodeData: any) => void;\n}\n\nexport const VapiNodeSidePanel: React.FC<VapiNodeSidePanelProps> = ({\n  isOpen,\n  onClose,\n  node,\n  onSave,\n}) => {\n  const [nodeConfig, setNodeConfig] = useState<VapiNodeType | null>(null);\n  const [formData, setFormData] = useState<Record<string, any>>({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (node && isOpen) {\n      console.log('Side panel opened for node:', node);\n      loadNodeConfiguration();\n    }\n  }, [node, isOpen]);\n\n  const loadNodeConfiguration = async () => {\n    if (!node) return;\n    \n    setLoading(true);\n    try {\n      const config = await getNodeTypeConfiguration(node.type);\n      setNodeConfig(config);\n      \n      // Initialize form data with existing node data\n      const initialData = { ...node.data };\n      setFormData(initialData);\n      console.log('Loaded node config:', config);\n      console.log('Initial form data:', initialData);\n    } catch (error) {\n      console.error('Failed to load node configuration:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFieldChange = useCallback((fieldName: string, value: any) => {\n    console.log('Field change:', fieldName, value);\n    setFormData(prev => {\n      const newData = { ...prev, [fieldName]: value };\n      console.log('Updated form data:', newData);\n      return newData;\n    });\n  }, []);\n\n  const handleSave = useCallback(() => {\n    console.log('Saving node configuration:', formData);\n    onSave(formData);\n  }, [formData, onSave]);\n\n  const handleClose = useCallback(() => {\n    console.log('Closing side panel');\n    onClose();\n  }, [onClose]);\n\n  const getNodeIcon = () => {\n    switch (node?.type) {\n      case 'conversation':\n        return <MessageCircle className=\"h-5 w-5 text-blue-600\" />;\n      case 'apiRequest':\n        return <div className=\"h-5 w-5 bg-purple-600 rounded\" />;\n      case 'transferCall':\n        return <div className=\"h-5 w-5 bg-green-600 rounded\" />;\n      case 'endCall':\n        return <div className=\"h-5 w-5 bg-red-600 rounded\" />;\n      case 'tool':\n        return <div className=\"h-5 w-5 bg-orange-600 rounded\" />;\n      default:\n        return <MessageCircle className=\"h-5 w-5 text-blue-600\" />;\n    }\n  };\n\n  const getNodeTypeLabel = () => {\n    switch (node?.type) {\n      case 'conversation':\n        return 'Conversation Node';\n      case 'apiRequest':\n        return 'API Request Node';\n      case 'transferCall':\n        return 'Transfer Call Node';\n      case 'endCall':\n        return 'End Call Node';\n      case 'tool':\n        return 'Tool Node';\n      default:\n        return 'Node';\n    }\n  };\n\n  const renderField = (field: any) => {\n    const value = formData[field.name] || '';\n\n    switch (field.type) {\n      case 'text':\n        return (\n          <div key={field.name} className=\"space-y-2\">\n            <Label htmlFor={field.name} className=\"text-sm font-medium text-gray-700\">\n              {field.label}\n              {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n            </Label>\n            <Input\n              id={field.name}\n              value={value}\n              onChange={(e) => handleFieldChange(field.name, e.target.value)}\n              placeholder={field.description}\n              className=\"w-full border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n            />\n            {field.description && (\n              <p className=\"text-xs text-gray-500\">{field.description}</p>\n            )}\n          </div>\n        );\n\n      case 'textarea':\n        return (\n          <div key={field.name} className=\"space-y-2\">\n            <Label htmlFor={field.name} className=\"text-sm font-medium text-gray-700\">\n              {field.label}\n              {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n            </Label>\n            <Textarea\n              id={field.name}\n              value={value}\n              onChange={(e) => handleFieldChange(field.name, e.target.value)}\n              placeholder={field.description}\n              className=\"w-full min-h-[120px] border-gray-300 focus:border-blue-500 focus:ring-blue-500 resize-none\"\n            />\n            {field.description && (\n              <p className=\"text-xs text-gray-500\">{field.description}</p>\n            )}\n          </div>\n        );\n\n      case 'select':\n        return (\n          <div key={field.name} className=\"space-y-2\">\n            <Label htmlFor={field.name} className=\"text-sm font-medium text-gray-700\">\n              {field.label}\n              {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n            </Label>\n            <Select value={value} onValueChange={(val) => handleFieldChange(field.name, val)}>\n              <SelectTrigger className=\"w-full border-gray-300 focus:border-blue-500 focus:ring-blue-500\">\n                <SelectValue placeholder={field.description} />\n              </SelectTrigger>\n              <SelectContent>\n                {field.options?.map((option: any) => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {field.description && (\n              <p className=\"text-xs text-gray-500\">{field.description}</p>\n            )}\n          </div>\n        );\n\n      case 'boolean':\n        return (\n          <div key={field.name} className=\"flex items-center justify-between py-2\">\n            <div className=\"space-y-1\">\n              <Label htmlFor={field.name} className=\"text-sm font-medium text-gray-700\">\n                {field.label}\n              </Label>\n              {field.description && (\n                <p className=\"text-xs text-gray-500\">{field.description}</p>\n              )}\n            </div>\n            <Switch\n              id={field.name}\n              checked={value}\n              onCheckedChange={(checked) => handleFieldChange(field.name, checked)}\n            />\n          </div>\n        );\n\n      case 'number':\n        return (\n          <div key={field.name} className=\"space-y-2\">\n            <Label htmlFor={field.name} className=\"text-sm font-medium text-gray-700\">\n              {field.label}\n              {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n            </Label>\n            <Input\n              id={field.name}\n              type=\"number\"\n              value={value}\n              onChange={(e) => handleFieldChange(field.name, parseFloat(e.target.value) || 0)}\n              placeholder={field.description}\n              className=\"w-full border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n            />\n            {field.description && (\n              <p className=\"text-xs text-gray-500\">{field.description}</p>\n            )}\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-y-0 right-0 z-50 w-96 bg-white border-l border-gray-200 shadow-xl\"\n      onMouseDown={(e) => e.stopPropagation()}\n      onMouseMove={(e) => e.stopPropagation()}\n      onMouseUp={(e) => e.stopPropagation()}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <div className=\"flex flex-col h-full\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200 bg-gray-50\">\n          <div className=\"flex items-center gap-3\">\n            {getNodeIcon()}\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {getNodeTypeLabel()}\n              </h2>\n              <p className=\"text-sm text-gray-500\">\n                Configure node settings\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClose}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : nodeConfig ? (\n            <div className=\"space-y-6\">\n              {nodeConfig.configuration.fields.map(renderField)}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No configuration available for this node type.\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={handleClose}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSave}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n            >\n              Save Changes\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { X, Save } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Edge } from '../types/workflow';\n\ninterface EdgeLabelEditSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  edge: Edge | null;\n  onSave: (edgeId: string, newLabel: string) => void;\n}\n\nconst EdgeLabelEditSidebar: React.FC<EdgeLabelEditSidebarProps> = ({\n  isOpen,\n  onClose,\n  edge,\n  onSave,\n}) => {\n  const [label, setLabel] = useState('');\n  const [description, setDescription] = useState('');\n\n  useEffect(() => {\n    if (edge) {\n      setLabel(edge.label || '');\n      setDescription(''); // You can add description field to Edge type if needed\n    }\n  }, [edge]);\n\n  const handleSave = () => {\n    if (edge && label.trim()) {\n      onSave(edge.id, label.trim());\n      onClose();\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      onClose();\n    } else if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n      handleSave();\n    }\n  };\n\n  if (!isOpen || !edge) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 z-40\"\n        onClick={onClose}\n      />\n      \n      {/* Sidebar */}\n      <div \n        className=\"fixed right-0 top-0 h-full w-96 bg-white shadow-2xl z-50 transform transition-transform duration-300 ease-in-out\"\n        onKeyDown={handleKeyDown}\n        tabIndex={-1}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-teal-50 to-emerald-50\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">Edit Connection Label</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Customize the condition text for this workflow connection</p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"h-8 w-8 p-0 hover:bg-gray-100\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* Connection Info */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Connection Details</h3>\n            <div className=\"text-xs text-gray-600 space-y-1\">\n              <div>From: <span className=\"font-medium\">{edge.source}</span></div>\n              <div>To: <span className=\"font-medium\">{edge.target}</span></div>\n              <div>ID: <span className=\"font-mono\">{edge.id}</span></div>\n            </div>\n          </div>\n\n          {/* Label Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edge-label\" className=\"text-sm font-medium text-gray-900\">\n              Condition Label\n            </Label>\n            <Input\n              id=\"edge-label\"\n              value={label}\n              onChange={(e) => setLabel(e.target.value)}\n              placeholder=\"e.g., if the user said yes\"\n              className=\"w-full\"\n              autoFocus\n            />\n            <p className=\"text-xs text-gray-500\">\n              This text will appear on the connection line between nodes\n            </p>\n          </div>\n\n          {/* Description Input (Optional) */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edge-description\" className=\"text-sm font-medium text-gray-900\">\n              Description (Optional)\n            </Label>\n            <Textarea\n              id=\"edge-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Add additional details about this condition...\"\n              className=\"w-full h-20 resize-none\"\n            />\n            <p className=\"text-xs text-gray-500\">\n              Internal notes about this connection condition\n            </p>\n          </div>\n\n          {/* Common Condition Templates */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium text-gray-900\">\n              Quick Templates\n            </Label>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {[\n                'if the user said yes',\n                'if the user said no',\n                'if user needs help',\n                'if call should transfer',\n                'if information collected',\n                'default path'\n              ].map((template) => (\n                <button\n                  key={template}\n                  onClick={() => setLabel(template)}\n                  className=\"text-left px-3 py-2 text-xs bg-gray-50 hover:bg-teal-50 rounded border border-gray-200 hover:border-teal-200 transition-colors\"\n                >\n                  {template}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-6 border-t border-gray-200 bg-white\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-xs text-gray-500\">\n              Press Ctrl+Enter to save, Esc to cancel\n            </div>\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"px-4\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSave}\n                disabled={!label.trim()}\n                className=\"px-4 bg-teal-600 hover:bg-teal-700\"\n              >\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save Changes\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EdgeLabelEditSidebar;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Vapi from '@vapi-ai/web';\nimport { Button } from '../../../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../../components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../../components/ui/dialog';\nimport { Badge } from '../../../components/ui/badge';\nimport {\n  Phone,\n  PhoneOff,\n  Mic,\n  MicOff,\n  Volume2,\n  Settings,\n  Loader2,\n  Radio,\n  MessageSquare,\n  User,\n  Bot\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport secureLocalStorage from 'react-secure-storage';\n\ninterface VapiWebCallProps {\n  workflowId?: string;\n  workflowData?: any;\n  workflowName?: string;\n  workflowDescription?: string;\n  onCallStart?: () => void;\n  onCallEnd?: () => void;\n  onError?: (error: any) => void;\n}\n\ninterface CallState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  isMuted: boolean;\n  volumeLevel: number;\n  callDuration: number;\n  status: 'idle' | 'connecting' | 'connected' | 'ended' | 'error';\n}\n\ninterface TranscriptMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  type?: 'transcript' | 'function-call' | 'status';\n}\n\nconst VapiWebCall: React.FC<VapiWebCallProps> = ({\n  workflowId,\n  workflowData,\n  workflowName = 'Unnamed Workflow',\n  workflowDescription = '',\n  onCallStart,\n  onCallEnd,\n  onError\n}) => {\n  // Get VAPI public key from environment\n  const publicApiKey = import.meta.env.VITE_VAPI_PUBLIC_KEY;\n  \n  // VAPI instance ref\n  const vapiRef = useRef<Vapi | null>(null);\n  \n  // Call state\n  const [callState, setCallState] = useState<CallState>({\n    isConnected: false,\n    isConnecting: false,\n    isMuted: false,\n    volumeLevel: 0,\n    callDuration: 0,\n    status: 'idle'\n  });\n  \n  // Transcript and messages\n  const [transcript, setTranscript] = useState<TranscriptMessage[]>([]);\n  const [assistantId, setAssistantId] = useState<string | null>(null);\n  const [isCreatingAssistant, setIsCreatingAssistant] = useState(false);\n  \n  // Call duration timer\n  const callTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Initialize VAPI\n  useEffect(() => {\n    console.log('🔧 Initializing VAPI with key:', publicApiKey ? `${publicApiKey.substring(0, 8)}...` : 'Not provided');\n\n    if (publicApiKey && publicApiKey !== 'your-vapi-public-key-here') {\n      try {\n        vapiRef.current = new Vapi(publicApiKey);\n        console.log('✅ VAPI instance created successfully');\n\n        // Set up event listeners\n        setupVapiEventListeners();\n        \n      } catch (error) {\n        console.error('❌ Failed to initialize VAPI:', error);\n        toast.error('Failed to initialize VAPI. Please check your API key.');\n      }\n    } else {\n      console.warn('⚠️ VAPI public key not configured');\n    }\n\n    return () => {\n      if (vapiRef.current) {\n        vapiRef.current.stop();\n      }\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n      }\n    };\n  }, [publicApiKey]);\n\n  // Setup VAPI event listeners\n  const setupVapiEventListeners = () => {\n    if (!vapiRef.current) return;\n\n    // Call start event\n    vapiRef.current.on('call-start', () => {\n      console.log('🎙️ VAPI call started');\n      setCallState(prev => ({\n        ...prev,\n        isConnected: true,\n        isConnecting: false,\n        status: 'connected'\n      }));\n      \n      // Start call timer\n      startCallTimer();\n      \n      toast.success('Call connected! You can now speak.');\n      onCallStart?.();\n    });\n\n    // Call end event\n    vapiRef.current.on('call-end', () => {\n      console.log('📞 VAPI call ended');\n      setCallState(prev => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n        status: 'ended'\n      }));\n      \n      // Stop call timer\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n        callTimerRef.current = null;\n      }\n      \n      toast.info('Call ended');\n      onCallEnd?.();\n    });\n\n    // Speech start event\n    vapiRef.current.on('speech-start', () => {\n      console.log('🗣️ Speech started');\n    });\n\n    // Speech end event\n    vapiRef.current.on('speech-end', () => {\n      console.log('🤐 Speech ended');\n    });\n\n    // Volume level event\n    vapiRef.current.on('volume-level', (volume: number) => {\n      setCallState(prev => ({\n        ...prev,\n        volumeLevel: volume\n      }));\n    });\n\n    // Message event (transcripts, function calls, etc.)\n    vapiRef.current.on('message', (message: any) => {\n      console.log('📨 VAPI message:', message);\n      \n      if (message.type === 'transcript' && message.transcript) {\n        const transcriptMessage: TranscriptMessage = {\n          role: message.role || 'assistant',\n          content: message.transcript,\n          timestamp: new Date(),\n          type: 'transcript'\n        };\n        \n        setTranscript(prev => [...prev, transcriptMessage]);\n      }\n    });\n\n    // Error event\n    vapiRef.current.on('error', (error: any) => {\n      console.error('❌ VAPI error:', error);\n      setCallState(prev => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n        status: 'error'\n      }));\n      \n      toast.error(`Call error: ${error.message || 'Unknown error'}`);\n      onError?.(error);\n    });\n  };\n\n  // Start call timer\n  const startCallTimer = () => {\n    callTimerRef.current = setInterval(() => {\n      setCallState(prev => ({\n        ...prev,\n        callDuration: prev.callDuration + 1\n      }));\n    }, 1000);\n  };\n\n  // Format call duration\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Demo login for testing\n  const performDemoLogin = async () => {\n    try {\n      console.log('🔐 Performing demo login...');\n      const response = await fetch(`${import.meta.env.VITE_APP_BASE_URL}/api/auth/demo-login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        if (result.success && result.data.token) {\n          secureLocalStorage.setItem('token', result.data.token);\n          console.log('✅ Demo login successful');\n          toast.success('Demo login successful');\n          return result.data.token;\n        }\n      }\n      throw new Error('Demo login failed');\n    } catch (error) {\n      console.error('❌ Demo login error:', error);\n      toast.error('Demo login failed');\n      return null;\n    }\n  };\n\n  // Create or sync VAPI workflow\n  const createVapiWorkflow = async () => {\n    try {\n      setIsCreatingAssistant(true);\n      console.log('🔄 Creating/syncing VAPI workflow...');\n\n      // Check authentication token\n      let token = secureLocalStorage.getItem('token') as string;\n      console.log('🔑 Auth token:', token ? `${token.substring(0, 20)}...` : 'NOT FOUND');\n\n      if (!token) {\n        console.log('🔐 No token found, attempting demo login...');\n        token = await performDemoLogin();\n\n        if (!token) {\n          throw new Error('Authentication failed. Please log in.');\n        }\n      }\n\n      // Convert workflow data to VAPI workflow format\n      const vapiWorkflowData = {\n        name: workflowName,\n        description: workflowDescription,\n        workflowId: workflowId,\n        nodes: workflowData?.nodes || [],\n        edges: workflowData?.edges || []\n      };\n\n      console.log('📤 Sending workflow to VAPI:', `${import.meta.env.VITE_APP_BASE_URL}/api/workflows/vapi/sync`);\n      console.log('📋 Workflow data:', vapiWorkflowData);\n\n      const response = await fetch(`${import.meta.env.VITE_APP_BASE_URL}/api/workflows/vapi/sync`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(vapiWorkflowData)\n      });\n\n      console.log('📥 Response status:', response.status, response.statusText);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('❌ API Error Response:', errorText);\n\n        if (response.status === 401) {\n          throw new Error('Authentication failed. Please log in again.');\n        } else if (response.status === 403) {\n          throw new Error('Access denied. You may not have permission to create workflows.');\n        } else {\n          throw new Error(`Failed to sync workflow: ${response.status} ${response.statusText}`);\n        }\n      }\n\n      const result = await response.json();\n      console.log('📥 API Response:', result);\n\n      if (result.success && result.workflowId) {\n        console.log('✅ VAPI workflow synced:', result.workflowId);\n        return result.workflowId;\n      } else {\n        throw new Error(result.error || 'Failed to sync workflow');\n      }\n\n    } catch (error: any) {\n      console.error('❌ Error syncing VAPI workflow:', error);\n      toast.error(`Failed to sync workflow: ${error?.message || 'Unknown error'}`);\n      return null;\n    } finally {\n      setIsCreatingAssistant(false);\n    }\n  };\n\n  // Start web call\n  const startWebCall = async () => {\n    console.log('🚀 Starting VAPI web call...');\n\n    if (!vapiRef.current) {\n      toast.error('VAPI not initialized. Please check your API key configuration.');\n      return;\n    }\n\n    if (!publicApiKey || publicApiKey === 'your-vapi-public-key-here') {\n      toast.error('VAPI public key not configured. Please set VITE_VAPI_PUBLIC_KEY in your environment.');\n      return;\n    }\n\n    try {\n      setCallState(prev => ({\n        ...prev,\n        isConnecting: true,\n        status: 'connecting',\n        callDuration: 0\n      }));\n\n      setTranscript([]);\n\n      // Sync workflow to VAPI first\n      console.log('🔄 Syncing workflow to VAPI...');\n      const vapiWorkflowId = await createVapiWorkflow();\n\n      if (!vapiWorkflowId) {\n        throw new Error('Failed to sync workflow to VAPI');\n      }\n\n      // Start the call with workflow ID\n      console.log('📞 Starting workflow call with ID:', vapiWorkflowId);\n\n      // Use VAPI's workflow call format\n      const callConfig = {\n        workflowId: vapiWorkflowId,\n        metadata: {\n          portalWorkflowId: workflowId,\n          workflowName: workflowName,\n          initiatedFrom: 'portal'\n        }\n      };\n\n      await vapiRef.current.start(callConfig);\n\n    } catch (error) {\n      console.error('❌ Error starting web call:', error);\n      setCallState(prev => ({\n        ...prev,\n        isConnecting: false,\n        status: 'error'\n      }));\n      toast.error(`Failed to start call: ${(error as any)?.message || 'Unknown error'}`);\n    }\n  };\n\n  // Stop web call\n  const stopWebCall = () => {\n    console.log('🛑 Stopping VAPI web call...');\n    \n    if (vapiRef.current) {\n      vapiRef.current.stop();\n    }\n  };\n\n  // Toggle mute\n  const toggleMute = () => {\n    if (vapiRef.current) {\n      const newMutedState = !callState.isMuted;\n      vapiRef.current.setMuted(newMutedState);\n      \n      setCallState(prev => ({\n        ...prev,\n        isMuted: newMutedState\n      }));\n      \n      toast.info(newMutedState ? 'Microphone muted' : 'Microphone unmuted');\n    }\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"bg-gradient-to-r from-teal-500 to-cyan-600 hover:from-teal-600 hover:to-cyan-700 text-white border-none shadow-lg hover:shadow-xl transition-all duration-300 relative group overflow-hidden\"\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n          <Radio className=\"h-4 w-4 mr-2 relative z-10\" />\n          <span className=\"relative z-10\">Web Call</span>\n          {callState.isConnected && (\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse\" />\n          )}\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\" aria-describedby=\"vapi-web-call-description\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            <div className=\"flex items-center gap-2\">\n              <Radio className=\"h-5 w-5 text-teal-600\" />\n              <span>VAPI Web Call</span>\n            </div>\n            <Badge variant={callState.status === 'connected' ? 'default' : 'secondary'}>\n              {callState.status === 'idle' ? 'Ready' : \n               callState.status === 'connecting' ? 'Connecting...' :\n               callState.status === 'connected' ? 'Connected' :\n               callState.status === 'ended' ? 'Ended' : 'Error'}\n            </Badge>\n          </DialogTitle>\n          <div id=\"vapi-web-call-description\" className=\"sr-only\">\n            VAPI Web Call interface for making voice calls with AI assistants\n          </div>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 h-[600px]\">\n          {/* Call Controls Panel */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Phone className=\"h-5 w-5 text-teal-600\" />\n                  Call Controls\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Main Call Button */}\n                <div className=\"flex justify-center\">\n                  {!callState.isConnected && !callState.isConnecting ? (\n                    <Button\n                      onClick={startWebCall}\n                      size=\"lg\"\n                      className=\"w-20 h-20 rounded-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-2xl transition-all duration-300 hover:shadow-3xl hover:scale-110\"\n                      disabled={isCreatingAssistant}\n                    >\n                      {isCreatingAssistant ? (\n                        <Loader2 className=\"h-8 w-8 animate-spin\" />\n                      ) : (\n                        <Phone className=\"h-8 w-8\" />\n                      )}\n                    </Button>\n                  ) : callState.isConnecting ? (\n                    <Button\n                      size=\"lg\"\n                      className=\"w-20 h-20 rounded-full bg-yellow-500 text-white shadow-2xl\"\n                      disabled\n                    >\n                      <Loader2 className=\"h-8 w-8 animate-spin\" />\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={stopWebCall}\n                      size=\"lg\"\n                      className=\"w-20 h-20 rounded-full bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white shadow-2xl transition-all duration-300 hover:shadow-3xl hover:scale-110\"\n                    >\n                      <PhoneOff className=\"h-8 w-8\" />\n                    </Button>\n                  )}\n                </div>\n\n                {/* Call Status */}\n                <div className=\"text-center\">\n                  <div className=\"text-sm text-gray-600 mb-2\">\n                    {callState.status === 'idle' && 'Ready to start call'}\n                    {callState.status === 'connecting' && 'Connecting to assistant...'}\n                    {callState.status === 'connected' && 'Call in progress'}\n                    {callState.status === 'ended' && 'Call ended'}\n                    {callState.status === 'error' && 'Call error occurred'}\n                  </div>\n                  \n                  {callState.isConnected && (\n                    <div className=\"text-2xl font-mono font-bold text-teal-600\">\n                      {formatDuration(callState.callDuration)}\n                    </div>\n                  )}\n                </div>\n\n                {/* Control Buttons */}\n                {callState.isConnected && (\n                  <div className=\"flex justify-center gap-4\">\n                    <Button\n                      onClick={toggleMute}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className={callState.isMuted ? 'bg-red-100 border-red-300' : ''}\n                    >\n                      {callState.isMuted ? (\n                        <MicOff className=\"h-4 w-4 mr-2 text-red-600\" />\n                      ) : (\n                        <Mic className=\"h-4 w-4 mr-2\" />\n                      )}\n                      {callState.isMuted ? 'Unmute' : 'Mute'}\n                    </Button>\n                    \n                    <Button variant=\"outline\" size=\"sm\">\n                      <Volume2 className=\"h-4 w-4 mr-2\" />\n                      Volume\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Call Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5 text-blue-600\" />\n                  Call Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Workflow:</span>\n                    <div className=\"font-medium\">{workflowName}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Workflow ID:</span>\n                    <div className=\"font-mono text-xs bg-gray-100 p-1 rounded mt-1 break-all\">\n                      {workflowId || 'N/A'}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Assistant ID:</span>\n                    <div className=\"font-mono text-xs bg-gray-100 p-1 rounded mt-1 break-all\">\n                      {isCreatingAssistant ? (\n                        <span className=\"flex items-center gap-1\">\n                          <Loader2 className=\"w-3 h-3 animate-spin\" />\n                          Creating assistant...\n                        </span>\n                      ) : (\n                        assistantId || 'Will be created on call start'\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">API Status:</span>\n                    <div className=\"mt-1\">\n                      {publicApiKey && publicApiKey !== 'your-vapi-public-key-here' ? (\n                        <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                          ✅ VAPI Configured\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"destructive\">\n                          ❌ API Key Missing\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Live Transcript Panel */}\n          <div className=\"space-y-4\">\n            <Card className=\"h-full\">\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5 text-purple-600\" />\n                  Live Transcript\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"h-[500px] overflow-y-auto\">\n                {transcript.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full text-gray-500\">\n                    <div className=\"text-center\">\n                      <MessageSquare className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>Start a call to see the live transcript</p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {transcript.map((message, index) => (\n                      <div\n                        key={index}\n                        className={`flex gap-3 ${\n                          message.role === 'user' ? 'justify-end' : 'justify-start'\n                        }`}\n                      >\n                        <div\n                          className={`max-w-[80%] p-3 rounded-lg ${\n                            message.role === 'user'\n                              ? 'bg-blue-500 text-white'\n                              : 'bg-gray-100 text-gray-900'\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            {message.role === 'user' ? (\n                              <User className=\"h-4 w-4\" />\n                            ) : (\n                              <Bot className=\"h-4 w-4\" />\n                            )}\n                            <span className=\"text-xs opacity-75\">\n                              {message.timestamp.toLocaleTimeString()}\n                            </span>\n                          </div>\n                          <p className=\"text-sm\">{message.content}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default VapiWebCall;\n","import { useState, useCallback, useRef, useEffect, useMemo } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n// Custom VAPI Canvas imports\nimport VapiCanvasSimple from './components/VapiCanvasSimple';\nimport VapiNode from './components/VapiNode';\nimport { VapiNodeSidePanel } from './components/VapiNodeSidePanel';\nimport EdgeLabelEditSidebar from './components/EdgeLabelEditSidebar';\nimport VapiWebCall from './components/VapiWebCall';\nimport VapiPhoneCall from './components/VapiPhoneCall';\nimport { Node, Edge } from './types/workflow';\nimport { toast } from \"sonner\";\nimport {\n  Save,\n  ArrowLeft,\n  Plus,\n  Phone,\n  Zap,\n  MessageSquare,\n  PhoneCall,\n  StopCircle,\n  Wrench,\n  Minimize2,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  getWorkflowById,\n  updateWorkflow,\n  testWorkflow,\n  createVapiCall,\n} from \"@/api/services/workflows/workflowService\";\nimport { VapiWorkflowService } from \"@/api/services/vapi/vapiService\";\nimport { Workflow, WorkflowNode as WorkflowNodeType, WorkflowEdge } from \"@/types/api\";\nimport { getVapiNodeTypes, VapiNodeType } from \"@/api/services/vapi/nodeTypesService\";\n\n// We're now using VapiNode for all node types\n\n// Initial node position\nlet nodeId = 0;\nconst getNodeId = () => `node_${nodeId++}`;\n\nconst WorkflowBuilder = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const [nodes, setNodes] = useState<Node[]>([]);\n  const [edges, setEdges] = useState<Edge[]>([]);\n  const [selectedNode, setSelectedNode] = useState<Node | null>(null);\n  const [isAutoSaving, setIsAutoSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [isCallDialogOpen, setIsCallDialogOpen] = useState(false);\n  const [callPhoneNumber, setCallPhoneNumber] = useState(\"\");\n  const [isSidePanelOpen, setIsSidePanelOpen] = useState(false);\n  const [sidePanelNode, setSidePanelNode] = useState<Node | null>(null);\n  const [vapiNodeTypes, setVapiNodeTypes] = useState<VapiNodeType[]>([]);\n\n  // Edge label editing state\n  const [isEdgeLabelSidebarOpen, setIsEdgeLabelSidebarOpen] = useState(false);\n  const [selectedEdge, setSelectedEdge] = useState<Edge | null>(null);\n\n  // Fetch workflow data\n  const { data: workflowData, isLoading, error } = useQuery({\n    queryKey: [\"workflow\", id],\n    queryFn: () => {\n      console.log(\"Fetching workflow with ID:\", id);\n      return getWorkflowById(id!);\n    },\n    enabled: !!id,\n    retry: 1,\n  });\n\n  // Debug logging\n  useEffect(() => {\n    console.log(\"WorkflowBuilder - ID:\", id);\n    console.log(\"WorkflowBuilder - Loading:\", isLoading);\n    console.log(\"WorkflowBuilder - Error:\", error);\n    console.log(\"WorkflowBuilder - Data:\", workflowData);\n  }, [id, isLoading, error, workflowData]);\n\n  // Auto-save mutation - Use VAPI-specific endpoint\n  const autoSaveMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Workflow> }) =>\n      VapiWorkflowService.autoSaveWorkflow(id, data),\n    onSuccess: () => {\n      setLastSaved(new Date());\n      setIsAutoSaving(false);\n    },\n    onError: () => {\n      setIsAutoSaving(false);\n    },\n  });\n\n  // Save workflow mutation - Use VAPI-specific endpoint\n  const saveMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<Workflow> }) =>\n      VapiWorkflowService.updateWorkflow(id, data),\n    onSuccess: () => {\n      setLastSaved(new Date());\n      toast.success(\"Workflow saved successfully\");\n    },\n    onError: (error) => {\n      console.error(\"Save error:\", error);\n      toast.error(\"Failed to save workflow\");\n    },\n  });\n\n  // Test workflow mutation\n  const testMutation = useMutation({\n    mutationFn: testWorkflow,\n    onSuccess: () => {\n      toast.success(\"Workflow test initiated successfully\");\n    },\n  });\n\n  // Define node update and delete handlers first\n  const handleNodeUpdate = useCallback((nodeId: string, updatedData: any) => {\n    setNodes((nds: Node[]) => {\n      // If setting a node as start, remove start from all other nodes\n      if (updatedData.isStart === true || updatedData.start === true) {\n        return nds.map((node: Node) => {\n          if (node.id === nodeId) {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                ...updatedData,\n                isStart: true,\n                start: true\n              }\n            };\n          } else {\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                isStart: false,\n                start: false\n              }\n            };\n          }\n        });\n      } else {\n        return nds.map((node: Node) =>\n          node.id === nodeId\n            ? { ...node, data: { ...node.data, ...updatedData } }\n            : node\n        );\n      }\n    });\n  }, []);\n\n  const handleNodeDelete = useCallback((nodeId: string) => {\n    setNodes((nds: Node[]) => nds.filter((node: Node) => node.id !== nodeId));\n    setEdges((eds: Edge[]) => eds.filter((edge: Edge) => edge.source !== nodeId && edge.target !== nodeId));\n  }, []);\n\n  const handleNodeConfigure = useCallback((nodeId: string) => {\n    // Use functional update to avoid dependency on nodes\n    setNodes((currentNodes) => {\n      const node = currentNodes.find(n => n.id === nodeId);\n      if (node) {\n        setSidePanelNode(node);\n        setIsSidePanelOpen(true);\n      }\n      return currentNodes; // Return unchanged nodes\n    });\n  }, []); // No dependencies to prevent infinite loop\n\n  const handleSidePanelSave = useCallback((nodeData: any) => {\n    // Use refs to avoid dependencies\n    if (sidePanelNode) {\n      handleNodeUpdate(sidePanelNode.id, nodeData);\n    }\n  }, [sidePanelNode]); // Removed handleNodeUpdate dependency\n\n  const handleSidePanelClose = useCallback(() => {\n    setIsSidePanelOpen(false);\n    setSidePanelNode(null);\n  }, []);\n\n  // Create stable refs for functions to use in useEffect without dependencies\n  const handleNodeUpdateRef = useRef(handleNodeUpdate);\n  const handleNodeDeleteRef = useRef(handleNodeDelete);\n  const handleNodeConfigureRef = useRef(handleNodeConfigure);\n\n  // Update refs when functions change\n  handleNodeUpdateRef.current = handleNodeUpdate;\n  handleNodeDeleteRef.current = handleNodeDelete;\n  handleNodeConfigureRef.current = handleNodeConfigure;\n\n  // Convert workflow data to React Flow format\n  useEffect(() => {\n    if (workflowData?.data) {\n      const workflow = workflowData.data;\n      \n      // Convert nodes with proper type mapping\n      const flowNodes: Node[] = workflow.nodes?.map((node: WorkflowNodeType, index: number) => {\n        const nodeId = node.name || `node-${index}`;\n\n        console.log(`🔍 Loading node ${index}:`, {\n          originalType: node.type,\n          name: node.name,\n          nodeData: node\n        });\n\n        // Map VAPI node types back to our internal types for UI consistency\n        let internalNodeType = node.type;\n        const nodeTypeStr = node.type as string;\n        if (nodeTypeStr === 'transfer') {\n          internalNodeType = 'transferCall' as any;\n        } else if (nodeTypeStr === 'hangup' || nodeTypeStr === 'end') {\n          internalNodeType = 'endCall' as any;\n        }\n\n        console.log(`🔄 Mapped node type: ${nodeTypeStr} → ${internalNodeType}`);\n\n        return {\n          id: nodeId,\n          type: internalNodeType,\n          position: node.position || { x: index * 250 + 100, y: index * 150 + 100 },\n          draggable: true,\n          selectable: true,\n          data: {\n            ...node,\n            type: internalNodeType, // Ensure data.type matches the node type\n            onUpdate: (updatedData: any) => handleNodeUpdateRef.current(nodeId, updatedData),\n            onDelete: () => handleNodeDeleteRef.current(nodeId),\n            onConfigure: () => handleNodeConfigureRef.current(nodeId),\n          },\n        };\n      }) || [];\n\n      // Convert edges\n      const flowEdges: Edge[] = workflow.edges?.map((edge: WorkflowEdge, index: number) => ({\n        id: `edge-${index}`,\n        source: edge.from,\n        target: edge.to,\n        label: edge.condition?.prompt || edge.condition?.expression || \"\",\n      })) || [];\n\n      setNodes(flowNodes);\n      setEdges(flowEdges);\n      nodeId = Math.max(nodeId, flowNodes.length);\n\n      // If no nodes exist, create a sample workflow to test VAPI connections\n      if (flowNodes.length === 0) {\n        const startNodeId = getNodeId();\n        const secondNodeId = getNodeId();\n\n        const startNode: Node = {\n          id: startNodeId,\n          type: 'conversation',\n          position: { x: 250, y: 150 },\n          data: {\n            type: 'conversation',\n            name: 'support-greeting',\n            prompt: 'Greet the customer and ask about their issue.',\n            firstMessage: 'Hello! How can I help you today?',\n            isStart: true,\n            start: true,\n            onUpdate: (updatedData: any) => handleNodeUpdateRef.current(startNodeId, updatedData),\n            onDelete: () => handleNodeDeleteRef.current(startNodeId),\n            onConfigure: () => handleNodeConfigureRef.current(startNodeId),\n          },\n        };\n\n        const secondNode: Node = {\n          id: secondNodeId,\n          type: 'conversation',\n          position: { x: 250, y: 400 },\n          data: {\n            type: 'conversation',\n            name: 'New Conversation',\n            prompt: 'Enter your prompt here...',\n            isStart: false,\n            onUpdate: (updatedData: any) => handleNodeUpdateRef.current(secondNodeId, updatedData),\n            onDelete: () => handleNodeDeleteRef.current(secondNodeId),\n            onConfigure: () => handleNodeConfigureRef.current(secondNodeId),\n          },\n        };\n\n        const sampleEdge: Edge = {\n          id: 'edge-1',\n          source: startNodeId,\n          target: secondNodeId,\n          label: 'if the user said yes'\n        };\n\n        setNodes([startNode, secondNode]);\n        setEdges([sampleEdge]);\n      }\n    }\n  }, [workflowData]); // FIXED: Removed function dependencies to prevent infinite loop\n\n  // Auto-save when nodes or edges change (temporarily disabled)\n  useEffect(() => {\n    // Temporarily disabled to prevent API validation errors during testing\n    // if (nodes.length > 0 && id && !isAutoSaving) {\n    //   const timeoutId = setTimeout(() => {\n    //     handleAutoSave();\n    //   }, 5000); // Auto-save after 5 seconds of inactivity\n\n    //   return () => clearTimeout(timeoutId);\n    // }\n  }, [nodes, edges, id, isAutoSaving]);\n\n  // Fetch VAPI node types\n  useEffect(() => {\n    const fetchNodeTypes = async () => {\n      try {\n        const nodeTypes = await getVapiNodeTypes();\n        setVapiNodeTypes(nodeTypes);\n      } catch (error) {\n        console.error('Failed to fetch VAPI node types:', error);\n        toast.error('Failed to load node types');\n      }\n    };\n\n    fetchNodeTypes();\n  }, []);\n\n  // Debug: Add beforeunload listener to catch page reloads\n  useEffect(() => {\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      console.log('Page is about to reload/unload!');\n      console.trace('Reload triggered from:');\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, []);\n\n  const handleAutoSave = useCallback(() => {\n    console.log('⚡ AUTO-SAVE TRIGGERED - handleAutoSave function called');\n    if (!id || isAutoSaving) return;\n\n    setIsAutoSaving(true);\n    \n    // Convert React Flow data back to workflow format\n    const workflowNodes: WorkflowNodeType[] = nodes.map((node, index) => {\n      // Base node properties that are common to all node types\n      const baseNode = {\n        type: node.type as any,\n        name: node.id,\n        // VAPI expects isStart property for the start node (first node)\n        isStart: index === 0 || node.data.isStart === true,\n      };\n\n      // Add type-specific properties based on VAPI API requirements\n      switch (node.type) {\n        case 'conversation':\n          const conversationNode: any = {\n            ...baseNode,\n            prompt: node.data.prompt || \"You are a helpful AI assistant.\",\n          };\n\n          // Add variables if they exist\n          if (node.data.variables && node.data.variables.length > 0) {\n            conversationNode.variables = node.data.variables;\n          }\n\n          // Add global node plan if enabled\n          if (node.data.globalNodePlan?.enabled) {\n            conversationNode.globalNodePlan = node.data.globalNodePlan;\n          }\n\n          return conversationNode;\n\n        case 'apiRequest':\n          return {\n            ...baseNode,\n            method: node.data.method || 'GET',\n            url: node.data.url || '',\n            headers: node.data.headers || {},\n            body: node.data.body || {},\n            timeoutSeconds: node.data.timeoutSeconds || 20,\n          };\n\n        case 'transferCall':\n          return {\n            ...baseNode,\n            destination: node.data.destination || '',\n            transferPlan: {\n              destination: node.data.destination || '',\n              message: node.data.transferMessage || 'Please hold while I transfer you.',\n              summary: node.data.summary || '',\n            },\n          };\n\n        case 'endCall':\n          return {\n            ...baseNode,\n          };\n\n        case 'tool':\n          return {\n            ...baseNode,\n            toolIds: node.data.toolIds || [],\n            tools: node.data.tools || [],\n          };\n\n        default:\n          // For unknown node types, only include basic properties\n          return {\n            ...baseNode,\n            prompt: node.data.prompt || \"Default prompt\",\n          };\n      }\n    });\n\n    const workflowEdges: WorkflowEdge[] = edges.map((edge) => ({\n      from: edge.source,\n      to: edge.target,\n      condition: edge.label ? {\n        type: \"ai\" as const,\n        prompt: edge.label as string,\n      } : undefined,\n    }));\n\n    // Prepare workflow data with name\n    const workflowUpdateData = {\n      name: workflowData?.data?.name || 'Unnamed Workflow',\n      nodes: workflowNodes,\n      edges: workflowEdges,\n    };\n\n    // Debug: Log what we're sending to the API\n    console.log(\"Sending to VAPI API:\", workflowUpdateData);\n\n    autoSaveMutation.mutate({\n      id,\n      data: workflowUpdateData,\n    });\n  }, [id, nodes, edges, isAutoSaving, autoSaveMutation]);\n\n  const onConnect = useCallback((sourceId: string, targetId: string) => {\n    console.log('onConnect called with:', sourceId, '->', targetId);\n\n    // Check if connection already exists\n    const existingEdge = edges.find(edge =>\n      edge.source === sourceId && edge.target === targetId\n    );\n\n    if (existingEdge) {\n      console.log('Connection already exists, skipping');\n      return;\n    }\n\n    const newEdge: Edge = {\n      id: `edge-${Date.now()}`, // Use timestamp for unique ID\n      source: sourceId,\n      target: targetId,\n    };\n\n    console.log('Creating new edge:', newEdge);\n    setEdges((eds: Edge[]) => {\n      const updatedEdges = [...eds, newEdge];\n      console.log('Updated edges:', updatedEdges);\n      return updatedEdges;\n    });\n\n    toast.success('Nodes connected successfully');\n  }, [edges]);\n\n  const onNodeClick = useCallback((node: Node) => {\n    console.log('Node clicked:', node.id, node.type);\n    setSelectedNode(node);\n\n    // Open sidebar for node configuration\n    setSidePanelNode(node);\n    setIsSidePanelOpen(true);\n  }, []);\n\n  const handleNodesChange = useCallback((newNodes: Node[]) => {\n    setNodes(newNodes);\n  }, []);\n\n  const handleEdgesChange = useCallback((newEdges: Edge[]) => {\n    setEdges(newEdges);\n  }, []);\n\n  // Handle edge label click\n  const handleEdgeLabelClick = useCallback((edge: Edge) => {\n    console.log('🏷️ Edge label clicked:', edge);\n    setSelectedEdge(edge);\n    setIsEdgeLabelSidebarOpen(true);\n  }, []);\n\n  // Handle edge label save\n  const handleEdgeLabelSave = useCallback((edgeId: string, newLabel: string) => {\n    console.log('💾 Saving edge label:', edgeId, newLabel);\n    setEdges(prevEdges =>\n      prevEdges.map(edge =>\n        edge.id === edgeId\n          ? { ...edge, label: newLabel }\n          : edge\n      )\n    );\n    toast.success('Connection label updated');\n  }, []);\n\n  // Simple add node function for custom canvas\n  const addNode = useCallback((type: string, position?: { x: number; y: number }) => {\n    const nodeId = getNodeId();\n    const nodePosition = position || { x: Math.random() * 400 + 100, y: Math.random() * 300 + 100 };\n    console.log('Adding node:', nodeId, 'type:', type, 'at position:', nodePosition);\n\n    const newNode: Node = {\n      id: nodeId,\n      type,\n      position: nodePosition,\n      data: {\n        type,\n        name: `${type.charAt(0).toUpperCase() + type.slice(1)} Node`,\n        prompt: type === 'conversation' ? 'You are a helpful AI assistant. Respond naturally and helpfully to user queries.' : '',\n        firstMessage: type === 'conversation' ? 'Hello! How can I help you today?' : '',\n        isStart: nodes.length === 0, // First node is start node\n        start: nodes.length === 0, // Explicitly mark as start node for VAPI\n        onUpdate: (updatedData: any) => handleNodeUpdate(nodeId, updatedData),\n        onDelete: () => handleNodeDelete(nodeId),\n        onConfigure: () => handleNodeConfigure(nodeId),\n        // Initialize type-specific data\n        ...(type === 'apiRequest' && {\n          method: 'GET',\n          url: '',\n          headers: {},\n          body: {},\n        }),\n        ...(type === 'transferCall' && {\n          destination: '',\n          transferPlan: {\n            message: '',\n            summary: '',\n          },\n        }),\n        ...(type === 'tool' && {\n          toolIds: [],\n          tools: [],\n        }),\n      },\n    };\n\n    setNodes((nds: Node[]) => [...nds, newNode]);\n  }, [nodes.length, handleNodeUpdate, handleNodeDelete, handleNodeConfigure]);\n\n\n\n  const handleTestWorkflow = () => {\n    if (id) {\n      testMutation.mutate(id);\n    }\n  };\n\n  const handleSave = () => {\n    console.log('🔥 SAVE BUTTON CLICKED - handleSave function called');\n    if (!id || nodes.length === 0) {\n      toast.error(\"No workflow to save\");\n      return;\n    }\n\n    // Convert nodes to workflow format (exclude position as VAPI doesn't expect it)\n    const workflowNodes = nodes.map((node, index) => {\n      console.log(`🔍 Processing node ${index}:`, {\n        id: node.id,\n        originalType: node.type,\n        data: node.data\n      });\n\n      // Add type-specific properties based on VAPI API requirements\n      // Map our internal node types to VAPI-compatible types\n      let vapiNodeType = node.type;\n      if (node.type === 'transferCall') {\n        vapiNodeType = 'transfer';\n      } else if (node.type === 'endCall') {\n        vapiNodeType = 'hangup';\n      }\n\n      // Ensure we only use valid VAPI node types\n      const validNodeTypes = ['conversation', 'tool', 'assistant', 'start', 'say', 'gather', 'end', 'hangup', 'apiRequest', 'transfer'];\n      if (!validNodeTypes.includes(vapiNodeType)) {\n        console.warn(`⚠️ Invalid node type \"${vapiNodeType}\" for node \"${node.id}\", defaulting to \"conversation\"`);\n        vapiNodeType = 'conversation';\n      }\n\n      console.log(`🔄 Node type mapping: ${node.type} → ${vapiNodeType}`);\n\n      // Base node properties that are common to all node types\n      const baseNode = {\n        type: vapiNodeType,\n        name: node.id,\n        // VAPI expects isStart property for the start node (first node)\n        isStart: index === 0 || node.data.isStart === true,\n      };\n\n      switch (node.type) {\n        case 'conversation':\n          const conversationNode: any = {\n            ...baseNode,\n            prompt: node.data.prompt || \"You are a helpful AI assistant.\",\n          };\n\n          // Add variables if they exist\n          if (node.data.variables && node.data.variables.length > 0) {\n            conversationNode.variables = node.data.variables;\n          }\n\n          return conversationNode;\n\n        case 'apiRequest':\n          // Ensure apiRequest nodes have valid URLs\n          let apiUrl = node.data.url || '';\n          if (!apiUrl || !apiUrl.startsWith('https://')) {\n            apiUrl = 'https://api.example.com/endpoint'; // Default valid URL\n            console.warn(`⚠️ Using default URL for apiRequest node \"${node.id}\" - original URL: \"${node.data.url}\"`);\n          }\n          return {\n            ...baseNode,\n            method: node.data.method || 'GET',\n            url: apiUrl,\n            headers: node.data.headers || {},\n            body: node.data.body || {},\n          };\n\n        case 'transferCall':\n          return {\n            ...baseNode,\n            destination: node.data.destination || '',\n            transferPlan: {\n              destination: node.data.destination || '',\n              message: node.data.transferMessage || 'Please hold while I transfer you.',\n              summary: node.data.summary || '',\n            },\n          };\n\n        case 'endCall':\n          return {\n            ...baseNode,\n          };\n\n        case 'tool':\n          return {\n            ...baseNode,\n            toolIds: node.data.toolIds || [],\n            tools: node.data.tools || [],\n          };\n\n        default:\n          // For unknown node types, only include basic properties and filter out frontend-specific ones\n          const allowedProps = ['prompt', 'variables', 'globalNodePlan'];\n          const filteredData = Object.fromEntries(\n            Object.entries(node.data).filter(([key]) =>\n              allowedProps.includes(key)\n            )\n          );\n          return {\n            ...baseNode,\n            prompt: node.data.prompt || \"Default prompt\",\n            ...filteredData,\n          };\n      }\n    }).filter(node => node !== null); // Remove null nodes (invalid apiRequest nodes)\n\n    // Convert edges to workflow format\n    const workflowEdges = edges.map((edge) => ({\n      from: edge.source,\n      to: edge.target,\n      condition: edge.label ? {\n        type: 'ai' as const,\n        prompt: edge.label\n      } : undefined,\n    }));\n\n    console.log(\"Saving workflow with data:\", {\n      nodes: workflowNodes,\n      edges: workflowEdges,\n    });\n\n    // Debug: Log each node type being sent\n    console.log('🔍 DEBUGGING WORKFLOW SAVE:');\n    console.log('Total nodes to save:', workflowNodes.length);\n    workflowNodes.forEach((node, index) => {\n      console.log(`Node ${index}: type=\"${node.type}\", name=\"${node.name}\", isStart=${node.isStart}`);\n      console.log(`Node ${index} properties:`, Object.keys(node));\n      console.log(`Node ${index} full object:`, JSON.stringify(node, null, 2));\n    });\n\n    // Validate node types before sending\n    const validNodeTypes = ['conversation', 'tool', 'assistant', 'start', 'say', 'gather', 'end', 'hangup', 'apiRequest', 'transfer'];\n    const invalidNodes = workflowNodes.filter(node => !validNodeTypes.includes(node.type));\n    if (invalidNodes.length > 0) {\n      console.error('❌ Invalid node types found:', invalidNodes.map(n => ({ name: n.name, type: n.type })));\n      toast.error(`Invalid node types: ${invalidNodes.map(n => n.type).join(', ')}`);\n      return;\n    }\n\n    console.log('✅ All node types are valid!');\n\n    // Validate that no forbidden properties exist in nodes\n    const forbiddenProps = ['position', 'start', 'firstMessage']; // These properties are not allowed in VAPI workflow nodes\n    const hasForbiddenProps = workflowNodes.some(node =>\n      forbiddenProps.some(prop => prop in node)\n    );\n    if (hasForbiddenProps) {\n      console.error(\"ERROR: Found forbidden properties in nodes!\", workflowNodes);\n      toast.error(\"Internal error: Forbidden properties found in nodes\");\n      return;\n    }\n\n    // Validate that exactly one node has isStart: true\n    const startNodes = workflowNodes.filter(node => node.isStart === true);\n    if (startNodes.length !== 1) {\n      console.error(\"ERROR: Must have exactly one start node!\", { startNodes, workflowNodes });\n      toast.error(\"Workflow must have exactly one start node\");\n      return;\n    }\n\n    // Log the exact structure being sent to VAPI\n    console.log(\"Final workflow data being sent to VAPI:\", JSON.stringify({\n      nodes: workflowNodes,\n      edges: workflowEdges,\n    }, null, 2));\n\n    // Additional validation: Check each node structure\n    workflowNodes.forEach((node, index) => {\n      console.log(`Node ${index} (${node.name}):`, {\n        type: node.type,\n        isStart: node.isStart,\n        hasStart: 'start' in node,\n        hasPosition: 'position' in node,\n        keys: Object.keys(node)\n      });\n    });\n\n    // Prepare workflow data with name\n    const workflowSaveData = {\n      name: workflowData?.data?.name || 'Unnamed Workflow',\n      nodes: workflowNodes,\n      edges: workflowEdges,\n    };\n\n    // Use the save mutation\n    saveMutation.mutate({\n      id,\n      data: workflowSaveData,\n    });\n  };\n\n  // Memoize nodeTypes to prevent infinite re-renders (MUST be before conditional returns)\n  const nodeTypes = useMemo(() => ({\n    conversation: VapiNode,\n    apiRequest: VapiNode,\n    transferCall: VapiNode,\n    endCall: VapiNode,\n    tool: VapiNode\n  }), []);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p>Loading workflow...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <div className=\"text-red-600 mb-4\">\n            <h2 className=\"text-xl font-semibold mb-2\">Error Loading Workflow</h2>\n            <p className=\"text-gray-600 mb-4\">\n              {error instanceof Error ? error.message : \"Failed to load workflow\"}\n            </p>\n            <p className=\"text-sm text-gray-500 mb-4\">Workflow ID: {id}</p>\n          </div>\n          <div className=\"space-x-2\">\n            <Button onClick={() => navigate(\"/workflows\")} variant=\"outline\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Workflows\n            </Button>\n            <Button onClick={() => window.location.reload()}>\n              Try Again\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleCallWorkflow = async () => {\n    if (!callPhoneNumber.trim()) {\n      toast.error(\"Please enter a phone number\");\n      return;\n    }\n\n    try {\n      await createVapiCall({\n        workflowId: id!,\n        customer: {\n          number: callPhoneNumber,\n        },\n        metadata: {\n          testCall: true,\n          timestamp: new Date().toISOString(),\n        },\n      });\n      setIsCallDialogOpen(false);\n      setCallPhoneNumber(\"\");\n    } catch (error) {\n      console.error(\"Error creating call:\", error);\n    }\n  };\n\n  return (\n    <div className=\"h-screen flex flex-col bg-white\">\n      {/* VAPI-style Header */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-3 flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => navigate(\"/workflows\")}\n              className=\"text-gray-600 hover:text-gray-900\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Button>\n            <div className=\"h-6 w-px bg-gray-300\" />\n            <div>\n              <h1 className=\"text-lg font-semibold text-gray-900\">\n                {workflowData?.data?.name || \"Untitled Workflow\"}\n              </h1>\n              <div className=\"flex items-center gap-3 text-sm text-gray-500\">\n                <span className=\"flex items-center gap-1\">\n                  {isAutoSaving ? (\n                    <>\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\" />\n                      Auto-saving...\n                    </>\n                  ) : lastSaved ? (\n                    <>\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                      Saved {lastSaved.toLocaleTimeString()}\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full\" />\n                      Not saved\n                    </>\n                  )}\n                </span>\n                <div className=\"h-3 w-px bg-gray-300\" />\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {nodes.length} nodes\n                </Badge>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {edges.length} connections\n                </Badge>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n\n\n            <div className=\"h-6 w-px bg-gray-300\" />\n\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleSave}\n                    disabled={isAutoSaving || saveMutation.isPending}\n                    className=\"text-gray-600\"\n                  >\n                    {saveMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current\"></div>\n                    ) : (\n                      <Save className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Save Workflow</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n\n           \n\n            <Dialog open={isCallDialogOpen} onOpenChange={setIsCallDialogOpen}>\n              <DialogTrigger asChild>\n               \n              </DialogTrigger>\n             \n            </Dialog>\n\n            {/* VAPI Web Call Component */}\n            <VapiWebCall\n              workflowId={id}\n              workflowData={workflowData}\n              onCallStart={() => {\n                console.log('🎙️ Web call started for workflow:', id);\n                console.log('🎙️ Workflow data:', workflowData);\n                toast.success('Web call started successfully!');\n              }}\n              onCallEnd={() => {\n                console.log('🎙️ Web call ended for workflow:', id);\n                toast.info('Web call ended');\n              }}\n              onError={(error) => {\n                console.error('🎙️ Web call error:', error);\n                toast.error(`Web call error: ${error.message || 'Unknown error'}`);\n              }}\n            />\n\n            {/* VAPI Phone Call Component */}\n            {/* <VapiPhoneCall\n              workflowId={id || ''}\n              workflowName={workflowData?.data?.name || 'Workflow'}\n              workflowDescription={workflowData?.data?.description}\n              assistantId={workflowData?.data?.assistant_id}\n              onCallStarted={(callId) => {\n                console.log('📞 Phone call started:', callId, 'for workflow:', id);\n                toast.success(`Phone call started: ${callId}`);\n              }}\n              onCallEnded={(callId, duration) => {\n                console.log('📞 Phone call ended:', callId, 'duration:', duration);\n                toast.success(`Phone call ended after ${Math.round(duration / 60)} minutes`);\n              }}\n            /> */}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* VAPI-style Sidebar - Node Palette */}\n        <div className={`${sidebarCollapsed ? 'w-16' : 'w-72'} bg-gray-50 border-r border-gray-200 flex-shrink-0 transition-all duration-200`}>\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              {!sidebarCollapsed && (\n                <h3 className=\"font-semibold text-gray-900\">Add Nodes</h3>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                {sidebarCollapsed ? <Plus className=\"h-4 w-4\" /> : <Minimize2 className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n\n            <div className=\"space-y-2\">\n              {vapiNodeTypes.map((nodeType) => {\n                // Map icon names to actual icon components\n                const getIconComponent = (iconName: string) => {\n                  switch (iconName) {\n                    case 'MessageCircle':\n                      return MessageSquare;\n                    case 'Zap':\n                      return Zap;\n                    case 'PhoneCall':\n                      return PhoneCall;\n                    case 'StopCircle':\n                      return StopCircle;\n                    case 'Wrench':\n                      return Wrench;\n                    default:\n                      return MessageSquare;\n                  }\n                };\n\n                const IconComponent = getIconComponent(nodeType.icon);\n                return (\n                  <TooltipProvider key={nodeType.type}>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <div\n                          className={`flex items-center gap-3 p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-white hover:shadow-sm transition-all duration-200 bg-white ${sidebarCollapsed ? 'justify-center' : ''}`}\n                          draggable\n                          onDragStart={(event) => {\n                            event.dataTransfer.setData(\"application/reactflow\", nodeType.type);\n                            event.dataTransfer.effectAllowed = \"move\";\n                          }}\n                          onClick={() => addNode(nodeType.type)}\n                        >\n                          <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${nodeType.color}`}>\n                            <IconComponent className=\"h-4 w-4\" />\n                          </div>\n                          {!sidebarCollapsed && (\n                            <div className=\"flex-1\">\n                              <div className=\"text-sm font-medium text-gray-900\">{nodeType.label}</div>\n                              <div className=\"text-xs text-gray-500\">{nodeType.description}</div>\n                            </div>\n                          )}\n                        </div>\n                      </TooltipTrigger>\n                      {sidebarCollapsed && (\n                        <TooltipContent side=\"right\">\n                          <div>\n                            <div className=\"font-medium\">{nodeType.label}</div>\n                            <div className=\"text-xs text-gray-500\">{nodeType.description}</div>\n                          </div>\n                        </TooltipContent>\n                      )}\n                    </Tooltip>\n                  </TooltipProvider>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Custom VAPI Canvas */}\n        <div className=\"flex-1 relative\">\n          <VapiCanvasSimple\n            nodes={nodes as any}\n            edges={edges}\n            onNodesChange={handleNodesChange as any}\n            onEdgesChange={handleEdgesChange}\n            onNodeClick={onNodeClick as any}\n            selectedNode={selectedNode as any}\n            nodeTypes={nodeTypes}\n            onEdgeLabelClick={handleEdgeLabelClick}\n          />\n\n          {/* Empty State */}\n          {nodes.length === 0 && (\n            <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <MessageSquare className=\"h-8 w-8 text-gray-400\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Start Building Your Workflow</h3>\n                <p className=\"text-gray-500 mb-4 max-w-sm\">\n                  Drag nodes from the sidebar or click on them to add to your workflow\n                </p>\n                <div className=\"flex items-center justify-center gap-2 text-sm text-gray-400\">\n                  <span>Tip: Start with a</span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">Conversation</Badge>\n                  <span>node</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Side Panel for Node Configuration */}\n      <VapiNodeSidePanel\n        isOpen={isSidePanelOpen}\n        onClose={handleSidePanelClose}\n        node={sidePanelNode}\n        onSave={handleSidePanelSave}\n      />\n\n      {/* Edge Label Edit Sidebar */}\n      <EdgeLabelEditSidebar\n        isOpen={isEdgeLabelSidebarOpen}\n        onClose={() => setIsEdgeLabelSidebarOpen(false)}\n        edge={selectedEdge}\n        onSave={handleEdgeLabelSave}\n      />\n    </div>\n  );\n};\n\nexport default WorkflowBuilder;\n"],"names":["Button","children","variant","size","className","onClick","props","jsx","Badge","VapiNode","data","selected","nodeId","isConfigOpen","setIsConfigOpen","useState","localData","setLocalData","useEffect","getNodeIcon","MessageCircle","getNodeColor","jsxs","e","target","GripVertical","Star","_a","Globe","Variable","Settings","Trash2","_b","rect","canvasRect","relativeX","relativeY","VapiCanvasSimple","nodes","edges","onNodesChange","onEdgesChange","onNodeClick","selectedNode","nodeTypes","onEdgeLabelClick","isDragging","setIsDragging","draggedNodeId","setDraggedNodeId","dragOffset","setDragOffset","forceRender","setForceRender","hasMoved","setHasMoved","zoom","setZoom","panOffset","setPanOffset","isPanning","setIsPanning","panStart","setPanStart","lastPanOffset","setLastPanOffset","isConnecting","setIsConnecting","connectionStart","setConnectionStart","mousePosition","setMousePosition","canvasRef","useRef","nodesRef","onNodesChangeRef","onNodeClickRef","handleWheel","useCallback","mouseX","mouseY","zoomFactor","newZoom","zoomRatio","newPanX","newPanY","handleCanvasMouseDown","handleCanvasPanMove","deltaX","deltaY","handleCanvasPanEnd","startManualConnection","position","node","n","connectionX","connectionY","handleCanvasMouseMove","rawX","rawY","adjustedX","adjustedY","handleCanvasMouseUp","targetNode","nodeLeft","nodeRight","nodeTop","nodeBottom","isInside","edge","newEdge","updatedEdges","handleAddNode","sourceNodeId","sourceNode","newNodeId","newNode","updatedNodes","handleNodeMouseDown","offset","handleMouseMove","newX","newY","currentNode","prev","handleMouseUp","handleNodeClick","renderConnections","index","currentNodes","sourceX","sourceY","targetX","targetY","midX","midY","distance","controlOffset","cp1x","cp1y","cp2x","cp2y","pathData","_c","_d","_e","_f","isHovered","setIsHovered","type","getNodeDisplayName","Fragment","VAPI_NODE_TYPES","getVapiNodeTypes","resolve","error","getNodeTypeConfiguration","nodeType","VapiNodeSidePanel","isOpen","onClose","onSave","nodeConfig","setNodeConfig","formData","setFormData","loading","setLoading","loadNodeConfiguration","config","initialData","handleFieldChange","fieldName","value","newData","handleSave","handleClose","getNodeTypeLabel","renderField","field","Label","Input","Textarea","Select","val","SelectTrigger","SelectValue","SelectContent","option","SelectItem","Switch","checked","X","EdgeLabelEditSidebar","label","setLabel","description","setDescription","handleKeyDown","template","Save","VapiWebCall","workflowId","workflowData","workflowName","workflowDescription","onCallStart","onCallEnd","onError","publicApiKey","vapiRef","callState","setCallState","transcript","setTranscript","assistantId","setAssistantId","isCreatingAssistant","setIsCreatingAssistant","callTimerRef","Vapi","setupVapiEventListeners","toast","startCallTimer","volume","message","transcriptMessage","formatDuration","seconds","mins","secs","performDemoLogin","response","result","secureLocalStorage","createVapiWorkflow","token","vapiWorkflowData","errorText","startWebCall","vapiWorkflowId","callConfig","stopWebCall","toggleMute","newMutedState","Dialog","DialogTrigger","Radio","DialogContent","DialogHeader","DialogTitle","Card","CardHeader","CardTitle","Phone","CardContent","Loader2","PhoneOff","MicOff","Mic","Volume2","MessageSquare","User","Bot","getNodeId","WorkflowBuilder","id","useParams","navigate","useNavigate","useQueryClient","setNodes","setEdges","setSelectedNode","isAutoSaving","setIsAutoSaving","lastSaved","setLastSaved","sidebarCollapsed","setSidebarCollapsed","isCallDialogOpen","setIsCallDialogOpen","callPhoneNumber","setCallPhoneNumber","isSidePanelOpen","setIsSidePanelOpen","sidePanelNode","setSidePanelNode","vapiNodeTypes","setVapiNodeTypes","isEdgeLabelSidebarOpen","setIsEdgeLabelSidebarOpen","selectedEdge","setSelectedEdge","isLoading","useQuery","getWorkflowById","autoSaveMutation","useMutation","VapiWorkflowService","saveMutation","testWorkflow","handleNodeUpdate","updatedData","nds","handleNodeDelete","eds","handleNodeConfigure","handleSidePanelSave","nodeData","handleSidePanelClose","handleNodeUpdateRef","handleNodeDeleteRef","handleNodeConfigureRef","workflow","flowNodes","internalNodeType","nodeTypeStr","flowEdges","startNodeId","secondNodeId","startNode","secondNode","sampleEdge","handleBeforeUnload","workflowNodes","baseNode","conversationNode","workflowEdges","workflowUpdateData","sourceId","targetId","handleNodesChange","newNodes","handleEdgesChange","newEdges","handleEdgeLabelClick","handleEdgeLabelSave","edgeId","newLabel","prevEdges","addNode","nodePosition","vapiNodeType","apiUrl","allowedProps","filteredData","key","validNodeTypes","invalidNodes","forbiddenProps","prop","startNodes","workflowSaveData","useMemo","ArrowLeft","TooltipProvider","Tooltip","TooltipTrigger","TooltipContent","Plus","Minimize2","IconComponent","iconName","Zap","PhoneCall","StopCircle","Wrench","event"],"mappings":"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"}