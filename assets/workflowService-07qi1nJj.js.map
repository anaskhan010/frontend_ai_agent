{"version":3,"file":"workflowService-07qi1nJj.js","sources":["../../src/api/services/workflows/workflowService.ts"],"sourcesContent":["import axiosInstance from \"../../axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Import types from centralized location\nimport { Workflow, WorkflowNode, WorkflowEdge } from \"@/types/api\";\n\nexport interface WorkflowTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  nodes: WorkflowNode[];\n  edges: WorkflowEdge[];\n  preview?: string;\n  tags?: string[];\n}\n\nexport interface WorkflowExecution {\n  id: string;\n  workflowId: string;\n  callId?: string;\n  executionType: 'test' | 'production';\n  status: 'queued' | 'ringing' | 'in-progress' | 'completed' | 'failed' | 'cancelled';\n  phoneNumber?: string;\n  duration: number;\n  cost: number;\n  metadata?: any;\n  startedAt?: string;\n  endedAt?: string;\n  createdAt: string;\n}\n\nexport interface VapiCallRequest {\n  workflowId: string;\n  phoneNumberId?: string;\n  customer?: {\n    number: string;\n    name?: string;\n  };\n  metadata?: any;\n}\n\n// Get all workflows\nexport async function getAllWorkflows(page?: number, search?: string, status?: string) {\n  try {\n    const res = await axiosInstance.get(\"/api/workflows\", {\n      params: { page, search, status },\n    });\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching workflows:\", error);\n    toast.error(\"Failed to fetch workflows\");\n    throw error;\n  }\n}\n\n// Get workflow by ID\nexport async function getWorkflowById(id: string) {\n  try {\n    console.log(\"Fetching workflow from API:\", id);\n    const res = await axiosInstance.get(`/api/workflows/${id}`);\n    console.log(\"Workflow API response:\", res.data);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching workflow:\", error);\n    console.error(\"Error response:\", error.response?.data);\n    toast.error(\"Failed to fetch workflow\");\n    throw error;\n  }\n}\n\n// Create workflow\nexport async function createWorkflow(data: Partial<Workflow>) {\n  try {\n    console.log(\"Creating workflow with data:\", data);\n    const res = await axiosInstance.post(\"/api/workflows\", data);\n    console.log(\"Create workflow response:\", res.data);\n    toast.success(\"Workflow created successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error creating workflow:\", error);\n    console.error(\"Error response:\", error.response?.data);\n    const message = error.response?.data?.message || \"Failed to create workflow\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Update workflow\nexport async function updateWorkflow(id: string, data: Partial<Workflow>) {\n  try {\n    const res = await axiosInstance.patch(`/api/workflows/${id}`, data);\n    toast.success(\"Workflow updated successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error updating workflow:\", error);\n    const message = error.response?.data?.message || \"Failed to update workflow\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Delete workflow\nexport async function deleteWorkflow(id: string) {\n  try {\n    const res = await axiosInstance.delete(`/api/workflows/${id}`);\n    toast.success(\"Workflow deleted successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error deleting workflow:\", error);\n    const message = error.response?.data?.message || \"Failed to delete workflow\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Test workflow (create call)\nexport async function testWorkflow(id: string, phoneNumber?: string, metadata?: any) {\n  try {\n    const res = await axiosInstance.post(`/api/workflows/${id}/test`, {\n      phoneNumber,\n      metadata,\n    });\n    toast.success(\"Workflow test call initiated successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error testing workflow:\", error);\n    const message = error.response?.data?.message || \"Failed to test workflow\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get workflow templates\nexport async function getWorkflowTemplates() {\n  try {\n    const res = await axiosInstance.get(\"/api/workflows/templates/all\");\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching workflow templates:\", error);\n    toast.error(\"Failed to fetch workflow templates\");\n    throw error;\n  }\n}\n\n// Search workflows\nexport async function searchWorkflows(searchTerm: string, page?: number, limit?: number) {\n  try {\n    const res = await axiosInstance.get(\"/api/workflows\", {\n      params: { search: searchTerm, page, limit },\n    });\n    return res.data;\n  } catch (error) {\n    console.error(\"Error searching workflows:\", error);\n    toast.error(\"Failed to search workflows\");\n    throw error;\n  }\n}\n\n// Get workflow statistics\nexport async function getWorkflowStats() {\n  try {\n    const res = await axiosInstance.get(\"/api/workflows/stats\");\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching workflow stats:\", error);\n    toast.error(\"Failed to fetch workflow statistics\");\n    throw error;\n  }\n}\n\n// Auto-save workflow (silent update without toast)\nexport async function autoSaveWorkflow(id: string, data: Partial<Workflow>) {\n  try {\n    const res = await axiosInstance.patch(`/api/workflows/${id}`, data);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error auto-saving workflow:\", error);\n    // Silent failure for auto-save\n    throw error;\n  }\n}\n\n// Export workflow\nexport async function exportWorkflow(id: string) {\n  try {\n    const workflow = await getWorkflowById(id);\n    const exportData = {\n      ...workflow.data,\n      exportedAt: new Date().toISOString(),\n      version: \"1.0\"\n    };\n    \n    // Create and download JSON file\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `workflow-${workflow.data.name}-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    toast.success(\"Workflow exported successfully\");\n    return exportData;\n  } catch (error: any) {\n    console.error(\"Error exporting workflow:\", error);\n    const message = error.response?.data?.message || \"Failed to export workflow\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Import workflow\nexport async function importWorkflow(file: File) {\n  try {\n    const text = await file.text();\n    const workflowData = JSON.parse(text);\n    \n    // Remove ID and timestamps for import\n    const { id, createdAt, updatedAt, exportedAt, version, localData, ...importData } = workflowData;\n    \n    // Add import suffix to name to avoid conflicts\n    importData.name = `${importData.name} (Imported)`;\n    \n    const res = await createWorkflow(importData);\n    toast.success(\"Workflow imported successfully\");\n    return res;\n  } catch (error: any) {\n    console.error(\"Error importing workflow:\", error);\n    const message = error.response?.data?.message || \"Failed to import workflow\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// VAPI-specific API functions\nexport async function createVapiCall(callRequest: VapiCallRequest | {\n  workflowId?: string;\n  assistantId?: string;\n  customer: {\n    number: string;\n    name?: string;\n  };\n  metadata?: Record<string, any>;\n}) {\n  try {\n    const res = await axiosInstance.post(\"/api/workflows/vapi/calls\", callRequest);\n    toast.success(\"Call initiated successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error creating VAPI call:\", error);\n    const message = error.response?.data?.message || \"Failed to create call\";\n    toast.error(message);\n    throw error;\n  }\n}\n\nexport async function getVapiWorkflowTemplates() {\n  try {\n    const res = await axiosInstance.get(\"/api/workflows/vapi/templates\");\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching VAPI templates:\", error);\n    toast.error(\"Failed to fetch workflow templates\");\n    throw error;\n  }\n}\n\nexport async function validateWorkflow(workflowId: string) {\n  try {\n    const res = await axiosInstance.post(`/api/workflows/${workflowId}/validate`);\n    return res.data;\n  } catch (error) {\n    console.error(\"Error validating workflow:\", error);\n    toast.error(\"Failed to validate workflow\");\n    throw error;\n  }\n}\n\nexport async function duplicateWorkflow(workflowId: string, newName: string) {\n  try {\n    const res = await axiosInstance.post(`/api/workflows/${workflowId}/duplicate`, {\n      name: newName\n    });\n    toast.success(\"Workflow duplicated successfully\");\n    return res.data;\n  } catch (error) {\n    console.error(\"Error duplicating workflow:\", error);\n    toast.error(\"Failed to duplicate workflow\");\n    throw error;\n  }\n}\n\n// Enhanced VAPI Phone Call Functions\n\nexport const getVapiCall = async (callId: string): Promise<any> => {\n  try {\n    const res = await axiosInstance.get(`/api/workflows/vapi/calls/${callId}`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error getting VAPI call:\", error);\n    throw error;\n  }\n};\n\nexport const listVapiCalls = async (params?: {\n  assistantId?: string;\n  workflowId?: string;\n  limit?: number;\n  offset?: number;\n}): Promise<any> => {\n  try {\n    const res = await axiosInstance.get('/api/workflows/vapi/calls', { params });\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error listing VAPI calls:\", error);\n    throw error;\n  }\n};\n\nexport const endVapiCall = async (callId: string): Promise<any> => {\n  try {\n    const res = await axiosInstance.post(`/api/workflows/vapi/calls/${callId}/end`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error ending VAPI call:\", error);\n    throw error;\n  }\n};\n"],"names":["getAllWorkflows","page","search","status","axiosInstance","error","toast","getWorkflowById","id","res","_a","createWorkflow","data","message","_c","_b","testWorkflow","phoneNumber","metadata","getWorkflowTemplates","exportWorkflow","workflow","exportData","blob","url","link","importWorkflow","file","text","workflowData","createdAt","updatedAt","exportedAt","version","localData","importData"],"mappings":"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"}