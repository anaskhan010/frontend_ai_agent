{"version":3,"file":"VapiStyleAgents-6AxjOf8n.js","sources":["../../src/pages/Agents/components/VapiAgentCall.tsx","../../src/pages/Agents/VapiStyleAgents.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport Vapi from '@vapi-ai/web';\nimport { Button } from '../../../components/ui/button';\nimport { Badge } from '../../../components/ui/badge';\n\nimport {\n  Phone,\n  PhoneOff,\n  Mic,\n  MicOff,\n  Volume2,\n  Loader2,\n  MessageSquare,\n  User,\n  Bot,\n  AlertCircle\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface VapiAgentCallProps {\n  agentId: string;\n  agentName?: string;\n  agentConfig?: any;\n  onCallStart?: () => void;\n  onCallEnd?: () => void;\n  onError?: (error: any) => void;\n}\n\ninterface CallState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  isMuted: boolean;\n  volumeLevel: number;\n  callDuration: number;\n  status: 'idle' | 'connecting' | 'connected' | 'ended' | 'error';\n}\n\ninterface TranscriptMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  type?: 'transcript' | 'function-call' | 'status';\n}\n\nconst VapiAgentCall: React.FC<VapiAgentCallProps> = ({\n  agentId,\n  agentName = 'AI Assistant',\n  agentConfig,\n  onCallStart,\n  onCallEnd,\n  onError\n}) => {\n  // Get VAPI public key from environment\n  const publicApiKey = import.meta.env.VITE_VAPI_PUBLIC_KEY || 'eb3b26e3-7dbb-4fd6-a545-a954756a43aa';\n\n  // VAPI instance ref\n  const vapiRef = useRef<Vapi | null>(null);\n\n  // Call state\n  const [callState, setCallState] = useState<CallState>({\n    isConnected: false,\n    isConnecting: false,\n    isMuted: false,\n    volumeLevel: 0,\n    callDuration: 0,\n    status: 'idle'\n  });\n\n  // Transcript and messages\n  const [transcript, setTranscript] = useState<TranscriptMessage[]>([]);\n\n  // Call duration timer\n  const callTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Check if VAPI is properly configured\n  const isVapiConfigured = publicApiKey && publicApiKey !== 'your-vapi-public-key-here';\n\n  // Debug VAPI availability\n  console.log('🔍 VAPI Debug Info:');\n  console.log('- Vapi class available:', typeof Vapi);\n  console.log('- Public API Key:', publicApiKey ? `${publicApiKey.substring(0, 8)}...` : 'Not set');\n  console.log('- Is configured:', isVapiConfigured);\n\n  // Initialize VAPI\n  useEffect(() => {\n    console.log('🔧 Initializing VAPI for agent:', agentId);\n    console.log('🔑 Public API Key:', publicApiKey ? `${publicApiKey.substring(0, 8)}...` : 'Not set');\n    console.log('✅ Is VAPI Configured:', isVapiConfigured);\n\n    // Test VAPI import\n    try {\n      console.log('🧪 Testing VAPI import...');\n      console.log('- Vapi constructor:', Vapi);\n      console.log('- typeof Vapi:', typeof Vapi);\n\n      if (typeof Vapi === 'function') {\n        console.log('✅ VAPI import successful');\n      } else {\n        console.error('❌ VAPI import failed - not a constructor');\n      }\n    } catch (error) {\n      console.error('❌ VAPI import test failed:', error);\n    }\n\n    if (isVapiConfigured) {\n      try {\n        vapiRef.current = new Vapi(publicApiKey);\n        console.log('✅ VAPI instance created successfully');\n\n        // Set up event listeners\n        setupVapiEventListeners();\n\n      } catch (error) {\n        console.error('❌ Failed to initialize VAPI:', error);\n        toast.error('Failed to initialize VAPI. Please check your API key.');\n      }\n    } else {\n      console.warn('⚠️ VAPI public key not configured');\n    }\n\n    return () => {\n      if (vapiRef.current) {\n        vapiRef.current.stop();\n      }\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n      }\n    };\n  }, [publicApiKey, agentId]);\n\n  // Setup VAPI event listeners\n  const setupVapiEventListeners = () => {\n    if (!vapiRef.current) return;\n\n    // Call start event\n    vapiRef.current.on('call-start', () => {\n      console.log('🎙️ VAPI call started');\n      setCallState(prev => ({\n        ...prev,\n        isConnected: true,\n        isConnecting: false,\n        status: 'connected'\n      }));\n      \n      // Start call timer\n      startCallTimer();\n      \n      toast.success('Call connected! You can now speak.');\n      onCallStart?.();\n    });\n\n    // Call end event\n    vapiRef.current.on('call-end', () => {\n      console.log('📞 VAPI call ended');\n      setCallState(prev => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n        status: 'ended'\n      }));\n      \n      // Stop call timer\n      if (callTimerRef.current) {\n        clearInterval(callTimerRef.current);\n        callTimerRef.current = null;\n      }\n      \n      toast.info('Call ended');\n      onCallEnd?.();\n    });\n\n    // Speech start event\n    vapiRef.current.on('speech-start', () => {\n      console.log('🗣️ Speech started');\n    });\n\n    // Speech end event\n    vapiRef.current.on('speech-end', () => {\n      console.log('🤐 Speech ended');\n    });\n\n    // Volume level event\n    vapiRef.current.on('volume-level', (volume: number) => {\n      setCallState(prev => ({\n        ...prev,\n        volumeLevel: volume\n      }));\n    });\n\n    // Message event (transcripts, function calls, etc.)\n    vapiRef.current.on('message', (message: any) => {\n      console.log('📨 VAPI message:', message);\n      \n      if (message.type === 'transcript' && message.transcript) {\n        const transcriptMessage: TranscriptMessage = {\n          role: message.role || 'assistant',\n          content: message.transcript,\n          timestamp: new Date(),\n          type: 'transcript'\n        };\n        \n        setTranscript(prev => [...prev, transcriptMessage]);\n      }\n    });\n\n    // Error event\n    vapiRef.current.on('error', (error: any) => {\n      console.error('❌ VAPI error:', error);\n      setCallState(prev => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n        status: 'error'\n      }));\n\n      // Provide helpful error messages based on common issues\n      let errorMessage = 'Unknown error';\n      if (error.message) {\n        errorMessage = error.message;\n\n        // Check for common error patterns\n        if (error.message.includes('assistant') && error.message.includes('not found')) {\n          errorMessage = 'Assistant not found in VAPI. Please ensure the agent is properly synced with VAPI dashboard.';\n        } else if (error.message.includes('unauthorized') || error.message.includes('401')) {\n          errorMessage = 'Unauthorized access. Please check your VAPI API key configuration.';\n        } else if (error.message.includes('microphone') || error.message.includes('permission')) {\n          errorMessage = 'Microphone permission denied. Please allow microphone access and try again.';\n        }\n      }\n\n      toast.error(`Call error: ${errorMessage}`);\n      onError?.(error);\n    });\n  };\n\n  // Start call timer\n  const startCallTimer = () => {\n    callTimerRef.current = setInterval(() => {\n      setCallState(prev => ({\n        ...prev,\n        callDuration: prev.callDuration + 1\n      }));\n    }, 1000);\n  };\n\n  // Format call duration\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Create assistant configuration for VAPI\n  const createAssistantConfig = () => {\n    // Create a basic assistant configuration\n    const assistantConfig = {\n      name: agentName,\n      firstMessage: agentConfig?.firstMessage || `Hello! I'm ${agentName}. How can I help you today?`,\n      model: {\n        provider: 'openai' as const,\n        model: 'gpt-4' as const,\n        temperature: 0.7,\n        messages: [{\n          role: 'system' as const,\n          content: agentConfig?.systemMessage || `You are ${agentName}, a helpful AI assistant. Keep responses conversational and under 30 words when possible.`\n        }]\n      },\n      voice: {\n        provider: 'vapi' as const,\n        voiceId: agentConfig?.voiceId || 'Cole'\n      }\n    };\n\n    console.log('📋 Assistant config created:', assistantConfig);\n    return assistantConfig;\n  };\n\n  // Start web call with agent\n  const startWebCall = async () => {\n    console.log('🚀 Starting VAPI agent call for:', agentId);\n    console.log('🔑 VAPI Public Key:', publicApiKey ? `${publicApiKey.substring(0, 8)}...` : 'Not configured');\n    console.log('🤖 Agent Config:', agentConfig);\n\n    if (!vapiRef.current) {\n      toast.error('VAPI not initialized. Please check your API key configuration.');\n      return;\n    }\n\n    if (!isVapiConfigured) {\n      toast.error('VAPI public key not configured. Please set VITE_VAPI_PUBLIC_KEY in your environment.');\n      return;\n    }\n\n    try {\n      setCallState(prev => ({\n        ...prev,\n        isConnecting: true,\n        status: 'connecting',\n        callDuration: 0\n      }));\n\n      setTranscript([]);\n\n      // Check if we have an assistant_id in the agent config\n      const assistantId = agentConfig?.assistant_id || agentConfig?.assistantId;\n\n      if (assistantId) {\n        // Use existing assistant ID from database\n        console.log('📞 Using existing assistant ID from database:', assistantId);\n\n        // For VAPI Web SDK, when using assistantId, pass it directly as string\n        // You can pass assistant overrides as second parameter if needed\n        const assistantOverrides = {\n          metadata: {\n            portalAgentId: agentId,\n            agentName: agentName,\n            initiatedFrom: 'portal'\n          }\n        };\n\n        console.log('📋 Starting call with assistant ID:', assistantId);\n        console.log('📋 Assistant overrides:', assistantOverrides);\n        await vapiRef.current.start(assistantId, assistantOverrides);\n\n      } else {\n        // Create assistant configuration dynamically\n        console.log('🔄 Creating assistant configuration...');\n        const assistantConfig = createAssistantConfig();\n\n        console.log('📞 Starting agent call with assistant config');\n        console.log('🤖 Agent Name:', agentName);\n\n        // Use VAPI's assistant configuration directly\n        const callConfig = assistantConfig;\n\n        console.log('📋 Call config:', callConfig);\n\n        // Add a small delay to ensure VAPI is ready\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n        await vapiRef.current.start(callConfig);\n      }\n\n    } catch (error: any) {\n      console.error('❌ Error starting agent call:', error);\n      setCallState(prev => ({\n        ...prev,\n        isConnecting: false,\n        status: 'error'\n      }));\n\n      // Provide more specific error messages\n      let errorMessage = 'Failed to start call';\n      if (error.message) {\n        errorMessage = error.message;\n\n        // Check for common error patterns\n        if (error.message.includes('Authentication') || error.message.includes('401')) {\n          errorMessage = 'Authentication failed. Please check your VAPI API key.';\n        } else if (error.message.includes('assistant') || error.message.includes('404')) {\n          errorMessage = 'Assistant not found. The assistant may not exist in VAPI.';\n        } else if (error.message.includes('permission') || error.message.includes('microphone')) {\n          errorMessage = 'Microphone permission denied. Please allow microphone access.';\n        } else if (error.message.includes('network') || error.message.includes('fetch')) {\n          errorMessage = 'Network error. Please check your internet connection.';\n        }\n      } else if (error.code) {\n        errorMessage = `Error code: ${error.code}`;\n      } else if (typeof error === 'string') {\n        errorMessage = error;\n      }\n\n      toast.error(`Failed to start call: ${errorMessage}`);\n      console.error('📋 Full error details:', error);\n    }\n  };\n\n  // Stop web call\n  const stopWebCall = () => {\n    console.log('🛑 Stopping VAPI agent call...');\n    \n    if (vapiRef.current) {\n      vapiRef.current.stop();\n    }\n  };\n\n  // Toggle mute\n  const toggleMute = () => {\n    if (vapiRef.current) {\n      const newMutedState = !callState.isMuted;\n      vapiRef.current.setMuted(newMutedState);\n      \n      setCallState(prev => ({\n        ...prev,\n        isMuted: newMutedState\n      }));\n      \n      toast.info(newMutedState ? 'Microphone muted' : 'Microphone unmuted');\n    }\n  };\n\n  // If VAPI is not configured, show error state\n  if (!isVapiConfigured) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-[400px] text-center space-y-4\">\n        <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center\">\n          <AlertCircle className=\"h-8 w-8 text-red-600\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Call Not Available</h3>\n          <p className=\"text-gray-600 mb-4\">This agent doesn't support web calls yet</p>\n          <div className=\"text-sm text-gray-500 space-y-1\">\n            <p>To enable web calls:</p>\n            <p>1. Configure your VAPI public key</p>\n            <p>2. Set up the agent in VAPI dashboard</p>\n            <p>3. Ensure the agent ID is valid</p>\n          </div>\n        </div>\n        <Badge variant=\"destructive\" className=\"mt-4\">\n          VAPI Configuration Required\n        </Badge>\n      </div>\n    );\n  }\n\n  // Render call button in header\n  const renderCallButton = () => {\n    // if (!portalReady) {\n    //   console.log('🎯 Portal not ready yet');\n    //   return null;\n    // }\n\n    const container = document.getElementById('call-button-container');\n    console.log('🎯 Looking for call-button-container:', container);\n    if (!container) {\n      console.warn('⚠️ call-button-container not found!');\n      return null;\n    }\n\n    console.log('🎯 Rendering call button, call state:', callState);\n    return createPortal(\n      <div className=\"flex items-center gap-2\">\n        {callState.isConnected && (\n            <div className=\"flex items-center gap-3\">\n              <div className=\"text-sm font-mono font-semibold text-gray-800 bg-white px-3 py-1 rounded-md border border-gray-200\">\n                {formatDuration(callState.callDuration)}\n              </div>\n              <Button\n                onClick={toggleMute}\n                variant=\"outline\"\n                size=\"sm\"\n                className={`border-gray-300 ${\n                  callState.isMuted\n                    ? 'bg-red-50  text-red-700 hover:bg-red-100'\n                    : 'bg-white hover:bg-gray-50 text-gray-700'\n                }`}\n              >\n                {callState.isMuted ? (\n                  <MicOff className=\"h-4 w-4\" />\n                ) : (\n                  <Mic className=\"h-4 w-4\" />\n                )}\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-gray-300 bg-white hover:bg-gray-50 text-gray-700\"\n              >\n                <Volume2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          )}\n        {!callState.isConnected && !callState.isConnecting ? (\n          <Button\n            onClick={startWebCall}\n            size=\"sm\"\n            className=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-md transition-all duration-200\"\n          >\n            <Phone className=\"h-4 w-4 mr-2\" />\n            Call\n          </Button>\n        ) : callState.isConnecting ? (\n          <Button\n            size=\"sm\"\n            className=\"px-4 py-2 bg-amber-500 text-white text-sm font-medium rounded-md\"\n            disabled\n          >\n            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            Connecting\n          </Button>\n        ) : (\n          <Button\n            onClick={stopWebCall}\n            size=\"sm\"\n            className=\"px-4 py-2 bg-red-600 hover:bg-red-700 text-white text-sm font-medium rounded-md transition-all duration-200\"\n          >\n            <PhoneOff className=\"h-4 w-4 mr-2\" />\n            End Call\n          </Button>\n        )}\n      </div>,\n      container\n    );\n  };\n\n  console.log('🎯 VapiAgentCall render - isVapiConfigured:', isVapiConfigured);\n  console.log('🎯 VapiAgentCall render - callState:', callState);\n  console.log('🎯 VapiAgentCall render - agentId:', agentId);\n  console.log('🎯 VapiAgentCall render - agentName:', agentName);\n\n  // State to track if portal container is available\n  const [portalReady, setPortalReady] = useState(false);\n\n  // Check for portal container availability\n  useEffect(() => {\n    const checkContainer = () => {\n      const container = document.getElementById('call-button-container');\n      if (container) {\n        console.log('✅ Found call-button-container');\n        setPortalReady(true);\n        return true;\n      } else {\n        console.warn('❌ call-button-container not found');\n        return false;\n      }\n    };\n\n    // Check immediately\n    if (checkContainer()) {\n      return;\n    }\n\n    // If not found, check periodically\n    const interval = setInterval(() => {\n      if (checkContainer()) {\n        clearInterval(interval);\n      }\n    }, 100);\n\n    // Clean up\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <div className=\"flex flex-col h-full bg-white\">\n      {renderCallButton()}\n\n      {/* Debug: Show call button directly in component */}\n    \n\n      {/* Scrollable Live Transcript */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"bg-gray-50 border-b border-gray-200 px-6 py-3\">\n          <h3 className=\"text-sm font-semibold text-gray-700 flex items-center gap-2\">\n            <MessageSquare className=\"h-4 w-4\" />\n            Conversation\n          </h3>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-6 bg-white\">\n          {transcript.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-gray-400 py-12\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n                <MessageSquare className=\"h-8 w-8 text-gray-400\" />\n              </div>\n              <p className=\"text-center text-sm\">\n                {callState.isConnected\n                  ? 'Conversation will appear here...'\n                  : 'Start a call to begin the conversation'}\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {transcript.map((message, index) => (\n                <div\n                  key={index}\n                  className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  {message.role === 'assistant' && (\n                    <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Bot className=\"h-4 w-4 text-gray-600\" />\n                    </div>\n                  )}\n                  <div\n                    className={`max-w-[75%] ${\n                      message.role === 'user'\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-800 border border-gray-200'\n                    } rounded-lg px-4 py-3`}\n                  >\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className={`text-xs font-medium ${\n                        message.role === 'user' ? 'text-blue-100' : 'text-gray-500'\n                      }`}>\n                        {message.role === 'user' ? 'You' : agentName}\n                      </span>\n                      <span className={`text-xs ${\n                        message.role === 'user' ? 'text-blue-200' : 'text-gray-400'\n                      }`}>\n                        {message.timestamp.toLocaleTimeString()}\n                      </span>\n                    </div>\n                    <p className=\"text-sm leading-relaxed\">{message.content}</p>\n                  </div>\n                  {message.role === 'user' && (\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <User className=\"h-4 w-4 text-blue-600\" />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Agent Information Footer */}\n      <div className=\"bg-gray-50 border-t border-gray-200 px-6 py-4\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <p className=\"text-gray-500 text-xs uppercase tracking-wide mb-1\">Assistant</p>\n            <p className=\"font-medium text-gray-900\">{agentName}</p>\n          </div>\n          <div>\n            <p className=\"text-gray-500 text-xs uppercase tracking-wide mb-1\">Connection</p>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-2 h-2 rounded-full ${\n                callState.status === 'connected' ? 'bg-green-500' :\n                callState.status === 'connecting' ? 'bg-amber-500 animate-pulse' :\n                callState.status === 'error' ? 'bg-red-500' :\n                'bg-gray-400'\n              }`}></div>\n              <span className=\"text-gray-700 capitalize\">\n                {callState.status === 'idle' ? 'Ready' :\n                 callState.status === 'connecting' ? 'Connecting' :\n                 callState.status === 'connected' ? 'Active' :\n                 callState.status === 'ended' ? 'Ended' : 'Error'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VapiAgentCall;\n","import React, { useState, useEffect } from 'react';\nimport secureLocalStorage from 'react-secure-storage';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchAllAgents, fetchAllSyncedAgents, getAssistantById, getVapiAssistantById, createAssistant, updateAssistant, deleteAssistant } from '@/api/services/agents/agentService';\nimport axiosInstance from '@/api/axios/axiosInstance';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport {\n  Search,\n  Plus,\n  MessageSquare,\n  Settings,\n  Mic,\n  Brain,\n  BarChart3,\n  Sliders,\n  Monitor,\n  Phone,\n  Radio,\n  User,\n  Bot,\n  Volume2,\n  Loader2,\n  Trash2,\n  AlertTriangle,\n  Wand2,\n  Database,\n  Share2,\n  Users,\n  Globe,\n  ExternalLink,\n  FileText,\n  Upload,\n  Info,\n  Play,\n  Pause,\n  Crown\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport VapiAgentCall from './components/VapiAgentCall';\nimport { useAuth } from '@/context/AuthContext';\nimport {\n  MODEL_PROVIDERS,\n  VOICE_PROVIDERS,\n  TRANSCRIBER_PROVIDERS,\n  getProviderModels,\n  getProviderVoices,\n  getTranscriberModels,\n  getDefaultModel,\n  getDefaultVoice,\n  getDefaultTranscriberModel,\n  type ModelProvider,\n  type VoiceProvider,\n  type TranscriberProvider\n} from '@/config/vapiProviders';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\n\ninterface Agent {\n  id: string;\n  name: string;\n  firstMessage: string;\n  model: any;\n  voice: any;\n  transcriber: any;\n  createdAt: string;\n  updatedAt: string;\n  assistant_id?: string;\n}\n\nconst VapiStyleAgents: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);\n  const [selectedAgentDetails, setSelectedAgentDetails] = useState<any>(null);\n  const [isLoadingDetails, setIsLoadingDetails] = useState(false);\n  const [isCallDialogOpen, setIsCallDialogOpen] = useState(false);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingField, setEditingField] = useState<string | null>(null);\n  const [autoSaveTimeout, setAutoSaveTimeout] = useState<NodeJS.Timeout | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [agentToDelete, setAgentToDelete] = useState<Agent | null>(null);\n  const [publishedAgents, setPublishedAgents] = useState<Set<string>>(new Set());\n\n  // Debug environment variables\n  console.log('🔍 Environment Debug:');\n  console.log('- VITE_VAPI_PUBLIC_KEY:', import.meta.env.VITE_VAPI_PUBLIC_KEY ? `${import.meta.env.VITE_VAPI_PUBLIC_KEY.substring(0, 8)}...` : 'Not set');\n  console.log('- All env vars:', import.meta.env);\n\n  // Create assistant form state\n  const [createForm, setCreateForm] = useState({\n    name: '',\n    firstMessage: '',\n    systemMessage: '',\n    firstMessageMode: 'assistant-speaks-first',\n    firstMessageInterruptionsEnabled: false,\n    endCallMessage: '',\n    voicemailMessage: '',\n    endCallPhrases: [],\n    maxDurationSeconds: 600,\n    backgroundSound: 'office',\n    model: {\n      provider: 'openai',\n      model: 'gpt-4',\n      temperature: 0.7,\n      maxTokens: 1000,\n      numFastTurns: 0\n    },\n    voice: {\n      provider: 'vapi',\n      voiceId: 'Cole',\n      speed: 1.0\n    },\n    transcriber: {\n      provider: 'deepgram',\n      model: 'nova-2',\n      language: 'en'\n    }\n  });\n\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  // Fetch agents - use synced agents to ensure DB and VAPI consistency\n  const { data: agentsData, isLoading } = useQuery({\n    queryKey: ['syncedAgents', user?.id, searchQuery],\n    queryFn: () => fetchAllSyncedAgents(searchQuery),\n    staleTime: 2 * 60 * 1000, // Increased to 2 minutes\n    gcTime: 5 * 60 * 1000, // 5 minutes\n    enabled: !!user?.id, // Only fetch when user is authenticated\n    placeholderData: (previousData) => previousData, // Keep previous data while loading\n    retry: (failureCount, error: any) => {\n      // Don't retry for expected scenarios (normal for new users)\n      const expectedStatuses = [404, 204, 402]; // 402 = Payment Required (no credits)\n      if (expectedStatuses.includes(error?.response?.status)) {\n        return false;\n      }\n      return failureCount < 2; // Retry up to 2 times for other errors\n    },\n  });\n\n  // Create assistant mutation\n  const createAssistantMutation = useMutation({\n    mutationFn: createAssistant,\n    onSuccess: (data) => {\n      console.log('✅ Assistant created successfully:', data);\n      toast.success(`Assistant \"${createForm.name}\" created successfully!`);\n      setIsCreateDialogOpen(false);\n      setCreateForm({\n        name: '',\n        firstMessage: '',\n        systemMessage: '',\n        firstMessageMode: 'assistant-speaks-first',\n        firstMessageInterruptionsEnabled: false,\n        endCallMessage: '',\n        voicemailMessage: '',\n        endCallPhrases: [],\n        maxDurationSeconds: 600,\n        backgroundSound: 'office',\n        model: {\n          provider: 'openai',\n          model: 'gpt-4',\n          temperature: 0.7,\n          maxTokens: 1000,\n          numFastTurns: 0\n        },\n        voice: {\n          provider: '11labs',\n          voiceId: '21m00Tcm4TlvDq8ikWAM',\n          speed: 1.0\n        },\n        transcriber: {\n          provider: 'deepgram',\n          model: 'nova-2',\n          language: 'en'\n        }\n      });\n      // Refresh agents list\n      queryClient.invalidateQueries({ queryKey: ['syncedAgents'] });\n\n      // Also refresh regular agents as fallback\n      queryClient.invalidateQueries({ queryKey: ['agents'] });\n    },\n    onError: (error: any) => {\n      console.error('❌ Error creating assistant:', error);\n\n      // Extract meaningful error message\n      let errorMessage = 'Failed to create assistant';\n      if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      // Show specific error to user\n      toast.error(`Creation failed: ${errorMessage}`);\n\n      // Log detailed error for debugging\n      console.error('Detailed error:', {\n        status: error.response?.status,\n        data: error.response?.data,\n        message: error.message\n      });\n    }\n  });\n\n  // Update assistant mutation\n  const updateAssistantMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => updateAssistant(id, data),\n    onSuccess: (response, variables) => {\n      console.log('✅ Assistant updated successfully:', response);\n\n      // Show success message with field info\n      const fieldName = Object.keys(variables.data)[0];\n      toast.success(`${fieldName} updated successfully`);\n\n      // Refresh agents list and details\n      queryClient.invalidateQueries({ queryKey: ['syncedAgents', user?.id] });\n      if (selectedAgent) {\n        loadAgentDetails(selectedAgent.id);\n      }\n    },\n    onError: (error: any, variables) => {\n      console.error('❌ Error updating assistant:', error);\n\n      // Extract meaningful error message\n      let errorMessage = 'Failed to update assistant';\n      if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      // Show specific error to user\n      const fieldName = Object.keys(variables.data)[0];\n      toast.error(`Failed to update ${fieldName}: ${errorMessage}`);\n\n      // Log detailed error for debugging\n      console.error('Update error details:', {\n        field: fieldName,\n        value: variables.data[fieldName],\n        status: error.response?.status,\n        data: error.response?.data,\n        message: error.message\n      });\n    }\n  });\n\n  // Delete assistant mutation\n  const deleteAssistantMutation = useMutation({\n    mutationFn: deleteAssistant,\n    onSuccess: (data) => {\n      console.log('✅ Delete success:', data);\n      toast.success(`Assistant \"${agentToDelete?.name}\" deleted successfully!`);\n      setIsDeleteDialogOpen(false);\n      setAgentToDelete(null);\n\n      // If the deleted agent was selected, clear selection\n      if (selectedAgent && agentToDelete && selectedAgent.id === agentToDelete.id) {\n        setSelectedAgent(null);\n        setSelectedAgentDetails(null);\n      }\n\n      // Refresh agents list\n      queryClient.invalidateQueries({ queryKey: ['syncedAgents', user?.id] });\n    },\n    onError: (error: any) => {\n      console.error('❌ Error deleting assistant:', error);\n\n      // Extract meaningful error message\n      let errorMessage = 'Unknown error occurred';\n      if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.response?.data?.error) {\n        errorMessage = error.response.data.error;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      const assistantName = agentToDelete?.name || 'Assistant';\n      toast.error(`Failed to delete ${assistantName}: ${errorMessage}`);\n\n      // Log detailed error for debugging\n      console.error('Delete error details:', {\n        assistantId: agentToDelete?.id,\n        assistantName: agentToDelete?.name,\n        status: error.response?.status,\n        data: error.response?.data,\n        message: error.message\n      });\n\n      // Keep dialog open so user can try again or cancel\n    }\n  });\n\n  const agents = agentsData?.data || [];\n  const isPaginationDisabled = user?.isSuperAdmin || false;\n  const totalAssistants = agentsData?.total || agents.length;\n\n  // Initialize published agents based on metadata from VAPI\n  useEffect(() => {\n    if (agents.length > 0) {\n      console.log('🔍 Agent data structure (first agent):', agents[0]); // Debug agent structure\n      console.log('🔍 Total agents loaded:', agents.length);\n      console.log('👑 Pagination disabled (Super Admin):', isPaginationDisabled);\n      console.log('📊 Total assistants available:', totalAssistants);\n\n      const publishedSet = new Set<string>();\n      agents.forEach((agent: any, index: number) => {\n        // Check if agent is marked as published in metadata (from VAPI)\n        const assistantData = agent.assistant_data || {};\n        const metadata = assistantData.metadata || {};\n\n        if (metadata.published === true) {\n          publishedSet.add(String(agent.id));\n        }\n\n        // Debug assistant_id availability for first few agents\n        if (index < 3) {\n          console.log(`🔍 Agent ${index + 1}:`, {\n            name: agent.name,\n            localId: agent.id,\n            assistantId: agent.assistant_id,\n            hasAssistantId: !!agent.assistant_id,\n            structure: Object.keys(agent)\n          });\n        }\n      });\n      setPublishedAgents(publishedSet);\n      console.log('📊 Initialized published agents from metadata:', Array.from(publishedSet));\n    }\n  }, [agents]);\n\n  // Auto-select first agent if none selected\n  useEffect(() => {\n    if (agents.length > 0 && !selectedAgent) {\n      console.log('Available agents:', agents);\n      console.log('First agent ID:', agents[0]?.id, 'Type:', typeof agents[0]?.id);\n      setSelectedAgent(agents[0]);\n    }\n  }, [agents, selectedAgent]);\n\n  // Load agent details when selected\n  useEffect(() => {\n    if (selectedAgent && selectedAgent.id) {\n      // Use assistant_id (VAPI UUID) for loading details, fallback to local id\n      const assistantId = selectedAgent.assistant_id || selectedAgent.id;\n      console.log('🔍 Loading agent details:', {\n        agentName: selectedAgent.name,\n        localId: selectedAgent.id,\n        assistantId: selectedAgent.assistant_id,\n        usingId: assistantId,\n        idType: selectedAgent.assistant_id ? 'VAPI UUID' : 'Local ID'\n      });\n      loadAgentDetails(assistantId);\n    }\n  }, [selectedAgent]);\n\n  // Helper function to check if a string is a valid UUID\n  const isValidUUID = (str: string) => {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(str);\n  };\n\n  const loadAgentDetails = async (agentId: string) => {\n    setIsLoadingDetails(true);\n    try {\n      const idString = String(agentId);\n\n      // Check if the ID is a valid UUID - if not, we'll still try to load details\n      if (!isValidUUID(idString)) {\n        console.warn('Agent ID is not a valid UUID:', idString, '- will try to load details anyway');\n      }\n\n      // Get complete details from VAPI\n      console.log('🔍 Fetching complete VAPI details for agent:', idString);\n      const details = await getVapiAssistantById(idString);\n      console.log('📋 Complete VAPI agent details:', details);\n\n      // Extract all available VAPI data\n      const vapiData = details.data || details;\n      setSelectedAgentDetails({\n        // Basic information\n        name: vapiData.name || selectedAgent?.name,\n        firstMessage: vapiData.firstMessage || selectedAgent?.firstMessage,\n        firstMessageMode: vapiData.firstMessageMode || 'assistant-speaks-first',\n        firstMessageInterruptionsEnabled: vapiData.firstMessageInterruptionsEnabled || false,\n\n        // Model configuration\n        model: {\n          provider: vapiData.model?.provider || 'openai',\n          model: vapiData.model?.model || 'gpt-4',\n          temperature: vapiData.model?.temperature || 0.7,\n          maxTokens: vapiData.model?.maxTokens || 1000,\n          numFastTurns: vapiData.model?.numFastTurns || 0,\n          messages: vapiData.model?.messages || [],\n          tools: vapiData.model?.tools || [],\n          toolIds: vapiData.model?.toolIds || [],\n          knowledgeBase: vapiData.model?.knowledgeBase,\n          knowledgeBaseId: vapiData.model?.knowledgeBaseId,\n          emotionRecognitionEnabled: vapiData.model?.emotionRecognitionEnabled || false,\n          thinking: vapiData.model?.thinking || { type: 'disabled' }\n        },\n\n        // Voice configuration\n        voice: {\n          provider: vapiData.voice?.provider || '11labs',\n          voiceId: vapiData.voice?.voiceId || '21m00Tcm4TlvDq8ikWAM',\n          speed: vapiData.voice?.speed || 1.0,\n          stability: vapiData.voice?.stability,\n          similarityBoost: vapiData.voice?.similarityBoost,\n          cachingEnabled: vapiData.voice?.cachingEnabled || false,\n          chunkPlan: vapiData.voice?.chunkPlan || { enabled: false },\n          fallbackPlan: vapiData.voice?.fallbackPlan\n        },\n\n        // Transcriber configuration\n        transcriber: {\n          provider: vapiData.transcriber?.provider || 'deepgram',\n          model: vapiData.transcriber?.model || 'nova-2',\n          language: vapiData.transcriber?.language || 'en',\n          confidenceThreshold: vapiData.transcriber?.confidenceThreshold || 0.4,\n          endOfTurnConfidenceThreshold: vapiData.transcriber?.endOfTurnConfidenceThreshold || 0.7,\n          minEndOfTurnSilenceWhenConfident: vapiData.transcriber?.minEndOfTurnSilenceWhenConfident || 160,\n          maxTurnSilence: vapiData.transcriber?.maxTurnSilence || 400,\n          wordFinalizationMaxWaitTime: vapiData.transcriber?.wordFinalizationMaxWaitTime || 160,\n          enableUniversalStreamingApi: vapiData.transcriber?.enableUniversalStreamingApi || false,\n          formatTurns: vapiData.transcriber?.formatTurns || false,\n          disablePartialTranscripts: vapiData.transcriber?.disablePartialTranscripts || false,\n          keywords: vapiData.transcriber?.keywords || [],\n          wordBoost: vapiData.transcriber?.wordBoost || []\n        },\n\n        // System message and prompts\n        systemMessage: vapiData.model?.messages?.[0]?.content || vapiData.systemMessage || 'You are a helpful AI assistant.',\n        endCallMessage: vapiData.endCallMessage,\n        voicemailMessage: vapiData.voicemailMessage,\n        endCallPhrases: vapiData.endCallPhrases || [],\n\n        // Functions and tools\n        functions: vapiData.functions || [],\n        tools: vapiData.tools || [],\n        customFunctions: vapiData.customFunctions,\n\n        // Variables\n        variableValues: vapiData.variableValues,\n\n        // Advanced settings\n        maxDurationSeconds: vapiData.maxDurationSeconds || 600,\n        backgroundSound: vapiData.backgroundSound || 'off',\n        modelOutputInMessagesEnabled: vapiData.modelOutputInMessagesEnabled || false,\n        backgroundDenoisingEnabled: vapiData.backgroundDenoisingEnabled || false,\n        clientMessages: vapiData.clientMessages,\n        serverMessages: vapiData.serverMessages,\n\n        // Transport and server configuration\n        transportConfigurations: vapiData.transportConfigurations || [],\n        server: vapiData.server,\n        observabilityPlan: vapiData.observabilityPlan,\n\n        // Speaking plans\n        startSpeakingPlan: vapiData.startSpeakingPlan,\n        stopSpeakingPlan: vapiData.stopSpeakingPlan,\n\n        // Credentials\n        credentialIds: vapiData.credentialIds || [],\n\n        // Metadata and timestamps\n        metadata: vapiData.metadata || {},\n        createdAt: vapiData.createdAt,\n        updatedAt: vapiData.updatedAt,\n\n        // All raw VAPI data for debugging\n        _rawVapiData: vapiData\n      });\n\n    } catch (error: any) {\n      console.error('Error loading agent details:', error);\n      console.error('Error details:', error.response?.data || error.message);\n\n      // Set fallback details to prevent crashes\n      setSelectedAgentDetails({\n        model: { provider: 'OpenAI', model: 'GPT-4' },\n        voice: { provider: '11Labs', voiceId: 'Default Voice' },\n        transcriber: { provider: 'Deepgram' },\n        systemMessage: 'You are a helpful AI assistant.'\n      });\n    } finally {\n      setIsLoadingDetails(false);\n    }\n  };\n\n  const getInitials = (name: string) => {\n    if (!name) return 'NA';\n    return name\n      .split(' ')\n      .map(part => part.charAt(0))\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return 'Unknown';\n    try {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    } catch (error) {\n      return 'Invalid Date';\n    }\n  };\n\n  // Handle create form changes\n  const handleCreateFormChange = (field: string, value: any) => {\n    if (field.includes('.')) {\n      const [parent, child] = field.split('.');\n      setCreateForm(prev => ({\n        ...prev,\n        [parent]: {\n          ...(prev[parent as keyof typeof prev] as any),\n          [child]: value\n        }\n      }));\n    } else {\n      setCreateForm(prev => ({\n        ...prev,\n        [field]: value\n      }));\n    }\n  };\n\n  // Validation function for create form\n  const validateCreateForm = () => {\n    const errors: string[] = [];\n\n    // Required fields validation\n    if (!createForm.name?.trim()) {\n      errors.push('Assistant name is required');\n    }\n    if (!createForm.firstMessage?.trim()) {\n      errors.push('First message is required');\n    }\n    if (!createForm.systemMessage?.trim()) {\n      errors.push('System message is required');\n    }\n\n    // Model validation\n    if (!createForm.model.provider) {\n      errors.push('Model provider is required');\n    }\n    if (!createForm.model.model) {\n      errors.push('Model selection is required');\n    }\n    if (createForm.model.temperature < 0 || createForm.model.temperature > 2) {\n      errors.push('Temperature must be between 0 and 2');\n    }\n    if (createForm.model.maxTokens < 1 || createForm.model.maxTokens > 32000) {\n      errors.push('Max tokens must be between 1 and 32000');\n    }\n\n    // Voice validation\n    if (!createForm.voice.provider) {\n      errors.push('Voice provider is required');\n    }\n    if (!createForm.voice.voiceId) {\n      errors.push('Voice selection is required');\n    }\n    if (createForm.voice.speed < 0.25 || createForm.voice.speed > 4) {\n      errors.push('Voice speed must be between 0.25 and 4');\n    }\n\n    // Transcriber validation\n    if (!createForm.transcriber.provider) {\n      errors.push('Transcriber provider is required');\n    }\n    if (!createForm.transcriber.model) {\n      errors.push('Transcriber model is required');\n    }\n    if (!createForm.transcriber.language) {\n      errors.push('Transcriber language is required');\n    }\n\n    // Advanced settings validation\n    if (createForm.maxDurationSeconds < 10 || createForm.maxDurationSeconds > 43200) {\n      errors.push('Max duration must be between 10 and 43200 seconds');\n    }\n\n    return errors;\n  };\n\n  // Handle create assistant submit\n  const handleCreateSubmit = () => {\n    const validationErrors = validateCreateForm();\n\n    if (validationErrors.length > 0) {\n      toast.error(`Please fix the following errors:\\n${validationErrors.join('\\n')}`);\n      return;\n    }\n\n    // Additional business logic validation\n    if (createForm.name.length > 40) {\n      toast.error('Assistant name must be 40 characters or less');\n      return;\n    }\n\n    if (createForm.endCallMessage && createForm.endCallMessage.length > 1000) {\n      toast.error('End call message must be 1000 characters or less');\n      return;\n    }\n\n    if (createForm.voicemailMessage && createForm.voicemailMessage.length > 1000) {\n      toast.error('Voicemail message must be 1000 characters or less');\n      return;\n    }\n\n    console.log('✅ Form validation passed, creating assistant...');\n\n    // Transform the form data for VAPI format\n    const vapiFormData = {\n      ...createForm,\n      // Ensure firstMessageMode has the correct type\n      firstMessageMode: createForm.firstMessageMode as 'assistant-speaks-first' | 'wait-for-user',\n      // Ensure backgroundSound has the correct type\n      backgroundSound: createForm.backgroundSound as 'off' | 'office' | 'nature' | 'music',\n      // Ensure transcriber provider has the correct type\n      transcriber: {\n        ...createForm.transcriber,\n        provider: createForm.transcriber.provider as 'assembly-ai' | 'deepgram' | 'gladia' | 'talkscriber'\n      },\n      // Ensure voice provider has the correct type\n      voice: {\n        ...createForm.voice,\n        provider: createForm.voice.provider as 'openai' | 'vapi' | 'deepgram' | 'azure' | '11labs' | 'cartesia' | 'playht' | 'lmnt' | 'neets' | 'rime-ai'\n      },\n      // Remove systemMessage from root level (VAPI doesn't accept it)\n      systemMessage: undefined,\n      // Add system message to model.messages array (VAPI format)\n      model: {\n        ...createForm.model,\n        provider: createForm.model.provider as 'openai' | 'anthropic' | 'groq' | 'together' | 'anyscale' | 'perplexity',\n        messages: [\n          {\n            role: 'system' as const,\n            content: createForm.systemMessage\n          }\n        ]\n      }\n    };\n\n    console.log('🔄 Transformed form data for VAPI:', vapiFormData);\n    createAssistantMutation.mutate(vapiFormData);\n  };\n\n  // Helper function to normalize provider values\n  const normalizeProviderValue = (provider: string, type: 'model' | 'voice') => {\n    if (!provider) return '';\n\n    const normalized = provider.toLowerCase().trim();\n\n    // Map common variations to our standard values\n    const modelProviderMap: { [key: string]: string } = {\n      'openai': 'openai',\n      'open-ai': 'openai',\n      'anthropic': 'anthropic',\n      'groq': 'groq',\n      'together': 'together',\n      'anyscale': 'anyscale'\n    };\n\n    const voiceProviderMap: { [key: string]: string } = {\n      '11labs': '11labs',\n      'elevenlabs': '11labs',\n      'eleven-labs': '11labs',\n      'openai': 'openai',\n      'open-ai': 'openai',\n      'azure': 'azure',\n      'playht': 'playht',\n      'play-ht': 'playht',\n      'deepgram': 'deepgram',\n      'cartesia': 'cartesia',\n      'lmnt': 'lmnt'\n    };\n\n    const map = type === 'model' ? modelProviderMap : voiceProviderMap;\n    return map[normalized] || normalized;\n  };\n\n  // Auto-save functionality\n  const handleFieldUpdate = (field: string, value: any) => {\n    if (!selectedAgent) {\n      console.warn('No selected agent for field update');\n      return;\n    }\n\n    console.log('🔄 Field update:', field, 'Value:', value, 'Type:', typeof value, 'Agent ID:', selectedAgent.id);\n\n    // Clear existing timeout\n    if (autoSaveTimeout) {\n      clearTimeout(autoSaveTimeout);\n    }\n\n    // Update local state immediately with auto-selection\n    setSelectedAgentDetails((prev: any) => {\n      const updated = { ...prev };\n      if (field.includes('.')) {\n        const [parent, child] = field.split('.');\n        updated[parent] = { ...updated[parent], [child]: value };\n\n        // Auto-selection logic for provider changes\n        if (field === 'model.provider') {\n          // Auto-select default model for the provider\n          const defaultModel = getDefaultModel(value);\n          if (defaultModel) {\n            updated.model.model = defaultModel;\n            console.log('🤖 Auto-selected model:', defaultModel, 'for provider:', value);\n          }\n        } else if (field === 'voice.provider') {\n          // Auto-select default voice for the provider\n          const defaultVoice = getDefaultVoice(value);\n          if (defaultVoice) {\n            updated.voice.voiceId = defaultVoice;\n            console.log('🎤 Auto-selected voice:', defaultVoice, 'for provider:', value);\n          }\n        } else if (field === 'transcriber.provider') {\n          // Auto-select default transcriber model for the provider\n          const defaultModel = getDefaultTranscriberModel(value);\n          if (defaultModel) {\n            updated.transcriber.model = defaultModel;\n            console.log('📝 Auto-selected transcriber model:', defaultModel, 'for provider:', value);\n          }\n        }\n      } else {\n        updated[field] = value;\n      }\n      return updated;\n    });\n\n    // Set new timeout for auto-save\n    const timeout = setTimeout(() => {\n      const updateData: any = {};\n\n      // List of fields that are only for local database, not VAPI\n      const localOnlyFields = ['status', 'published', 'publishedAt', 'systemMessage'];\n\n      if (field.includes('.')) {\n        const [parent, child] = field.split('.');\n\n        // Skip if this is a local-only field\n        if (localOnlyFields.includes(parent) || localOnlyFields.includes(child)) {\n          console.log('⚠️ Skipping VAPI update for local-only field:', field);\n          return;\n        }\n\n        updateData[parent] = { ...selectedAgentDetails[parent], [child]: value };\n\n        // Include auto-selected values in the update\n        if (field === 'model.provider') {\n          const defaultModel = getDefaultModel(value);\n          if (defaultModel) {\n            updateData.model.model = defaultModel;\n          }\n        } else if (field === 'voice.provider') {\n          const defaultVoice = getDefaultVoice(value);\n          if (defaultVoice) {\n            updateData.voice.voiceId = defaultVoice;\n          }\n        } else if (field === 'transcriber.provider') {\n          const defaultModel = getDefaultTranscriberModel(value);\n          if (defaultModel) {\n            updateData.transcriber.model = defaultModel;\n          }\n        }\n      } else {\n        // Skip if this is a local-only field\n        if (localOnlyFields.includes(field)) {\n          console.log('⚠️ Skipping VAPI update for local-only field:', field);\n          return;\n        }\n\n        updateData[field] = value;\n      }\n\n      console.log('🔄 Auto-saving field:', field, 'with value:', value, 'updateData:', updateData);\n\n      // Use assistant_id (VAPI UUID) instead of local database id\n      const assistantId = selectedAgent.assistant_id || selectedAgent.id;\n      console.log('🔍 Using assistant ID for VAPI:', assistantId, 'Type:', typeof assistantId);\n\n      updateAssistantMutation.mutate({\n        id: String(assistantId),\n        data: updateData\n      });\n    }, 1000); // Auto-save after 1 second of no changes\n\n    setAutoSaveTimeout(timeout);\n  };\n\n  // Handle system message update (special case for VAPI format)\n  const handleSystemMessageUpdate = (value: string) => {\n    if (!selectedAgent) {\n      console.warn('No selected agent for system message update');\n      return;\n    }\n\n    console.log('🔄 System message update:', value);\n\n    // Clear existing timeout\n    if (autoSaveTimeout) {\n      clearTimeout(autoSaveTimeout);\n    }\n\n    // Update local state immediately\n    setSelectedAgentDetails((prev: any) => {\n      const updated = { ...prev };\n\n      // Update both systemMessage (for local display) and model.messages (for VAPI)\n      updated.systemMessage = value;\n\n      // Ensure model.messages array exists and update the first message (system message)\n      if (!updated.model) {\n        updated.model = {};\n      }\n      if (!updated.model.messages) {\n        updated.model.messages = [];\n      }\n\n      // Update or create the system message as the first message\n      if (updated.model.messages.length === 0) {\n        updated.model.messages.push({\n          role: 'system',\n          content: value\n        });\n      } else if (updated.model.messages[0].role === 'system') {\n        updated.model.messages[0].content = value;\n      } else {\n        // Insert system message at the beginning\n        updated.model.messages.unshift({\n          role: 'system',\n          content: value\n        });\n      }\n\n      return updated;\n    });\n\n    // Set new timeout for auto-save\n    const timeout = setTimeout(() => {\n      // For VAPI, we need to send the model.messages array, not systemMessage\n      const currentMessages = selectedAgentDetails?.model?.messages || [];\n      const updatedMessages = [...currentMessages];\n\n      // Update or create the system message\n      if (updatedMessages.length === 0) {\n        updatedMessages.push({\n          role: 'system',\n          content: value\n        });\n      } else if (updatedMessages[0].role === 'system') {\n        updatedMessages[0].content = value;\n      } else {\n        updatedMessages.unshift({\n          role: 'system',\n          content: value\n        });\n      }\n\n      const updateData = {\n        model: {\n          ...selectedAgentDetails?.model,\n          messages: updatedMessages\n        }\n      };\n\n      console.log('🔄 Auto-saving system message via model.messages:', updateData);\n\n      // Use assistant_id (VAPI UUID) instead of local database id\n      const assistantId = selectedAgent.assistant_id || selectedAgent.id;\n      console.log('🔍 Using assistant ID for system message update:', assistantId);\n\n      updateAssistantMutation.mutate({\n        id: String(assistantId),\n        data: updateData\n      });\n    }, 1000); // Auto-save after 1 second of no changes\n\n    setAutoSaveTimeout(timeout);\n  };\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimeout) {\n        clearTimeout(autoSaveTimeout);\n      }\n    };\n  }, [autoSaveTimeout]);\n\n  // Handle delete agent\n  const handleDeleteAgent = (agent: Agent) => {\n    setAgentToDelete(agent);\n    setIsDeleteDialogOpen(true);\n  };\n\n  // Confirm delete\n  const confirmDelete = () => {\n    if (agentToDelete) {\n      // Use assistant_id (VAPI UUID) for deletion\n      const assistantId = agentToDelete.assistant_id || agentToDelete.id;\n      console.log('🗑️ Deleting agent:', agentToDelete.id, agentToDelete.name, 'Using assistant_id:', assistantId);\n      deleteAssistantMutation.mutate(String(assistantId));\n    } else {\n      toast.error('No agent selected for deletion');\n    }\n  };\n\n  // Handle publish/unpublish toggle\n  const handlePublishToggle = async (agent: Agent) => {\n    if (!agent || !agent.id) return;\n\n    const agentId = String(agent.id);\n    const isCurrentlyPublished = publishedAgents.has(agentId);\n\n    try {\n      console.log(`🔄 ${isCurrentlyPublished ? 'Unpublishing' : 'Publishing'} agent:`, agent.name);\n\n      // Prepare VAPI update data with metadata to track publish status\n      const vapiUpdateData = {\n        metadata: {\n          ...selectedAgentDetails?.metadata,\n          published: !isCurrentlyPublished,\n          publishedAt: !isCurrentlyPublished ? new Date().toISOString() : null\n        }\n      };\n\n      // Use assistant_id (VAPI UUID) instead of local database id\n      const assistantId = agent.assistant_id || agent.id;\n      console.log('🔍 Using assistant ID for VAPI publish:', assistantId, 'Type:', typeof assistantId);\n\n      // Call the update API to update VAPI with metadata\n      await updateAssistantMutation.mutateAsync({\n        id: String(assistantId),\n        data: vapiUpdateData\n      });\n\n      // Update local state only after successful API call\n      const newPublishedAgents = new Set(publishedAgents);\n      if (isCurrentlyPublished) {\n        newPublishedAgents.delete(agentId);\n        toast.success(`${agent.name} unpublished successfully`);\n      } else {\n        newPublishedAgents.add(agentId);\n        toast.success(`${agent.name} published successfully`);\n      }\n      setPublishedAgents(newPublishedAgents);\n\n      // Update selected agent details if this is the currently selected agent\n      if (selectedAgent && selectedAgent.id === agent.id) {\n        setSelectedAgentDetails((prev: any) => ({\n          ...prev,\n          metadata: vapiUpdateData.metadata\n        }));\n      }\n\n    } catch (error: any) {\n      console.error('❌ Error toggling publish status:', error);\n\n      // Extract meaningful error message\n      let errorMessage = 'Failed to update publish status';\n      if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      toast.error(`Failed to ${isCurrentlyPublished ? 'unpublish' : 'publish'} ${agent.name}: ${errorMessage}`);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gradient-to-br from-slate-50 via-white to-gray-50\">\n      {/* Left Sidebar - Agents List */}\n      <div className=\"w-80 border-r border-gray-200 bg-white/80 backdrop-blur-sm flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex flex-col\">\n              <h1 className=\"text-xl font-semibold text-gray-900\">Assistants</h1>\n              {isPaginationDisabled && (\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <Badge variant=\"secondary\" className=\"text-xs bg-blue-100 text-blue-700 border-blue-200\">\n                    <Crown className=\"h-3 w-3 mr-1\" />\n                    Super Admin View\n                  </Badge>\n                  <span className=\"text-xs text-gray-500\">\n                    Showing all {totalAssistants} assistants\n                  </span>\n                </div>\n              )}\n            </div>\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Assistant\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[1200px] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle className=\"flex items-center gap-2\">\n                    <Bot className=\"h-5 w-5 text-blue-600\" />\n                    Create New Assistant\n                  </DialogTitle>\n                </DialogHeader>\n\n                <div className=\"space-y-6 py-4\">\n                  {/* Basic Information */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Basic Information</h3>\n\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Name *</label>\n                      <Input\n                        value={createForm.name}\n                        onChange={(e) => handleCreateFormChange('name', e.target.value)}\n                        placeholder=\"Enter assistant name\"\n                        className={`mt-1 ${!createForm.name?.trim() ? 'border-red-300' : ''}`}\n                        maxLength={40}\n                      />\n                      {!createForm.name?.trim() && (\n                        <p className=\"text-xs text-red-500 mt-1\">Assistant name is required</p>\n                      )}\n                      {createForm.name && createForm.name.length > 40 && (\n                        <p className=\"text-xs text-red-500 mt-1\">Name must be 40 characters or less</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">First Message *</label>\n                      <Textarea\n                        value={createForm.firstMessage}\n                        onChange={(e) => handleCreateFormChange('firstMessage', e.target.value)}\n                        placeholder=\"Hello! How can I help you today?\"\n                        className={`mt-1 ${!createForm.firstMessage?.trim() ? 'border-red-300' : ''}`}\n                        rows={3}\n                      />\n                      {!createForm.firstMessage?.trim() && (\n                        <p className=\"text-xs text-red-500 mt-1\">First message is required</p>\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">System Message *</label>\n                      <Textarea\n                        value={createForm.systemMessage}\n                        onChange={(e) => handleCreateFormChange('systemMessage', e.target.value)}\n                        placeholder=\"You are a helpful AI assistant...\"\n                        className={`mt-1 ${!createForm.systemMessage?.trim() ? 'border-red-300' : ''}`}\n                        rows={4}\n                      />\n                      {!createForm.systemMessage?.trim() && (\n                        <p className=\"text-xs text-red-500 mt-1\">System message is required</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Model Configuration */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Model Configuration</h3>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                        <Select value={createForm.model.provider} onValueChange={(value) => handleCreateFormChange('model.provider', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {MODEL_PROVIDERS.map((provider) => (\n                              <SelectItem key={provider.id} value={provider.id}>\n                                {provider.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Model</label>\n                        <Select value={createForm.model.model} onValueChange={(value) => handleCreateFormChange('model.model', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {getProviderModels(createForm.model.provider).map((model) => (\n                              <SelectItem key={model.id} value={model.id}>\n                                {model.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Temperature</label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"2\"\n                          step=\"0.1\"\n                          value={createForm.model.temperature}\n                          onChange={(e) => handleCreateFormChange('model.temperature', parseFloat(e.target.value))}\n                          className=\"mt-1\"\n                          placeholder=\"0.7\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Max Tokens</label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"32000\"\n                          value={createForm.model.maxTokens}\n                          onChange={(e) => handleCreateFormChange('model.maxTokens', parseInt(e.target.value))}\n                          className=\"mt-1\"\n                          placeholder=\"1000\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Fast Turns</label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"10\"\n                          value={createForm.model.numFastTurns}\n                          onChange={(e) => handleCreateFormChange('model.numFastTurns', parseInt(e.target.value))}\n                          className=\"mt-1\"\n                          placeholder=\"0\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Voice Configuration */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Voice Configuration</h3>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                        <Select value={createForm.voice.provider} onValueChange={(value) => handleCreateFormChange('voice.provider', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {VOICE_PROVIDERS.map((provider) => (\n                              <SelectItem key={provider.id} value={provider.id}>\n                                {provider.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Voice</label>\n                        <Select value={createForm.voice.voiceId} onValueChange={(value) => handleCreateFormChange('voice.voiceId', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {getProviderVoices(createForm.voice.provider).map((voice) => (\n                              <SelectItem key={voice.id} value={voice.id}>\n                                {voice.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Speed</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0.25\"\n                        max=\"4\"\n                        step=\"0.1\"\n                        value={createForm.voice.speed}\n                        onChange={(e) => handleCreateFormChange('voice.speed', parseFloat(e.target.value))}\n                        className=\"mt-1\"\n                        placeholder=\"1.0\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Transcriber Configuration */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Transcriber Configuration</h3>\n\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                        <Select value={createForm.transcriber.provider} onValueChange={(value) => handleCreateFormChange('transcriber.provider', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {TRANSCRIBER_PROVIDERS.map((provider) => (\n                              <SelectItem key={provider.id} value={provider.id}>\n                                {provider.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Model</label>\n                        <Select value={createForm.transcriber.model} onValueChange={(value) => handleCreateFormChange('transcriber.model', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {getTranscriberModels(createForm.transcriber.provider).map((model) => (\n                              <SelectItem key={model.id} value={model.id}>\n                                {model.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Language</label>\n                        <Select value={createForm.transcriber.language} onValueChange={(value) => handleCreateFormChange('transcriber.language', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"en\">English</SelectItem>\n                            <SelectItem value=\"es\">Spanish</SelectItem>\n                            <SelectItem value=\"fr\">French</SelectItem>\n                            <SelectItem value=\"de\">German</SelectItem>\n                            <SelectItem value=\"it\">Italian</SelectItem>\n                            <SelectItem value=\"pt\">Portuguese</SelectItem>\n                            <SelectItem value=\"ru\">Russian</SelectItem>\n                            <SelectItem value=\"ja\">Japanese</SelectItem>\n                            <SelectItem value=\"ko\">Korean</SelectItem>\n                            <SelectItem value=\"zh\">Chinese</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Advanced Configuration */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium\">Advanced Configuration</h3>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">First Message Mode</label>\n                        <Select value={createForm.firstMessageMode} onValueChange={(value) => handleCreateFormChange('firstMessageMode', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"assistant-speaks-first\">Assistant Speaks First</SelectItem>\n                            <SelectItem value=\"assistant-waits-for-user\">Assistant Waits for User</SelectItem>\n                            <SelectItem value=\"assistant-speaks-first-with-model-generated-message\">Model Generated First Message</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Max Duration (seconds)</label>\n                        <Input\n                          type=\"number\"\n                          min=\"10\"\n                          max=\"43200\"\n                          value={createForm.maxDurationSeconds}\n                          onChange={(e) => handleCreateFormChange('maxDurationSeconds', parseInt(e.target.value))}\n                          className=\"mt-1\"\n                          placeholder=\"600\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Background Sound</label>\n                        <Select value={createForm.backgroundSound} onValueChange={(value) => handleCreateFormChange('backgroundSound', value)}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"off\">Off</SelectItem>\n                            <SelectItem value=\"office\">Office</SelectItem>\n                            <SelectItem value=\"cafe\">Cafe</SelectItem>\n                            <SelectItem value=\"nature\">Nature</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2 mt-6\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"firstMessageInterruptions\"\n                          checked={createForm.firstMessageInterruptionsEnabled}\n                          onChange={(e) => handleCreateFormChange('firstMessageInterruptionsEnabled', e.target.checked)}\n                          className=\"rounded border-gray-300\"\n                        />\n                        <label htmlFor=\"firstMessageInterruptions\" className=\"text-sm text-gray-700\">\n                          Allow First Message Interruptions\n                        </label>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">End Call Message</label>\n                        <Textarea\n                          value={createForm.endCallMessage}\n                          onChange={(e) => handleCreateFormChange('endCallMessage', e.target.value)}\n                          className=\"mt-1\"\n                          rows={2}\n                          placeholder=\"Thank you for calling. Goodbye!\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Voicemail Message</label>\n                        <Textarea\n                          value={createForm.voicemailMessage}\n                          onChange={(e) => handleCreateFormChange('voicemailMessage', e.target.value)}\n                          className=\"mt-1\"\n                          rows={2}\n                          placeholder=\"Please leave a message after the beep.\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex justify-end gap-3 pt-4 border-t\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsCreateDialogOpen(false)}\n                      disabled={createAssistantMutation.isPending}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={handleCreateSubmit}\n                      disabled={createAssistantMutation.isPending || !createForm.name || !createForm.firstMessage}\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {createAssistantMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Creating...\n                        </>\n                      ) : (\n                        <>\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Create Assistant\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n          \n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search Assistants\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 bg-gray-50 border-gray-200\"\n            />\n          </div>\n        </div>\n\n        {/* Agents List */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\n            </div>\n          ) : (\n            <div className=\"p-2\">\n              {agents.filter((agent: Agent) => agent && agent.id && agent.name).map((agent: Agent) => (\n                <div\n                  key={agent.id}\n                  onClick={() => setSelectedAgent(agent)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all duration-200 mb-2 ${\n                    selectedAgent?.id === agent.id\n                      ? 'bg-green border border-blue-200'\n                      : 'hover:bg-gray-50 border border-transparent'\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <Avatar className=\"h-10 w-10 bg-gray-600\">\n                      <AvatarFallback className=\"text-white bg-green font-medium\">\n                        {getInitials(agent.name)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"font-medium text-gray-900 truncate\">\n                          {agent.name}\n                        </div>\n                        {publishedAgents.has(String(agent.id)) && (\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 text-xs\">\n                            Published\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"text-sm text-gray-500 truncate\">\n                        {agent.assistant_id ?\n                          `${String(agent.assistant_id).substring(0, 12)}...` :\n                          'No Assistant ID'\n                        }\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Right Panel - Agent Details */}\n      <div className=\"flex-1 flex flex-col\">\n        {selectedAgent ? (\n          <>\n            {/* Header */}\n            <div className=\"p-6 border-b border-gray-200 bg-white/80 backdrop-blur-sm\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"h-12 w-12 bg-gradient-to-br from-blue-500 to-purple-600\">\n                    <AvatarFallback className=\"text-white bg-green font-medium text-lg\">\n                      {getInitials(selectedAgent.name)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h1 className=\"text-2xl font-semibold text-gray-900\">\n                      {selectedAgent.name}\n                    </h1>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                        Active\n                      </Badge>\n                      <span className=\"text-sm text-gray-500\">\n                        ID: {String(selectedAgent.id).substring(0, 12)}...\n                      </span>\n                      {updateAssistantMutation.isPending && (\n                        <div className=\"flex items-center text-xs text-blue-600\">\n                          <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                          Auto-saving...\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  {/* <Button variant=\"outline\" size=\"sm\">\n                    Test\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Chat\n                  </Button> */}\n\n                  {/* Talk to Assistant Button */}\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setIsCallDialogOpen(true)}\n                    className=\"bg-gradient-to-r from-teal-500 to-cyan-600 hover:from-teal-600 hover:to-cyan-700 text-white shadow-lg hover:shadow-xl transition-all duration-300\"\n                  >\n                    <Radio className=\"h-4 w-4 mr-2\" />\n                    Talk to Assistant\n                  </Button>\n\n                  <Button\n                    variant={publishedAgents.has(String(selectedAgent.id)) ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handlePublishToggle(selectedAgent)}\n                    className={publishedAgents.has(String(selectedAgent.id))\n                      ? \"bg-green-600 hover:bg-green-700 text-white\"\n                      : \"text-gray-600 hover:text-gray-700 hover:bg-gray-50\"\n                    }\n                  >\n                    {publishedAgents.has(String(selectedAgent.id)) ? \"Published\" : \"Unpublished\"}\n                  </Button>\n\n                  {/* Delete Button */}\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteAgent(selectedAgent)}\n                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"flex-1 p-6 overflow-y-auto\">\n              {isLoadingDetails ? (\n                <div className=\"flex items-center justify-center h-64\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-gray-400\" />\n                </div>\n              ) : (\n                <Tabs defaultValue=\"model\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-11 mb-6\">\n                    <TabsTrigger value=\"model\" className=\"flex items-center gap-2\">\n                      <Brain className=\"h-4 w-4\" />\n                      Model\n                    </TabsTrigger>\n                    <TabsTrigger value=\"voice\" className=\"flex items-center gap-2\">\n                      <Volume2 className=\"h-4 w-4\" />\n                      Voice\n                    </TabsTrigger>\n                    <TabsTrigger value=\"transcriber\" className=\"flex items-center gap-2\">\n                      <Mic className=\"h-4 w-4\" />\n                      Transcriber\n                    </TabsTrigger>\n                    {/* <TabsTrigger value=\"functions\" className=\"flex items-center gap-2\">\n                      <Settings className=\"h-4 w-4\" />\n                      Functions\n                    </TabsTrigger>\n                    <TabsTrigger value=\"variables\" className=\"flex items-center gap-2\">\n                      <Wand2 className=\"h-4 w-4\" />\n                      Variables\n                    </TabsTrigger>\n                    <TabsTrigger value=\"knowledge\" className=\"flex items-center gap-2\">\n                      <Database className=\"h-4 w-4\" />\n                      Knowledge\n                    </TabsTrigger>\n                    <TabsTrigger value=\"workflows\" className=\"flex items-center gap-2\">\n                      <Share2 className=\"h-4 w-4\" />\n                      Workflows\n                    </TabsTrigger>\n                    <TabsTrigger value=\"analysis\" className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"h-4 w-4\" />\n                      Analysis\n                    </TabsTrigger>\n                    <TabsTrigger value=\"advanced\" className=\"flex items-center gap-2\">\n                      <Sliders className=\"h-4 w-4\" />\n                      Advanced\n                    </TabsTrigger>\n                    <TabsTrigger value=\"server\" className=\"flex items-center gap-2\">\n                      <Monitor className=\"h-4 w-4\" />\n                      Server\n                    </TabsTrigger> */}\n                    {/* <TabsTrigger value=\"debug\" className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      Debug\n                    </TabsTrigger> */}\n                  </TabsList>\n\n                  <TabsContent value=\"model\" className=\"space-y-6\">\n                    {/* Basic Model Configuration */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Brain className=\"h-5 w-5 text-blue-600\" />\n                          Model Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                            <Select\n                              value={normalizeProviderValue(selectedAgentDetails?.model?.provider || '', 'model')}\n                              onValueChange={(value) => handleFieldUpdate('model.provider', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue placeholder={selectedAgentDetails?.model?.provider || 'Select provider'} />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {MODEL_PROVIDERS.map((provider) => (\n                                  <SelectItem key={provider.id} value={provider.id}>\n                                    <div className=\"flex items-center gap-2\">\n                                      <span>{provider.name}</span>\n                                      {provider.requiresApiKey && (\n                                        <Badge variant=\"outline\" className=\"text-xs\">API Key</Badge>\n                                      )}\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Model</label>\n                            <Select\n                              value={selectedAgentDetails?.model?.model || ''}\n                              onValueChange={(value) => handleFieldUpdate('model.model', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue placeholder={selectedAgentDetails?.model?.model || 'Select model'} />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {getProviderModels(selectedAgentDetails?.model?.provider || 'openai').map((model) => (\n                                  <SelectItem key={model.id} value={model.id}>\n                                    <div className=\"flex items-center justify-between w-full\">\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"font-medium\">{model.name}</span>\n                                        {model.description && (\n                                          <span className=\"text-xs text-gray-500\">{model.description}</span>\n                                        )}\n                                      </div>\n                                      <div className=\"flex items-center gap-1\">\n                                        {model.supportsTools && (\n                                          <Badge variant=\"outline\" className=\"text-xs\">Tools</Badge>\n                                        )}\n                                        {model.supportsVision && (\n                                          <Badge variant=\"outline\" className=\"text-xs\">Vision</Badge>\n                                        )}\n                                        {model.costTier && (\n                                          <Badge\n                                            variant={model.costTier === 'low' ? 'secondary' : model.costTier === 'medium' ? 'default' : 'destructive'}\n                                            className=\"text-xs\"\n                                          >\n                                            {model.costTier}\n                                          </Badge>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                                {/* Show current value if it's not in the provider's model list */}\n                                {selectedAgentDetails?.model?.model &&\n                                 !getProviderModels(selectedAgentDetails?.model?.provider || 'openai').some(m => m.id === selectedAgentDetails.model.model) && (\n                                  <SelectItem value={selectedAgentDetails.model.model}>\n                                    {selectedAgentDetails.model.model} (Current)\n                                  </SelectItem>\n                                )}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Temperature</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"2\"\n                              step=\"0.1\"\n                              value={selectedAgentDetails?.model?.temperature || 0.7}\n                              onChange={(e) => handleFieldUpdate('model.temperature', parseFloat(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"0.7\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Max Tokens</label>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              max=\"32000\"\n                              value={selectedAgentDetails?.model?.maxTokens || 1000}\n                              onChange={(e) => handleFieldUpdate('model.maxTokens', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"1000\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Fast Turns</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"10\"\n                              value={selectedAgentDetails?.model?.numFastTurns || 0}\n                              onChange={(e) => handleFieldUpdate('model.numFastTurns', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"0\"\n                            />\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Messages Configuration */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <MessageSquare className=\"h-5 w-5 text-green-600\" />\n                          Messages & Prompts\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">First Message</label>\n                          <Textarea\n                            value={selectedAgentDetails?.firstMessage || selectedAgent?.firstMessage || ''}\n                            onChange={(e) => handleFieldUpdate('firstMessage', e.target.value)}\n                            className=\"mt-1\"\n                            rows={3}\n                            placeholder=\"Hello! How can I help you today?\"\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">First Message Mode</label>\n                            <Select\n                              value={selectedAgentDetails?.firstMessageMode || 'assistant-speaks-first'}\n                              onValueChange={(value) => handleFieldUpdate('firstMessageMode', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"assistant-speaks-first\">Assistant Speaks First</SelectItem>\n                                <SelectItem value=\"assistant-waits-for-user\">Assistant Waits for User</SelectItem>\n                                <SelectItem value=\"assistant-speaks-first-with-model-generated-message\">Model Generated First Message</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div className=\"flex items-center space-x-2 mt-6\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"firstMessageInterruptions\"\n                              checked={selectedAgentDetails?.firstMessageInterruptionsEnabled || false}\n                              onChange={(e) => handleFieldUpdate('firstMessageInterruptionsEnabled', e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <label htmlFor=\"firstMessageInterruptions\" className=\"text-sm text-gray-700\">\n                              Allow First Message Interruptions\n                            </label>\n                          </div>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">System Message</label>\n                          <Textarea\n                            value={selectedAgentDetails?.model?.messages?.[0]?.content || selectedAgentDetails?.systemMessage || ''}\n                            onChange={(e) => handleSystemMessageUpdate(e.target.value)}\n                            className=\"mt-1\"\n                            rows={6}\n                            placeholder=\"You are a helpful AI assistant...\"\n                          />\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">End Call Message</label>\n                          <Textarea\n                            value={selectedAgentDetails?.endCallMessage || ''}\n                            onChange={(e) => handleFieldUpdate('endCallMessage', e.target.value)}\n                            className=\"mt-1\"\n                            rows={2}\n                            placeholder=\"Thank you for calling. Goodbye!\"\n                          />\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Voicemail Message</label>\n                          <Textarea\n                            value={selectedAgentDetails?.voicemailMessage || ''}\n                            onChange={(e) => handleFieldUpdate('voicemailMessage', e.target.value)}\n                            className=\"mt-1\"\n                            rows={2}\n                            placeholder=\"Please leave a message after the beep.\"\n                          />\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">End Call Phrases</label>\n                          <Textarea\n                            value={selectedAgentDetails?.endCallPhrases?.join('\\n') || ''}\n                            onChange={(e) => handleFieldUpdate('endCallPhrases', e.target.value.split('\\n').filter(phrase => phrase.trim()))}\n                            className=\"mt-1\"\n                            rows={3}\n                            placeholder=\"goodbye&#10;bye&#10;end call&#10;hang up\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Phrases that will trigger the call to end (one per line, case insensitive)\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n                  <TabsContent value=\"voice\" className=\"space-y-6\">\n                    {/* Basic Voice Configuration */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Volume2 className=\"h-5 w-5 text-green-600\" />\n                          Voice Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                            <Select\n                              value={normalizeProviderValue(selectedAgentDetails?.voice?.provider || '', 'voice')}\n                              onValueChange={(value) => handleFieldUpdate('voice.provider', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue placeholder={selectedAgentDetails?.voice?.provider || 'Select voice provider'} />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {VOICE_PROVIDERS.map((provider) => (\n                                  <SelectItem key={provider.id} value={provider.id}>\n                                    <div className=\"flex items-center gap-2\">\n                                      <span>{provider.name}</span>\n                                      {provider.requiresApiKey && (\n                                        <Badge variant=\"outline\" className=\"text-xs\">API Key</Badge>\n                                      )}\n                                      <div className=\"flex gap-1\">\n                                        {provider.supportsSpeed && (\n                                          <Badge variant=\"secondary\" className=\"text-xs\">Speed</Badge>\n                                        )}\n                                        {provider.supportsStability && (\n                                          <Badge variant=\"secondary\" className=\"text-xs\">Stability</Badge>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Voice</label>\n                            <Select\n                              value={selectedAgentDetails?.voice?.voiceId || ''}\n                              onValueChange={(value) => handleFieldUpdate('voice.voiceId', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue placeholder=\"Select voice...\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {getProviderVoices(selectedAgentDetails?.voice?.provider || '11labs').map((voice) => (\n                                  <SelectItem key={voice.id} value={voice.id}>\n                                    <div className=\"flex items-center justify-between w-full\">\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"font-medium\">{voice.name}</span>\n                                        {voice.description && (\n                                          <span className=\"text-xs text-gray-500\">{voice.description}</span>\n                                        )}\n                                      </div>\n                                      <div className=\"flex items-center gap-1\">\n                                        {voice.gender && (\n                                          <Badge variant=\"outline\" className=\"text-xs\">{voice.gender}</Badge>\n                                        )}\n                                        {voice.accent && (\n                                          <Badge variant=\"secondary\" className=\"text-xs\">{voice.accent}</Badge>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                                {/* Show current value if it's not in the provider's voice list */}\n                                {selectedAgentDetails?.voice?.voiceId &&\n                                 !getProviderVoices(selectedAgentDetails?.voice?.provider || '11labs').some(v => v.id === selectedAgentDetails.voice.voiceId) && (\n                                  <SelectItem value={selectedAgentDetails.voice.voiceId}>\n                                    {selectedAgentDetails.voice.voiceId} (Current)\n                                  </SelectItem>\n                                )}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        {/* Voice Preview and Advanced Settings */}\n                        {/* <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Voice Preview</label>\n                            <div className=\"mt-1 flex gap-2\">\n                              <VapiVoicePreviewButton\n                                voiceProvider={selectedAgentDetails?.voice?.provider || '11labs'}\n                                voiceId={selectedAgentDetails?.voice?.voiceId || ''}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  const voiceInfo = getProviderVoices(selectedAgentDetails?.voice?.provider || '11labs')\n                                    .find(v => v.id === selectedAgentDetails?.voice?.voiceId);\n                                  if (voiceInfo) {\n                                    toast.success(`Voice: ${voiceInfo.name} (${voiceInfo.gender}, ${voiceInfo.accent})`);\n                                  }\n                                }}\n                                className=\"flex items-center gap-2\"\n                              >\n                                <Info className=\"h-3 w-3\" />\n                                Voice Info\n                              </Button>\n                            </div>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Voice Settings</label>\n                            <div className=\"mt-1 text-xs text-gray-500\">\n                              {(() => {\n                                const provider = VOICE_PROVIDERS.find(p => p.id === selectedAgentDetails?.voice?.provider);\n                                const features = [];\n                                if (provider?.supportsSpeed) features.push('Speed Control');\n                                if (provider?.supportsStability) features.push('Stability');\n                                if (provider?.supportsSimilarityBoost) features.push('Similarity Boost');\n                                return features.length > 0 ? `Supports: ${features.join(', ')}` : 'Basic voice settings';\n                              })()}\n                            </div>\n                          </div>\n                        </div> */}\n\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          {/* Speed Control - Show for providers that support it */}\n                          {VOICE_PROVIDERS.find(p => p.id === selectedAgentDetails?.voice?.provider)?.supportsSpeed && (\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">Speed</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0.25\"\n                                max=\"4\"\n                                step=\"0.1\"\n                                value={selectedAgentDetails?.voice?.speed || 1}\n                                onChange={(e) => handleFieldUpdate('voice.speed', parseFloat(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"1.0\"\n                              />\n                              <p className=\"text-xs text-gray-500 mt-1\">0.25x to 4x speed</p>\n                            </div>\n                          )}\n\n                          {/* Stability - Show for ElevenLabs and similar providers */}\n                          {VOICE_PROVIDERS.find(p => p.id === selectedAgentDetails?.voice?.provider)?.supportsStability && (\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">Stability</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"1\"\n                                step=\"0.1\"\n                                value={selectedAgentDetails?.voice?.stability || 0.5}\n                                onChange={(e) => handleFieldUpdate('voice.stability', parseFloat(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"0.5\"\n                              />\n                              <p className=\"text-xs text-gray-500 mt-1\">Higher = more stable</p>\n                            </div>\n                          )}\n\n                          {/* Similarity Boost - Show for ElevenLabs */}\n                          {VOICE_PROVIDERS.find(p => p.id === selectedAgentDetails?.voice?.provider)?.supportsSimilarityBoost && (\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">Similarity Boost</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"1\"\n                                step=\"0.1\"\n                                value={selectedAgentDetails?.voice?.similarityBoost || 0.5}\n                                onChange={(e) => handleFieldUpdate('voice.similarityBoost', parseFloat(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"0.5\"\n                              />\n                              <p className=\"text-xs text-gray-500 mt-1\">Higher = more similar to original</p>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Voice Cloning and Custom Settings */}\n                        {/* <div className=\"space-y-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className=\"text-sm font-medium text-gray-700\">Advanced Voice Settings</h4>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {VOICE_PROVIDERS.find(p => p.id === selectedAgentDetails?.voice?.provider)?.name || 'Unknown Provider'}\n                            </Badge>\n                          </div>\n\n                         \n                          {selectedAgentDetails?.voice?.provider === '11labs' && (\n                            <div className=\"p-4 border rounded-lg bg-blue-50\">\n                              <h5 className=\"text-sm font-medium text-blue-900 mb-2\">Voice Cloning</h5>\n                              <p className=\"text-xs text-blue-700 mb-3\">\n                                Upload audio samples to create a custom voice clone (requires ElevenLabs Pro plan)\n                              </p>\n                              <div className=\"flex gap-2\">\n                                <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"text-blue-700 border-blue-300\">\n                                  <Upload className=\"h-3 w-3 mr-1\" />\n                                  Upload Samples\n                                </Button>\n                                <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"text-blue-700 border-blue-300\">\n                                  <ExternalLink className=\"h-3 w-3 mr-1\" />\n                                  Manage Voices\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n                        </div> */}\n{/* Enable Voice Caching */}\n                        {/* <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"cachingEnabled\"\n                            checked={selectedAgentDetails?.voice?.cachingEnabled || false}\n                            onChange={(e) => handleFieldUpdate('voice.cachingEnabled', e.target.checked)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <label htmlFor=\"cachingEnabled\" className=\"text-sm text-gray-700\">\n                            Enable Voice Caching\n                          </label>\n                        </div> */}\n                      </CardContent>\n                    </Card>\n\n                    {/* Chunk Plan Configuration */}\n                    {/* <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Settings className=\"h-5 w-5 text-purple-600\" />\n                          Chunk Plan\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"chunkPlanEnabled\"\n                            checked={selectedAgentDetails?.voice?.chunkPlan?.enabled || false}\n                            onChange={(e) => handleFieldUpdate('voice.chunkPlan.enabled', e.target.checked)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <label htmlFor=\"chunkPlanEnabled\" className=\"text-sm text-gray-700\">\n                            Enable Chunk Plan\n                          </label>\n                        </div>\n\n                        {selectedAgentDetails?.voice?.chunkPlan?.enabled && (\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">Min Characters</label>\n                              <Input\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"1000\"\n                                value={selectedAgentDetails?.voice?.chunkPlan?.minCharacters || 30}\n                                onChange={(e) => handleFieldUpdate('voice.chunkPlan.minCharacters', parseInt(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"30\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">Punctuation Boundaries</label>\n                              <Input\n                                value={selectedAgentDetails?.voice?.chunkPlan?.punctuationBoundaries || ''}\n                                onChange={(e) => handleFieldUpdate('voice.chunkPlan.punctuationBoundaries', e.target.value)}\n                                className=\"mt-1\"\n                                placeholder=\".,!?;:\"\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card> */}\n\n                    {/* Format Plan Configuration */}\n                    {/* <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <MessageSquare className=\"h-5 w-5 text-orange-600\" />\n                          Format Plan\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"formatPlanEnabled\"\n                            checked={selectedAgentDetails?.voice?.chunkPlan?.formatPlan?.enabled || false}\n                            onChange={(e) => handleFieldUpdate('voice.chunkPlan.formatPlan.enabled', e.target.checked)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <label htmlFor=\"formatPlanEnabled\" className=\"text-sm text-gray-700\">\n                            Enable Format Plan\n                          </label>\n                        </div>\n\n                        {selectedAgentDetails?.voice?.chunkPlan?.formatPlan?.enabled && (\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">Number to Digits Cutoff</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"10000\"\n                                value={selectedAgentDetails?.voice?.chunkPlan?.formatPlan?.numberToDigitsCutoff || 2025}\n                                onChange={(e) => handleFieldUpdate('voice.chunkPlan.formatPlan.numberToDigitsCutoff', parseInt(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"2025\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"text-sm font-medium text-gray-700\">Formatters Enabled</label>\n                              <Select\n                                value={selectedAgentDetails?.voice?.chunkPlan?.formatPlan?.formattersEnabled || 'markdown'}\n                                onValueChange={(value) => handleFieldUpdate('voice.chunkPlan.formatPlan.formattersEnabled', value)}\n                              >\n                                <SelectTrigger className=\"mt-1\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"markdown\">Markdown</SelectItem>\n                                  <SelectItem value=\"none\">None</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card> */}\n                  </TabsContent>\n\n                  {/* Add other tab contents as needed */}\n                  <TabsContent value=\"transcriber\" className=\"space-y-6\">\n                    {/* Basic Transcriber Configuration */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Mic className=\"h-5 w-5 text-purple-600\" />\n                          Transcriber Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                            <Select\n                              value={selectedAgentDetails?.transcriber?.provider || 'deepgram'}\n                              onValueChange={(value) => handleFieldUpdate('transcriber.provider', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {TRANSCRIBER_PROVIDERS.map((provider) => (\n                                  <SelectItem key={provider.id} value={provider.id}>\n                                    <div className=\"flex items-center gap-2\">\n                                      <span>{provider.name}</span>\n                                      {provider.requiresApiKey && (\n                                        <Badge variant=\"outline\" className=\"text-xs\">API Key</Badge>\n                                      )}\n                                      {provider.supportsLanguages && (\n                                        <Badge variant=\"secondary\" className=\"text-xs\">\n                                          {provider.supportsLanguages.length} Languages\n                                        </Badge>\n                                      )}\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Language</label>\n                            <Select\n                              value={selectedAgentDetails?.transcriber?.language || 'en'}\n                              onValueChange={(value) => handleFieldUpdate('transcriber.language', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"en\">English</SelectItem>\n                                <SelectItem value=\"es\">Spanish</SelectItem>\n                                <SelectItem value=\"fr\">French</SelectItem>\n                                <SelectItem value=\"de\">German</SelectItem>\n                                <SelectItem value=\"it\">Italian</SelectItem>\n                                <SelectItem value=\"pt\">Portuguese</SelectItem>\n                                <SelectItem value=\"zh\">Chinese</SelectItem>\n                                <SelectItem value=\"ja\">Japanese</SelectItem>\n                                <SelectItem value=\"ko\">Korean</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Model</label>\n                            <Select\n                              value={selectedAgentDetails?.transcriber?.model || 'nova-2'}\n                              onValueChange={(value) => handleFieldUpdate('transcriber.model', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {getTranscriberModels(selectedAgentDetails?.transcriber?.provider || 'deepgram').map((model) => (\n                                  <SelectItem key={model.id} value={model.id}>\n                                    <div className=\"flex items-center justify-between w-full\">\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"font-medium\">{model.name}</span>\n                                        {model.description && (\n                                          <span className=\"text-xs text-gray-500\">{model.description}</span>\n                                        )}\n                                      </div>\n                                      <div className=\"flex items-center gap-1\">\n                                        {model.accuracy && (\n                                          <Badge\n                                            variant={model.accuracy === 'premium' ? 'default' : model.accuracy === 'enhanced' ? 'secondary' : 'outline'}\n                                            className=\"text-xs\"\n                                          >\n                                            {model.accuracy}\n                                          </Badge>\n                                        )}\n                                        {model.latency && (\n                                          <Badge variant=\"outline\" className=\"text-xs\">{model.latency} latency</Badge>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Keywords</label>\n                            <Input\n                              value={selectedAgentDetails?.transcriber?.keywords?.join(', ') || ''}\n                              onChange={(e) => handleFieldUpdate('transcriber.keywords', e.target.value.split(',').map(k => k.trim()).filter(k => k))}\n                              className=\"mt-1\"\n                              placeholder=\"Enter keywords separated by commas...\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Confidence Threshold</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"1\"\n                              step=\"0.1\"\n                              value={selectedAgentDetails?.transcriber?.confidenceThreshold || 0.4}\n                              onChange={(e) => handleFieldUpdate('transcriber.confidenceThreshold', parseFloat(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"0.4\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">End of Turn Confidence</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"1\"\n                              step=\"0.1\"\n                              value={selectedAgentDetails?.transcriber?.endOfTurnConfidenceThreshold || 0.7}\n                              onChange={(e) => handleFieldUpdate('transcriber.endOfTurnConfidenceThreshold', parseFloat(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"0.7\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Min End Silence (ms)</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"5000\"\n                              value={selectedAgentDetails?.transcriber?.minEndOfTurnSilenceWhenConfident || 160}\n                              onChange={(e) => handleFieldUpdate('transcriber.minEndOfTurnSilenceWhenConfident', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"160\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Max Turn Silence (ms)</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"10000\"\n                              value={selectedAgentDetails?.transcriber?.maxTurnSilence || 400}\n                              onChange={(e) => handleFieldUpdate('transcriber.maxTurnSilence', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"400\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Word Finalization Wait (ms)</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"5000\"\n                              value={selectedAgentDetails?.transcriber?.wordFinalizationMaxWaitTime || 160}\n                              onChange={(e) => handleFieldUpdate('transcriber.wordFinalizationMaxWaitTime', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"160\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"enableUniversalStreamingApi\"\n                              checked={selectedAgentDetails?.transcriber?.enableUniversalStreamingApi || false}\n                              onChange={(e) => handleFieldUpdate('transcriber.enableUniversalStreamingApi', e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <label htmlFor=\"enableUniversalStreamingApi\" className=\"text-sm text-gray-700\">\n                              Enable Universal Streaming API\n                            </label>\n                          </div>\n\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"formatTurns\"\n                              checked={selectedAgentDetails?.transcriber?.formatTurns || false}\n                              onChange={(e) => handleFieldUpdate('transcriber.formatTurns', e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <label htmlFor=\"formatTurns\" className=\"text-sm text-gray-700\">\n                              Format Turns\n                            </label>\n                          </div>\n\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"disablePartialTranscripts\"\n                              checked={selectedAgentDetails?.transcriber?.disablePartialTranscripts || false}\n                              onChange={(e) => handleFieldUpdate('transcriber.disablePartialTranscripts', e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <label htmlFor=\"disablePartialTranscripts\" className=\"text-sm text-gray-700\">\n                              Disable Partial Transcripts\n                            </label>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Word Boost Configuration */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Settings className=\"h-5 w-5 text-indigo-600\" />\n                          Word Boost & Keywords\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Word Boost</label>\n                          <Textarea\n                            value={selectedAgentDetails?.transcriber?.wordBoost?.join('\\n') || ''}\n                            onChange={(e) => handleFieldUpdate('transcriber.wordBoost', e.target.value.split('\\n').filter(word => word.trim()))}\n                            className=\"mt-1\"\n                            rows={4}\n                            placeholder=\"Enter words to boost (one per line)...\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Words that should be recognized more accurately. One word per line.\n                          </p>\n                        </div>\n\n                        {selectedAgentDetails?.transcriber?.wordBoost && selectedAgentDetails.transcriber.wordBoost.length > 0 && (\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Current Word Boost</label>\n                            <div className=\"mt-1 p-3 bg-gray-50 rounded-lg\">\n                              {selectedAgentDetails.transcriber.wordBoost.map((word: string, index: number) => (\n                                <Badge key={index} variant=\"outline\" className=\"mr-2 mb-2\">\n                                  {word}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n                  {/* <TabsContent value=\"functions\" className=\"space-y-6\">\n                   \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Settings className=\"h-5 w-5 text-orange-600\" />\n                          Model Tools & Functions\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        \n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Tool IDs</label>\n                          <Textarea\n                            value={selectedAgentDetails?.model?.toolIds?.join('\\n') || ''}\n                            onChange={(e) => handleFieldUpdate('model.toolIds', e.target.value.split('\\n').filter(id => id.trim()))}\n                            className=\"mt-1\"\n                            rows={3}\n                            placeholder=\"Enter tool IDs (one per line)...\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            IDs of tools that this assistant can use. One ID per line.\n                          </p>\n                        </div>\n\n                        \n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Knowledge Base ID</label>\n                          <Input\n                            value={selectedAgentDetails?.model?.knowledgeBaseId || ''}\n                            onChange={(e) => handleFieldUpdate('model.knowledgeBaseId', e.target.value)}\n                            className=\"mt-1\"\n                            placeholder=\"Enter knowledge base ID...\"\n                          />\n                        </div>\n\n                        \n                        {selectedAgentDetails?.model?.tools && selectedAgentDetails.model.tools.length > 0 ? (\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700 mb-3 block\">Model Tools</label>\n                            <div className=\"space-y-3\">\n                              {selectedAgentDetails.model.tools.map((tool: any, index: number) => (\n                                <div key={index} className=\"p-4 bg-gray-50 rounded-lg border\">\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <h4 className=\"font-medium text-gray-900\">{tool.name || `Tool ${index + 1}`}</h4>\n                                    <Badge variant=\"secondary\">{tool.type || 'Tool'}</Badge>\n                                  </div>\n                                  {tool.description && (\n                                    <p className=\"text-sm text-gray-600 mb-2\">{tool.description}</p>\n                                  )}\n                                  {tool.url && (\n                                    <p className=\"text-xs text-gray-500 mb-2\">\n                                      <strong>URL:</strong> {tool.url}\n                                    </p>\n                                  )}\n                                  {tool.method && (\n                                    <p className=\"text-xs text-gray-500 mb-2\">\n                                      <strong>Method:</strong> {tool.method}\n                                    </p>\n                                  )}\n                                  {tool.timeoutSeconds && (\n                                    <p className=\"text-xs text-gray-500\">\n                                      <strong>Timeout:</strong> {tool.timeoutSeconds}s\n                                    </p>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"text-center py-8\">\n                            <Settings className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                            <p className=\"text-gray-500\">No model tools configured</p>\n                            <p className=\"text-xs text-gray-400 mt-1\">Tools are configured separately and referenced by ID</p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n\n                   \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Brain className=\"h-5 w-5 text-pink-600\" />\n                          Advanced Model Features\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"emotionRecognitionEnabled\"\n                            checked={selectedAgentDetails?.model?.emotionRecognitionEnabled || false}\n                            onChange={(e) => handleFieldUpdate('model.emotionRecognitionEnabled', e.target.checked)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <label htmlFor=\"emotionRecognitionEnabled\" className=\"text-sm text-gray-700\">\n                            Enable Emotion Recognition\n                          </label>\n                        </div>\n\n                        \n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Thinking Mode</label>\n                          <Select\n                            value={selectedAgentDetails?.model?.thinking?.type || 'disabled'}\n                            onValueChange={(value) => handleFieldUpdate('model.thinking.type', value)}\n                          >\n                            <SelectTrigger className=\"mt-1\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"disabled\">Disabled</SelectItem>\n                              <SelectItem value=\"enabled\">Enabled</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        {selectedAgentDetails?.model?.thinking?.type === 'enabled' && (\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Thinking Budget Tokens</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"10000\"\n                              value={selectedAgentDetails?.model?.thinking?.budgetTokens || 1000}\n                              onChange={(e) => handleFieldUpdate('model.thinking.budgetTokens', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"1000\"\n                            />\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Globe className=\"h-5 w-5 text-green-600\" />\n                          Multilingual Support\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Primary Language</label>\n                            <Select\n                              value={selectedAgentDetails?.language || 'en'}\n                              onValueChange={(value) => handleFieldUpdate('language', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"en\">English</SelectItem>\n                                <SelectItem value=\"es\">Spanish</SelectItem>\n                                <SelectItem value=\"fr\">French</SelectItem>\n                                <SelectItem value=\"de\">German</SelectItem>\n                                <SelectItem value=\"it\">Italian</SelectItem>\n                                <SelectItem value=\"pt\">Portuguese</SelectItem>\n                                <SelectItem value=\"zh\">Chinese</SelectItem>\n                                <SelectItem value=\"ja\">Japanese</SelectItem>\n                                <SelectItem value=\"ko\">Korean</SelectItem>\n                                <SelectItem value=\"ar\">Arabic</SelectItem>\n                                <SelectItem value=\"hi\">Hindi</SelectItem>\n                                <SelectItem value=\"ru\">Russian</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Language Detection</label>\n                            <Select\n                              value={selectedAgentDetails?.languageDetection || 'auto'}\n                              onValueChange={(value) => handleFieldUpdate('languageDetection', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"auto\">Auto-detect</SelectItem>\n                                <SelectItem value=\"manual\">Manual</SelectItem>\n                                <SelectItem value=\"disabled\">Disabled</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Supported Languages</label>\n                          <Textarea\n                            value={selectedAgentDetails?.supportedLanguages?.join(', ') || ''}\n                            onChange={(e) => handleFieldUpdate('supportedLanguages', e.target.value.split(',').map(lang => lang.trim()).filter(lang => lang))}\n                            className=\"mt-1\"\n                            rows={2}\n                            placeholder=\"en, es, fr, de, it...\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Comma-separated list of language codes the assistant can handle\n                          </p>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"autoTranslate\"\n                            checked={selectedAgentDetails?.autoTranslate || false}\n                            onChange={(e) => handleFieldUpdate('autoTranslate', e.target.checked)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <label htmlFor=\"autoTranslate\" className=\"text-sm text-gray-700\">\n                            Enable automatic translation for unsupported languages\n                          </label>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Wand2 className=\"h-5 w-5 text-indigo-600\" />\n                          Custom Tools\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Custom Functions</label>\n                          <Textarea\n                            value={selectedAgentDetails?.customFunctions ? JSON.stringify(selectedAgentDetails.customFunctions, null, 2) : ''}\n                            onChange={(e) => {\n                              try {\n                                const functions = JSON.parse(e.target.value);\n                                handleFieldUpdate('customFunctions', functions);\n                              } catch (error) {\n                                // Invalid JSON, don't update\n                              }\n                            }}\n                            className=\"mt-1 font-mono text-sm\"\n                            rows={8}\n                            placeholder={`[\n  {\n    \"name\": \"get_weather\",\n    \"description\": \"Get current weather for a location\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\": \"string\",\n          \"description\": \"City name\"\n        }\n      },\n      \"required\": [\"location\"]\n    },\n    \"server\": {\n      \"url\": \"https://api.weather.com/webhook\",\n      \"secret\": \"your-webhook-secret\"\n    }\n  }\n]`}\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Define custom functions in JSON format for external API integrations\n                          </p>\n                        </div>\n\n                        <div className=\"p-4 bg-indigo-50 rounded-lg border border-indigo-200\">\n                          <h4 className=\"text-sm font-medium text-indigo-900 mb-2\">Popular Tool Integrations</h4>\n                          <div className=\"grid grid-cols-2 gap-2 text-xs text-indigo-700\">\n                            <div>• Google Calendar</div>\n                            <div>• Google Sheets</div>\n                            <div>• Slack</div>\n                            <div>• GoHighLevel</div>\n                            <div>• Zapier</div>\n                            <div>• Make.com</div>\n                            <div>• Custom Webhooks</div>\n                            <div>• Database Queries</div>\n                          </div>\n                          <div className=\"mt-3\">\n                            <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"text-indigo-700 border-indigo-300\">\n                              <ExternalLink className=\"h-3 w-3 mr-1\" />\n                              Tool Documentation\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent> */}\n\n                  {/* <TabsContent value=\"variables\" className=\"space-y-6\">\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Wand2 className=\"h-5 w-5 text-purple-600\" />\n                          Dynamic Variables\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"p-4 bg-purple-50 rounded-lg border border-purple-200\">\n                          <h4 className=\"text-sm font-medium text-purple-900 mb-2\">Available Default Variables</h4>\n                          <div className=\"grid grid-cols-2 gap-2 text-xs text-purple-700\">\n                            <div><code>{'{{now}}'}</code> - Current date and time</div>\n                            <div><code>{'{{date}}'}</code> - Current date</div>\n                            <div><code>{'{{time}}'}</code> - Current time</div>\n                            <div><code>{'{{month}}'}</code> - Current month</div>\n                            <div><code>{'{{day}}'}</code> - Current day</div>\n                            <div><code>{'{{year}}'}</code> - Current year</div>\n                            <div><code>{'{{customer.number}}'}</code> - Customer phone</div>\n                            <div><code>{'{{customer.name}}'}</code> - Customer name</div>\n                          </div>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Custom Variables</label>\n                          <Textarea\n                            value={selectedAgentDetails?.variableValues ? JSON.stringify(selectedAgentDetails.variableValues, null, 2) : ''}\n                            onChange={(e) => {\n                              try {\n                                const variables = JSON.parse(e.target.value);\n                                handleFieldUpdate('variableValues', variables);\n                              } catch (error) {\n                                // Invalid JSON, don't update\n                              }\n                            }}\n                            className=\"mt-1 font-mono text-sm\"\n                            rows={8}\n                            placeholder={`{\n  \"customerName\": \"John Doe\",\n  \"companyName\": \"Acme Corp\",\n  \"productName\": \"Premium Plan\",\n  \"supportEmail\": \"support@company.com\"\n}`}\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Define custom variables in JSON format. Use {'{{variableName}}'} in your prompts.\n                          </p>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Variable Usage Examples</label>\n                          <div className=\"mt-1 p-3 bg-gray-50 rounded-lg text-sm\">\n                            <div className=\"space-y-2\">\n                              <div><strong>System Message:</strong> \"Hello {'{{customerName}}'}, welcome to {'{{companyName}}'}!\"</div>\n                              <div><strong>First Message:</strong> \"Hi there! It's {'{{time}}'} and I'm here to help with {'{{productName}}'}.\"</div>\n                              <div><strong>Date Formatting:</strong> {'{{\\\"now\\\" | date: \\\"%A, %B %d, %Y\\\", \\\"America/New_York\\\"}}'}</div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent> */}\n\n                  {/* <TabsContent value=\"knowledge\" className=\"space-y-6\">\n                   \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Database className=\"h-5 w-5 text-blue-600\" />\n                          Knowledge Base\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Knowledge Base ID</label>\n                          <Input\n                            value={selectedAgentDetails?.model?.knowledgeBaseId || ''}\n                            onChange={(e) => handleFieldUpdate('model.knowledgeBaseId', e.target.value)}\n                            className=\"mt-1\"\n                            placeholder=\"Enter knowledge base ID...\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Connect your assistant to a VAPI knowledge base for enhanced responses\n                          </p>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">File IDs</label>\n                          <Textarea\n                            value={selectedAgentDetails?.fileIds?.join('\\n') || ''}\n                            onChange={(e) => handleFieldUpdate('fileIds', e.target.value.split('\\n').filter(id => id.trim()))}\n                            className=\"mt-1\"\n                            rows={4}\n                            placeholder=\"Enter file IDs (one per line)...\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Upload files to VAPI dashboard and reference them here\n                          </p>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Query Tool Provider</label>\n                            <Select\n                              value={selectedAgentDetails?.queryTool?.provider || 'google'}\n                              onValueChange={(value) => handleFieldUpdate('queryTool.provider', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"google\">Google (Gemini)</SelectItem>\n                                <SelectItem value=\"openai\">OpenAI</SelectItem>\n                                <SelectItem value=\"anthropic\">Anthropic</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Max Results</label>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              max=\"20\"\n                              value={selectedAgentDetails?.queryTool?.maxResults || 5}\n                              onChange={(e) => handleFieldUpdate('queryTool.maxResults', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"5\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                          <h4 className=\"text-sm font-medium text-blue-900 mb-2\">Knowledge Base Setup</h4>\n                          <div className=\"text-xs text-blue-700 space-y-1\">\n                            <div>1. Upload files (.txt, .pdf, .docx) to VAPI dashboard</div>\n                            <div>2. Copy file IDs and paste them above</div>\n                            <div>3. Configure query tool settings</div>\n                            <div>4. Test with knowledge-based questions</div>\n                          </div>\n                          <div className=\"mt-3 flex gap-2\">\n                            <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"text-blue-700 border-blue-300\">\n                              <ExternalLink className=\"h-3 w-3 mr-1\" />\n                              VAPI Dashboard\n                            </Button>\n                            <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"text-blue-700 border-blue-300\">\n                              <FileText className=\"h-3 w-3 mr-1\" />\n                              Documentation\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent> */}\n\n                  {/* <TabsContent value=\"workflows\" className=\"space-y-6\">\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Share2 className=\"h-5 w-5 text-teal-600\" />\n                          VAPI Workflows\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Workflow ID</label>\n                          <Input\n                            value={selectedAgentDetails?.workflowId || ''}\n                            onChange={(e) => handleFieldUpdate('workflowId', e.target.value)}\n                            className=\"mt-1\"\n                            placeholder=\"Enter VAPI workflow ID...\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Connect this assistant to a VAPI workflow for complex conversation flows\n                          </p>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Workflow Trigger</label>\n                            <Select\n                              value={selectedAgentDetails?.workflowTrigger || 'manual'}\n                              onValueChange={(value) => handleFieldUpdate('workflowTrigger', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"manual\">Manual</SelectItem>\n                                <SelectItem value=\"auto\">Automatic</SelectItem>\n                                <SelectItem value=\"keyword\">Keyword-based</SelectItem>\n                                <SelectItem value=\"intent\">Intent-based</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Workflow Priority</label>\n                            <Select\n                              value={selectedAgentDetails?.workflowPriority || 'normal'}\n                              onValueChange={(value) => handleFieldUpdate('workflowPriority', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"low\">Low</SelectItem>\n                                <SelectItem value=\"normal\">Normal</SelectItem>\n                                <SelectItem value=\"high\">High</SelectItem>\n                                <SelectItem value=\"critical\">Critical</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        {selectedAgentDetails?.workflowTrigger === 'keyword' && (\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Trigger Keywords</label>\n                            <Textarea\n                              value={selectedAgentDetails?.workflowKeywords?.join(', ') || ''}\n                              onChange={(e) => handleFieldUpdate('workflowKeywords', e.target.value.split(',').map(k => k.trim()).filter(k => k))}\n                              className=\"mt-1\"\n                              rows={2}\n                              placeholder=\"transfer, escalate, manager, supervisor...\"\n                            />\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              Keywords that will trigger the workflow execution\n                            </p>\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"workflowEnabled\"\n                            checked={selectedAgentDetails?.workflowEnabled || false}\n                            onChange={(e) => handleFieldUpdate('workflowEnabled', e.target.checked)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <label htmlFor=\"workflowEnabled\" className=\"text-sm text-gray-700\">\n                            Enable workflow integration for this assistant\n                          </label>\n                        </div>\n\n                        <div className=\"p-4 bg-teal-50 rounded-lg border border-teal-200\">\n                          <h4 className=\"text-sm font-medium text-teal-900 mb-2\">Workflow Features</h4>\n                          <div className=\"text-xs text-teal-700 space-y-1\">\n                            <div>• Multi-step conversation flows</div>\n                            <div>• Conditional branching logic</div>\n                            <div>• External API integrations</div>\n                            <div>• Data collection and validation</div>\n                            <div>• Call transfer and escalation</div>\n                            <div>• Custom business logic</div>\n                          </div>\n                          <div className=\"mt-3 flex gap-2\">\n                            <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"text-teal-700 border-teal-300\">\n                              <ExternalLink className=\"h-3 w-3 mr-1\" />\n                              Workflow Builder\n                            </Button>\n                            <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"text-teal-700 border-teal-300\">\n                              <FileText className=\"h-3 w-3 mr-1\" />\n                              Documentation\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Users className=\"h-5 w-5 text-orange-600\" />\n                          Squad Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Squad Members</label>\n                          <Textarea\n                            value={selectedAgentDetails?.squadMembers ? JSON.stringify(selectedAgentDetails.squadMembers, null, 2) : ''}\n                            onChange={(e) => {\n                              try {\n                                const members = JSON.parse(e.target.value);\n                                handleFieldUpdate('squadMembers', members);\n                              } catch (error) {\n                                // Invalid JSON, don't update\n                              }\n                            }}\n                            className=\"mt-1 font-mono text-sm\"\n                            rows={6}\n                            placeholder={`[\n  {\n    \"assistantId\": \"assistant-id-1\",\n    \"name\": \"Technical Support\",\n    \"transferConditions\": [\"technical\", \"bug\", \"error\"]\n  },\n  {\n    \"assistantId\": \"assistant-id-2\",\n    \"name\": \"Sales Team\",\n    \"transferConditions\": [\"pricing\", \"purchase\", \"upgrade\"]\n  }\n]`}\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Define squad members for call transfers and escalations\n                          </p>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Transfer Timeout</label>\n                            <Input\n                              type=\"number\"\n                              min=\"5\"\n                              max=\"300\"\n                              value={selectedAgentDetails?.transferTimeout || 30}\n                              onChange={(e) => handleFieldUpdate('transferTimeout', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"30\"\n                            />\n                            <p className=\"text-xs text-gray-500 mt-1\">Seconds to wait for transfer</p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Max Transfers</label>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              max=\"10\"\n                              value={selectedAgentDetails?.maxTransfers || 3}\n                              onChange={(e) => handleFieldUpdate('maxTransfers', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"3\"\n                            />\n                            <p className=\"text-xs text-gray-500 mt-1\">Maximum transfers per call</p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"squadEnabled\"\n                            checked={selectedAgentDetails?.squadEnabled || false}\n                            onChange={(e) => handleFieldUpdate('squadEnabled', e.target.checked)}\n                            className=\"rounded border-gray-300\"\n                          />\n                          <label htmlFor=\"squadEnabled\" className=\"text-sm text-gray-700\">\n                            Enable squad functionality for this assistant\n                          </label>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent> */}\n\n                  {/* <TabsContent value=\"analysis\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Analysis & Metrics</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-gray-600\">Analysis and metrics will be displayed here.</p>\n                      </CardContent>\n                    </Card>\n                  </TabsContent> */}\n\n                  <TabsContent value=\"advanced\" className=\"space-y-6\">\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Sliders className=\"h-5 w-5 text-indigo-600\" />\n                          Call Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Max Duration (seconds)</label>\n                            <Input\n                              type=\"number\"\n                              min=\"10\"\n                              max=\"43200\"\n                              value={selectedAgentDetails?.maxDurationSeconds || 600}\n                              onChange={(e) => handleFieldUpdate('maxDurationSeconds', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"600\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Background Sound</label>\n                            <Select\n                              value={selectedAgentDetails?.backgroundSound || 'off'}\n                              onValueChange={(value) => handleFieldUpdate('backgroundSound', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"off\">Off</SelectItem>\n                                <SelectItem value=\"office\">Office</SelectItem>\n                                <SelectItem value=\"cafe\">Cafe</SelectItem>\n                                <SelectItem value=\"nature\">Nature</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"modelOutputInMessagesEnabled\"\n                              checked={selectedAgentDetails?.modelOutputInMessagesEnabled || false}\n                              onChange={(e) => handleFieldUpdate('modelOutputInMessagesEnabled', e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <label htmlFor=\"modelOutputInMessagesEnabled\" className=\"text-sm text-gray-700\">\n                              Model Output in Messages\n                            </label>\n                          </div>\n\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"backgroundDenoisingEnabled\"\n                              checked={selectedAgentDetails?.backgroundDenoisingEnabled || false}\n                              onChange={(e) => handleFieldUpdate('backgroundDenoisingEnabled', e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <label htmlFor=\"backgroundDenoisingEnabled\" className=\"text-sm text-gray-700\">\n                              Background Denoising (Deprecated)\n                            </label>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Mic className=\"h-5 w-5 text-purple-600\" />\n                          Speech & Interruption Settings\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {/* Start Speaking Plan */}\n                        <div>\n                          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Start Speaking Plan</h4>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <label className=\"text-xs text-gray-600\">Wait Seconds</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"5\"\n                                step=\"0.1\"\n                                value={selectedAgentDetails?.startSpeakingPlan?.waitSeconds || 0.4}\n                                onChange={(e) => handleFieldUpdate('startSpeakingPlan.waitSeconds', parseFloat(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"0.4\"\n                              />\n                            </div>\n                            <div className=\"flex items-center space-x-2 mt-4\">\n                              <input\n                                type=\"checkbox\"\n                                id=\"smartEndpointingEnabled\"\n                                checked={selectedAgentDetails?.startSpeakingPlan?.smartEndpointingEnabled || false}\n                                onChange={(e) => handleFieldUpdate('startSpeakingPlan.smartEndpointingEnabled', e.target.checked)}\n                                className=\"rounded border-gray-300\"\n                              />\n                              <label htmlFor=\"smartEndpointingEnabled\" className=\"text-xs text-gray-700\">\n                                Smart Endpointing\n                              </label>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Stop Speaking Plan */}\n                        <div>\n                          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Stop Speaking Plan</h4>\n                          <div className=\"grid grid-cols-3 gap-4\">\n                            <div>\n                              <label className=\"text-xs text-gray-600\">Num Words</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"10\"\n                                value={selectedAgentDetails?.stopSpeakingPlan?.numWords || 0}\n                                onChange={(e) => handleFieldUpdate('stopSpeakingPlan.numWords', parseInt(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"0\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"text-xs text-gray-600\">Voice Seconds</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"2\"\n                                step=\"0.1\"\n                                value={selectedAgentDetails?.stopSpeakingPlan?.voiceSeconds || 0.2}\n                                onChange={(e) => handleFieldUpdate('stopSpeakingPlan.voiceSeconds', parseFloat(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"0.2\"\n                              />\n                            </div>\n                            <div>\n                              <label className=\"text-xs text-gray-600\">Backoff Seconds</label>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max=\"5\"\n                                step=\"0.1\"\n                                value={selectedAgentDetails?.stopSpeakingPlan?.backoffSeconds || 1}\n                                onChange={(e) => handleFieldUpdate('stopSpeakingPlan.backoffSeconds', parseFloat(e.target.value))}\n                                className=\"mt-1\"\n                                placeholder=\"1\"\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Message Configuration */}\n                    {/* <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <MessageSquare className=\"h-5 w-5 text-blue-600\" />\n                          Message Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Client Messages</label>\n                            <Select\n                              value={selectedAgentDetails?.clientMessages || 'conversation-update'}\n                              onValueChange={(value) => handleFieldUpdate('clientMessages', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"conversation-update\">Conversation Update</SelectItem>\n                                <SelectItem value=\"function-call\">Function Call</SelectItem>\n                                <SelectItem value=\"hang\">Hang</SelectItem>\n                                <SelectItem value=\"speech-update\">Speech Update</SelectItem>\n                                <SelectItem value=\"status-update\">Status Update</SelectItem>\n                                <SelectItem value=\"transcript\">Transcript</SelectItem>\n                                <SelectItem value=\"tool-calls\">Tool Calls</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Server Messages</label>\n                            <Select\n                              value={selectedAgentDetails?.serverMessages || 'conversation-update'}\n                              onValueChange={(value) => handleFieldUpdate('serverMessages', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"conversation-update\">Conversation Update</SelectItem>\n                                <SelectItem value=\"end-of-call-report\">End of Call Report</SelectItem>\n                                <SelectItem value=\"function-call\">Function Call</SelectItem>\n                                <SelectItem value=\"hang\">Hang</SelectItem>\n                                <SelectItem value=\"speech-update\">Speech Update</SelectItem>\n                                <SelectItem value=\"status-update\">Status Update</SelectItem>\n                                <SelectItem value=\"tool-calls\">Tool Calls</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card> */}\n\n                    {/* Transport Configuration */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Phone className=\"h-5 w-5 text-blue-600\" />\n                          Transport Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                            <Select\n                              value={selectedAgentDetails?.transportConfigurations?.[0]?.provider || 'twilio'}\n                              onValueChange={(value) => handleFieldUpdate('transportConfigurations.0.provider', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"twilio\">Twilio</SelectItem>\n                                <SelectItem value=\"vonage\">Vonage</SelectItem>\n                                <SelectItem value=\"vapi\">VAPI</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Timeout (seconds)</label>\n                            <Input\n                              type=\"number\"\n                              min=\"10\"\n                              max=\"300\"\n                              value={selectedAgentDetails?.transportConfigurations?.[0]?.timeout || 60}\n                              onChange={(e) => handleFieldUpdate('transportConfigurations.0.timeout', parseInt(e.target.value))}\n                              className=\"mt-1\"\n                              placeholder=\"60\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"recordEnabled\"\n                              checked={selectedAgentDetails?.transportConfigurations?.[0]?.record || false}\n                              onChange={(e) => handleFieldUpdate('transportConfigurations.0.record', e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <label htmlFor=\"recordEnabled\" className=\"text-sm text-gray-700\">\n                              Enable Call Recording\n                            </label>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Recording Channels</label>\n                            <Select\n                              value={selectedAgentDetails?.transportConfigurations?.[0]?.recordingChannels || 'mono'}\n                              onValueChange={(value) => handleFieldUpdate('transportConfigurations.0.recordingChannels', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"mono\">Mono</SelectItem>\n                                <SelectItem value=\"dual\">Dual</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                  \n                    {/* <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <BarChart3 className=\"h-5 w-5 text-purple-600\" />\n                          Observability & Analytics\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Provider</label>\n                            <Select\n                              value={selectedAgentDetails?.observabilityPlan?.provider || 'langfuse'}\n                              onValueChange={(value) => handleFieldUpdate('observabilityPlan.provider', value)}\n                            >\n                              <SelectTrigger className=\"mt-1\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"langfuse\">Langfuse</SelectItem>\n                                <SelectItem value=\"langsmith\">LangSmith</SelectItem>\n                                <SelectItem value=\"custom\">Custom</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Tags</label>\n                            <Input\n                              value={selectedAgentDetails?.observabilityPlan?.tags?.join(', ') || ''}\n                              onChange={(e) => handleFieldUpdate('observabilityPlan.tags', e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag))}\n                              className=\"mt-1\"\n                              placeholder=\"production, customer-service, v1.0\"\n                            />\n                          </div>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Metadata (JSON)</label>\n                          <Textarea\n                            value={JSON.stringify(selectedAgentDetails?.observabilityPlan?.metadata || {}, null, 2)}\n                            onChange={(e) => {\n                              try {\n                                const metadata = JSON.parse(e.target.value);\n                                handleFieldUpdate('observabilityPlan.metadata', metadata);\n                              } catch (error) {\n                                // Invalid JSON, don't update\n                              }\n                            }}\n                            className=\"mt-1 font-mono text-sm\"\n                            rows={4}\n                            placeholder='{\"environment\": \"production\", \"version\": \"1.0\"}'\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Additional metadata for observability tracking\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card> */}\n                  </TabsContent>\n\n                  {/* <TabsContent value=\"server\" className=\"space-y-6\">\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Monitor className=\"h-5 w-5 text-green-600\" />\n                          Server Configuration\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Server URL</label>\n                          <Input\n                            value={selectedAgentDetails?.server?.url || ''}\n                            onChange={(e) => handleFieldUpdate('server.url', e.target.value)}\n                            className=\"mt-1\"\n                            placeholder=\"https://your-server.com/webhook\"\n                          />\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            URL where VAPI will send webhooks and server messages\n                          </p>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Timeout (seconds)</label>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"300\"\n                            value={selectedAgentDetails?.server?.timeoutSeconds || 20}\n                            onChange={(e) => handleFieldUpdate('server.timeoutSeconds', parseInt(e.target.value))}\n                            className=\"mt-1\"\n                            placeholder=\"20\"\n                          />\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Headers (JSON)</label>\n                          <Textarea\n                            value={JSON.stringify(selectedAgentDetails?.server?.headers || {}, null, 2)}\n                            onChange={(e) => {\n                              try {\n                                const headers = JSON.parse(e.target.value);\n                                handleFieldUpdate('server.headers', headers);\n                              } catch (error) {\n                              \n                              }\n                            }}\n                            className=\"mt-1\"\n                            rows={4}\n                            placeholder='{\"Authorization\": \"Bearer token\", \"Content-Type\": \"application/json\"}'\n                          />\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                   \n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <Settings className=\"h-5 w-5 text-orange-600\" />\n                          Credentials\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700\">Credential IDs</label>\n                          <Textarea\n                            value={selectedAgentDetails?.credentialIds?.join('\\n') || ''}\n                            onChange={(e) => handleFieldUpdate('credentialIds', e.target.value.split('\\n').filter(id => id.trim()))}\n                            className=\"mt-1\"\n                            rows={3}\n                            placeholder=\"Enter credential IDs (one per line)...\"\n                          />\n                        </div>\n\n                        {selectedAgentDetails?.credentials && selectedAgentDetails.credentials.length > 0 && (\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700 mb-3 block\">Dynamic Credentials</label>\n                            <div className=\"space-y-3\">\n                              {selectedAgentDetails.credentials.map((cred: any, index: number) => (\n                                <div key={index} className=\"p-4 bg-gray-50 rounded-lg border\">\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <h4 className=\"font-medium text-gray-900\">{cred.name || `Credential ${index + 1}`}</h4>\n                                    <Badge variant=\"secondary\">{cred.provider}</Badge>\n                                  </div>\n                                  <p className=\"text-xs text-gray-500\">\n                                    Provider: {cred.provider}\n                                  </p>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </TabsContent> */}\n\n                  <TabsContent value=\"debug\" className=\"space-y-6\">\n                    {/* Debug Information */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                          Debug Information\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {/* Basic Info */}\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Assistant ID</label>\n                            <div className=\"mt-1 p-3 bg-gray-50 rounded-lg font-mono text-sm\">\n                              {selectedAgent?.id}\n                            </div>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Organization ID</label>\n                            <div className=\"mt-1 p-3 bg-gray-50 rounded-lg font-mono text-sm\">\n                              {selectedAgentDetails?.orgId || 'N/A'}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Created At</label>\n                            <div className=\"mt-1 p-3 bg-gray-50 rounded-lg text-sm\">\n                              {selectedAgentDetails?.createdAt ? new Date(selectedAgentDetails.createdAt).toLocaleString() : 'N/A'}\n                            </div>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Updated At</label>\n                            <div className=\"mt-1 p-3 bg-gray-50 rounded-lg text-sm\">\n                              {selectedAgentDetails?.updatedAt ? new Date(selectedAgentDetails.updatedAt).toLocaleString() : 'N/A'}\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Metadata */}\n                        {selectedAgentDetails?.metadata && Object.keys(selectedAgentDetails.metadata).length > 0 && (\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Metadata</label>\n                            <div className=\"mt-1 p-3 bg-gray-50 rounded-lg\">\n                              <pre className=\"text-xs text-gray-600 whitespace-pre-wrap\">\n                                {JSON.stringify(selectedAgentDetails.metadata, null, 2)}\n                              </pre>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Raw VAPI Data */}\n                        {selectedAgentDetails?._rawVapiData && (\n                          <div>\n                            <label className=\"text-sm font-medium text-gray-700\">Raw VAPI Response</label>\n                            <div className=\"mt-1 p-3 bg-gray-50 rounded-lg max-h-96 overflow-y-auto\">\n                              <pre className=\"text-xs text-gray-600 whitespace-pre-wrap\">\n                                {JSON.stringify(selectedAgentDetails._rawVapiData, null, 2)}\n                              </pre>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Current Values Debug */}\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                            <label className=\"text-xs font-medium text-blue-700\">Model Values</label>\n                            <div className=\"text-xs text-blue-600 mt-1\">\n                              <div>Provider: \"{selectedAgentDetails?.model?.provider}\" ({typeof selectedAgentDetails?.model?.provider})</div>\n                              <div>Model: \"{selectedAgentDetails?.model?.model}\" ({typeof selectedAgentDetails?.model?.model})</div>\n                              <div>Temperature: {selectedAgentDetails?.model?.temperature} ({typeof selectedAgentDetails?.model?.temperature})</div>\n                            </div>\n                          </div>\n\n                          <div className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                            <label className=\"text-xs font-medium text-green-700\">Voice Values</label>\n                            <div className=\"text-xs text-green-600 mt-1\">\n                              <div>Provider: \"{selectedAgentDetails?.voice?.provider}\" ({typeof selectedAgentDetails?.voice?.provider})</div>\n                              <div>Voice ID: \"{selectedAgentDetails?.voice?.voiceId}\" ({typeof selectedAgentDetails?.voice?.voiceId})</div>\n                              <div>Speed: {selectedAgentDetails?.voice?.speed} ({typeof selectedAgentDetails?.voice?.speed})</div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n                </Tabs>\n              )}\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <Bot className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Assistant Selected</h3>\n              <p className=\"text-gray-500\">Select an assistant from the list to view details</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Delete Assistant\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"py-4\">\n            <div className=\"flex items-center space-x-4 p-4 bg-red-50 rounded-lg border border-red-200\">\n              <div className=\"flex-shrink-0\">\n                <AlertTriangle className=\"h-8 w-8 text-red-500\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-sm font-medium text-red-800\">\n                  Are you sure you want to delete this assistant?\n                </h3>\n                <div className=\"mt-2 text-sm text-red-700\">\n                  <p>\n                    <strong>{agentToDelete?.name}</strong> will be permanently deleted from both VAPI and your database.\n                    This action cannot be undone.\n                  </p>\n                  <div className=\"mt-2 text-xs text-red-600\">\n                    <p><strong>Agent ID:</strong> {agentToDelete?.id}</p>\n                    {agentToDelete?.assistant_id && (\n                      <p><strong>VAPI Assistant ID:</strong> {agentToDelete.assistant_id}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\n          </div>\n\n          <div className=\"flex justify-end gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsDeleteDialogOpen(false)}\n              disabled={deleteAssistantMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmDelete}\n              disabled={deleteAssistantMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              {deleteAssistantMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete Assistant\n                </>\n              )}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Voice Assistant Sidebar */}\n      {isCallDialogOpen && (\n        <div className=\"fixed inset-0 z-50 flex\">\n          {/* Backdrop */}\n          <div\n            className=\"fixed inset-0 bg-black/20 backdrop-blur-sm transition-opacity\"\n            onClick={() => setIsCallDialogOpen(false)}\n          />\n\n          {/* Sidebar - Half Screen Width */}\n          <div className=\"ml-auto relative bg-white w-1/2 h-full shadow-2xl border-l border-gray-200 transform transition-transform duration-300 ease-in-out\">\n            {/* Header */}\n            <div className=\"bg-white border-b border-gray-200 p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <Avatar className=\"h-10 w-10 bg-gray-100 border border-gray-200\">\n                    <AvatarFallback className=\"text-gray-700 font-medium\">\n                      {getInitials(selectedAgent?.name || '')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">{selectedAgent?.name}</h3>\n                    <p className=\"text-gray-500 text-sm\">AI Voice Assistant</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <div id=\"call-button-container\" className=\"min-w-[100px] min-h-[40px] bg-red-100 border  rounded flex items-center justify-center\">\n                    {/* Call button will be rendered here by VapiAgentCall component */}\n                    \n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsCallDialogOpen(false)}\n                    className=\"text-gray-400 hover:text-gray-600 hover:bg-gray-100 h-8 w-8 p-0 rounded-full\"\n                  >\n                    ×\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"flex flex-col h-[calc(100vh-80px)]\">\n              {selectedAgent && (\n                <VapiAgentCall\n                  agentId={String(selectedAgent.id)}\n                  agentName={selectedAgent.name || 'Unknown Agent'}\n                  agentConfig={{\n                    ...selectedAgentDetails,\n                    assistant_id: selectedAgent.assistant_id || selectedAgentDetails?.assistant_id,\n                    firstMessage: selectedAgentDetails?.firstMessage || `Hello! I'm ${selectedAgent.name}. How can I help you today?`,\n                    systemMessage: selectedAgentDetails?.model?.messages?.[0]?.content || `You are ${selectedAgent.name}, a helpful AI assistant.`\n                  }}\n                  onCallStart={() => {\n                    console.log('🎙️ Started call with assistant:', selectedAgent.name);\n                    console.log('🔍 Agent data:', selectedAgent);\n                    console.log('🔍 Agent details:', selectedAgentDetails);\n                    toast.success(`Connected to ${selectedAgent.name}`);\n                  }}\n                  onCallEnd={() => {\n                    console.log('🎙️ Ended call with assistant:', selectedAgent.name);\n                    toast.info('Call ended');\n                  }}\n                  onError={(error) => {\n                    console.error('🎙️ Call error:', error);\n                    toast.error(`Call error: ${error.message}`);\n                  }}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// VAPI Voice Preview Button Component\nconst VapiVoicePreviewButton = ({ voiceProvider, voiceId }: { voiceProvider: string; voiceId: string }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);\n  const [hasError, setHasError] = useState(false);\n\n  // Cleanup function\n  const cleanup = () => {\n    if (audio) {\n      audio.pause();\n      audio.removeEventListener('loadstart', handleLoadStart);\n      audio.removeEventListener('canplay', handleCanPlay);\n      audio.removeEventListener('ended', handleEnded);\n      audio.removeEventListener('error', handleError);\n      audio.removeEventListener('loadeddata', handleLoadedData);\n      setAudio(null);\n    }\n  };\n\n  // Event handlers\n  const handleLoadStart = () => setIsLoading(true);\n  const handleCanPlay = () => setIsLoading(false);\n  const handleLoadedData = () => setIsLoading(false);\n  const handleEnded = () => {\n    setIsPlaying(false);\n    setIsLoading(false);\n  };\n  const handleError = (e: Event) => {\n    console.error('Audio error:', e);\n    setIsLoading(false);\n    setIsPlaying(false);\n    setHasError(true);\n  };\n\n  const handlePlayPause = async () => {\n    if (isPlaying && audio) {\n      audio.pause();\n      setIsPlaying(false);\n      return;\n    }\n\n    // Reset error state\n    setHasError(false);\n\n    try {\n      setIsLoading(true);\n\n      // Cleanup previous audio\n      cleanup();\n\n      const selectedVoice = getProviderVoices(voiceProvider).find(v => v.id === voiceId);\n\n      if (!selectedVoice?.preview) {\n        toast.info('Preview not available for this voice');\n        setIsLoading(false);\n        setHasError(true);\n        return;\n      }\n\n      // Check if this is a dynamic preview URL (starts with /api/voices/preview)\n      if (selectedVoice.preview.startsWith('/api/voices/preview')) {\n        // Handle dynamic preview generation\n        await handleDynamicPreview(selectedVoice.preview);\n      } else {\n        // Handle static preview URLs\n        await handleStaticPreview(selectedVoice.preview);\n      }\n\n    } catch (error) {\n      console.error('Error playing voice preview:', error);\n      setIsLoading(false);\n      setIsPlaying(false);\n      setHasError(true);\n\n      // More specific error messages\n      if (error instanceof Error) {\n        if (error.message.includes('timeout')) {\n          toast.error('Preview timeout - please try again');\n        } else if (error.message.includes('Voice preview not available')) {\n          toast.error('Voice preview is currently unavailable');\n        } else if (error.message.includes('load failed')) {\n          toast.error('Preview unavailable for this voice');\n        } else {\n          toast.error('Failed to play voice preview');\n        }\n      } else {\n        toast.error('Failed to play voice preview');\n      }\n    }\n  };\n\n  // Handle dynamic preview generation\n  const handleDynamicPreview = async (previewUrl: string) => {\n    try {\n      // Use axiosInstance which already has proper authentication setup\n      const response = await axiosInstance.get(previewUrl);\n\n      console.log('🎵 Voice preview response:', response.data);\n\n      if (response.data.success && response.data.audioUrl) {\n        // Play the generated audio\n        console.log('✅ Playing audio from:', response.data.audioUrl);\n        await handleStaticPreview(response.data.audioUrl);\n        toast.success(`Playing voice preview`);\n      } else if (response.data.note) {\n        // Show informative message about preview status (don't throw error)\n        console.log('ℹ️ Showing note:', response.data.note);\n        toast.info(response.data.note);\n        setIsLoading(false);\n        return; // Exit gracefully without throwing error\n      } else if (response.data.message && !response.data.audioUrl) {\n        // Show backend message when no audio URL\n        console.log('ℹ️ Showing message:', response.data.message);\n        toast.info(response.data.message);\n        setIsLoading(false);\n        return; // Exit gracefully without throwing error\n      } else {\n        // Fallback error\n        console.log('❌ No audio URL or note found in response');\n        throw new Error('Voice preview not available');\n      }\n    } catch (error: any) {\n      if (error.response?.status === 401) {\n        throw new Error('Authentication failed - please log in again');\n      }\n      throw error;\n    }\n  };\n\n  // Handle static preview URLs\n  const handleStaticPreview = async (audioUrl: string) => {\n    const newAudio = new Audio();\n\n    // Set up event listeners before setting src\n    newAudio.addEventListener('loadstart', handleLoadStart);\n    newAudio.addEventListener('canplay', handleCanPlay);\n    newAudio.addEventListener('loadeddata', handleLoadedData);\n    newAudio.addEventListener('ended', handleEnded);\n    newAudio.addEventListener('error', handleError);\n\n    // Configure audio settings\n    newAudio.preload = 'metadata';\n    newAudio.crossOrigin = 'anonymous';\n\n    setAudio(newAudio);\n\n    // Set source and load\n    newAudio.src = audioUrl;\n    newAudio.load();\n\n    // Wait for audio to be ready\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Audio load timeout'));\n      }, 10000); // 10 second timeout\n\n      newAudio.addEventListener('canplay', () => {\n        clearTimeout(timeout);\n        resolve(void 0);\n      }, { once: true });\n\n      newAudio.addEventListener('error', () => {\n        clearTimeout(timeout);\n        reject(new Error('Audio load failed'));\n      }, { once: true });\n    });\n\n    // Play the audio\n    await newAudio.play();\n    setIsPlaying(true);\n    setIsLoading(false);\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanup;\n  }, []);\n\n  return (\n    <Button\n      type=\"button\"\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={handlePlayPause}\n      disabled={isLoading || hasError}\n      className=\"flex items-center gap-2\"\n    >\n      {isLoading ? (\n        <Loader2 className=\"h-3 w-3 animate-spin\" />\n      ) : isPlaying ? (\n        <Pause className=\"h-3 w-3\" />\n      ) : hasError ? (\n        <Volume2 className=\"h-3 w-3 opacity-50\" />\n      ) : (\n        <Play className=\"h-3 w-3\" />\n      )}\n      {isLoading ? 'Loading...' : isPlaying ? 'Pause Voice' : hasError ? 'Unavailable' : 'Preview Voice'}\n    </Button>\n  );\n};\n\nexport default VapiStyleAgents;\n"],"names":["VapiAgentCall","agentId","agentName","agentConfig","onCallStart","onCallEnd","onError","publicApiKey","vapiRef","useRef","callState","setCallState","useState","transcript","setTranscript","callTimerRef","isVapiConfigured","Vapi","useEffect","error","setupVapiEventListeners","toast","prev","startCallTimer","volume","message","transcriptMessage","errorMessage","formatDuration","seconds","mins","secs","createAssistantConfig","assistantConfig","startWebCall","assistantId","assistantOverrides","callConfig","resolve","stopWebCall","toggleMute","newMutedState","renderCallButton","container","createPortal","jsxs","jsx","Button","MicOff","Mic","Volume2","Phone","Loader2","PhoneOff","portalReady","setPortalReady","checkContainer","interval","MessageSquare","index","Bot","User","VapiStyleAgents","searchQuery","setSearchQuery","selectedAgent","setSelectedAgent","selectedAgentDetails","setSelectedAgentDetails","isLoadingDetails","setIsLoadingDetails","isCallDialogOpen","setIsCallDialogOpen","isCreateDialogOpen","setIsCreateDialogOpen","isEditing","setIsEditing","editingField","setEditingField","autoSaveTimeout","setAutoSaveTimeout","isDeleteDialogOpen","setIsDeleteDialogOpen","agentToDelete","setAgentToDelete","publishedAgents","setPublishedAgents","__vite_import_meta_env__","createForm","setCreateForm","queryClient","useQueryClient","user","useAuth","agentsData","isLoading","useQuery","fetchAllSyncedAgents","previousData","failureCount","_a","createAssistantMutation","useMutation","createAssistant","data","_b","_d","_c","_e","_f","updateAssistantMutation","id","updateAssistant","response","variables","fieldName","loadAgentDetails","deleteAssistantMutation","deleteAssistant","assistantName","agents","isPaginationDisabled","totalAssistants","publishedSet","agent","isValidUUID","str","idString","details","getVapiAssistantById","vapiData","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_A","_B","_C","_D","_E","_F","_G","_J","_I","_H","_K","getInitials","name","part","handleCreateFormChange","field","value","parent","child","validateCreateForm","errors","handleCreateSubmit","validationErrors","vapiFormData","normalizeProviderValue","provider","type","normalized","handleFieldUpdate","updated","defaultModel","getDefaultModel","defaultVoice","getDefaultVoice","getDefaultTranscriberModel","timeout","updateData","localOnlyFields","handleSystemMessageUpdate","updatedMessages","handleDeleteAgent","confirmDelete","handlePublishToggle","isCurrentlyPublished","vapiUpdateData","newPublishedAgents","Badge","Crown","Dialog","DialogTrigger","Plus","DialogContent","DialogHeader","DialogTitle","Input","e","Textarea","Select","SelectTrigger","SelectValue","SelectContent","MODEL_PROVIDERS","SelectItem","getProviderModels","model","VOICE_PROVIDERS","getProviderVoices","voice","TRANSCRIBER_PROVIDERS","getTranscriberModels","Fragment","Search","Avatar","AvatarFallback","Radio","Trash2","Tabs","TabsList","TabsTrigger","Brain","TabsContent","Card","CardHeader","CardTitle","CardContent","m","phrase","v","p","_L","k","_M","_N","_O","_P","_Q","_R","_S","_T","Settings","_V","_U","word","_W","Sliders","_X","_Y","_Z","__","_$","_ba","_aa","_da","_ca","_fa","_ea","_ha","_ga","AlertTriangle","_ia","_ja","_ka","_la","_ma","_na","_oa","_pa","_qa","_ra","_sa","_ta","_wa","_va","_ua"],"mappings":"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"}