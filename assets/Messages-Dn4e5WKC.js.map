{"version":3,"file":"Messages-Dn4e5WKC.js","sources":["../../src/components/ContactMessaging/ConversationsList.tsx","../../src/components/ContactMessaging/ContactChatModal.tsx","../../src/pages/Messages/Messages.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  MessageSquare,\n  Search,\n  Clock,\n  Phone,\n  Mail,\n  Loader2,\n  RefreshCw\n} from 'lucide-react';\nimport { getConversations } from '@/api/services/messaging/messagingService';\nimport { formatPhoneForDisplay } from '@/api/services/messaging/messagingService';\nimport { toast } from 'sonner';\n\ninterface Conversation {\n  contact_id: string;\n  email: string;\n  contact_number: string;\n  list_name?: string;\n  last_message: string;\n  last_message_time: string;\n  last_message_sender: 'user' | 'contact';\n  total_messages: number;\n  unread_count: number;\n}\n\ninterface ConversationsListProps {\n  onSelectConversation: (contact: any) => void;\n  selectedContactId?: string;\n}\n\nconst ConversationsList: React.FC<ConversationsListProps> = ({\n  onSelectConversation,\n  selectedContactId\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  useEffect(() => {\n    loadConversations();\n  }, []);\n\n  const loadConversations = async () => {\n    try {\n      setIsLoading(true);\n      const response = await getConversations();\n      if (response.success) {\n        setConversations(response.conversations);\n      }\n    } catch (error) {\n      console.error('Failed to load conversations:', error);\n      toast.error('Failed to load conversations');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await loadConversations();\n    setIsRefreshing(false);\n  };\n\n  const getInitials = (email: string) => {\n    const name = email.split('@')[0];\n    return name.substring(0, 2).toUpperCase();\n  };\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n    if (diffInHours < 1) {\n      return 'Just now';\n    } else if (diffInHours < 24) {\n      return `${Math.floor(diffInHours)}h ago`;\n    } else if (diffInHours < 168) { // 7 days\n      return `${Math.floor(diffInHours / 24)}d ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  const filteredConversations = conversations.filter(conv =>\n    conv.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    conv.contact_number.includes(searchQuery) ||\n    conv.last_message.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"flex items-center space-x-2 text-gray-500\">\n          <Loader2 className=\"h-5 w-5 animate-spin\" />\n          <span>Loading conversations...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b bg-white\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Messages</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"h-8 w-8 p-0\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {filteredConversations.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-gray-400 p-8\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n              <MessageSquare className=\"h-8 w-8\" />\n            </div>\n            <p className=\"text-center text-sm\">\n              {searchQuery ? 'No conversations match your search' : 'No conversations yet'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-1 p-2\">\n            {filteredConversations.map((conversation) => (\n              <Card\n                key={conversation.contact_id}\n                className={`p-3 cursor-pointer transition-colors hover:bg-gray-50 ${\n                  selectedContactId === conversation.contact_id \n                    ? 'bg-primary/5 border-primary/20' \n                    : 'border-gray-200'\n                }`}\n                onClick={() => onSelectConversation({\n                  id: conversation.contact_id,\n                  email: conversation.email,\n                  contact_number: conversation.contact_number,\n                  list_name: conversation.list_name\n                })}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <Avatar className=\"h-10 w-10 bg-gradient-to-br from-primary/20 to-primary/10 flex-shrink-0\">\n                    <AvatarFallback className=\"text-primary font-medium\">\n                      {getInitials(conversation.email)}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <h3 className=\"font-medium text-gray-900 truncate\">\n                        {conversation.email.split('@')[0]}\n                      </h3>\n                      <div className=\"flex items-center space-x-2\">\n                        {conversation.unread_count > 0 && (\n                          <Badge variant=\"destructive\" className=\"text-xs px-1.5 py-0.5\">\n                            {conversation.unread_count}\n                          </Badge>\n                        )}\n                        <span className=\"text-xs text-gray-500\">\n                          {formatTime(conversation.last_message_time)}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 text-xs text-gray-500 mb-2\">\n                      <Phone className=\"h-3 w-3\" />\n                      <span>{formatPhoneForDisplay(conversation.contact_number)}</span>\n                      {conversation.list_name && (\n                        <>\n                          <span>•</span>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {conversation.list_name}\n                          </Badge>\n                        </>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`w-2 h-2 rounded-full flex-shrink-0 ${\n                        conversation.last_message_sender === 'user' \n                          ? 'bg-blue-500' \n                          : 'bg-green-500'\n                      }`} />\n                      <p className=\"text-sm text-gray-600 truncate\">\n                        {conversation.last_message}\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between mt-2\">\n                      <span className=\"text-xs text-gray-400\">\n                        {conversation.total_messages} message{conversation.total_messages !== 1 ? 's' : ''}\n                      </span>\n                      <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n                        <Clock className=\"h-3 w-3\" />\n                        <span>\n                          {conversation.last_message_sender === 'user' ? 'You' : 'Contact'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ConversationsList;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Send,\n  Phone,\n  Mail,\n  X,\n  MessageSquare,\n  Clock,\n  Check,\n  CheckCheck,\n  AlertCircle,\n  Loader2\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { toast } from 'sonner';\nimport {\n  sendSMSToContact,\n  getContactMessages,\n  checkNewIncomingMessages,\n  formatPhoneToE164,\n  formatPhoneForDisplay\n} from '@/api/services/messaging/messagingService';\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: 'user' | 'contact';\n  timestamp: Date;\n  status: 'sending' | 'sent' | 'delivered' | 'failed' | 'read';\n  messageId?: string;\n}\n\ninterface Contact {\n  id: string;\n  email: string;\n  contact_number: string;\n  list_name?: string;\n}\n\ninterface ContactChatModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  contact: Contact | null;\n}\n\nconst ContactChatModal: React.FC<ContactChatModalProps> = ({\n  isOpen,\n  onClose,\n  contact\n}) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSending, setIsSending] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Load message history when contact changes\n  useEffect(() => {\n    if (contact && isOpen) {\n      loadMessageHistory();\n    }\n  }, [contact, isOpen]);\n\n  // Set up efficient polling for incoming messages only\n  useEffect(() => {\n    if (!contact || !isOpen || !contact.id) return;\n\n    // Set up polling every 2 seconds for new incoming messages only\n    const pollInterval = setInterval(async () => {\n      try {\n        // Get the last message ID to check for new messages after it\n        const lastMessage = messages[messages.length - 1];\n        const lastMessageId = lastMessage?.id;\n\n        console.log(`🔍 Polling for new incoming messages for contact ${contact.id} after ID: ${lastMessageId}`);\n\n        const response = await checkNewIncomingMessages(contact.id, lastMessageId);\n\n        if (response.success && response.hasNewMessages && response.messages.length > 0) {\n          console.log(`📨 Found ${response.messages.length} new incoming messages`);\n\n          // Add new incoming messages to the existing messages\n          const newMessages = response.messages.map(msg => ({\n            id: msg.id.toString(),\n            content: msg.content,\n            sender: msg.sender as 'user' | 'contact',\n            timestamp: new Date(msg.timestamp),\n            status: msg.status as 'sending' | 'sent' | 'delivered' | 'failed' | 'read',\n            messageId: msg.messageId\n          }));\n\n          setMessages(prev => [...prev, ...newMessages]);\n\n          // Show notification for new messages\n          toast.success(`New message from ${contact.email?.split('@')[0] || 'Contact'}`);\n        }\n      } catch (error) {\n        console.error('Error polling for new messages:', error);\n        // Don't show error toast to avoid spam\n      }\n    }, 2000);\n\n    return () => {\n      clearInterval(pollInterval);\n    };\n  }, [contact?.id, isOpen, messages]);\n\n  const loadMessageHistory = async () => {\n    if (!contact) return;\n\n    setIsLoading(true);\n    try {\n      const response = await getContactMessages(contact.id);\n      if (response.success) {\n        const formattedMessages: Message[] = response.messages.map((msg: any) => ({\n          id: msg.id.toString(),\n          content: msg.content,\n          sender: msg.sender,\n          timestamp: new Date(msg.timestamp),\n          status: msg.status,\n          messageId: msg.message_id\n        }));\n        setMessages(formattedMessages);\n      } else {\n        // If no messages found, start with empty array\n        setMessages([]);\n      }\n    } catch (error) {\n      console.error('Failed to load message history:', error);\n      toast.error('Failed to load message history');\n      setMessages([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!newMessage.trim() || !contact || isSending) return;\n\n    const messageContent = newMessage.trim();\n    setNewMessage('');\n    setIsSending(true);\n\n    // Create temporary message with sending status\n    const tempMessage: Message = {\n      id: Date.now().toString(),\n      content: messageContent,\n      sender: 'user',\n      timestamp: new Date(),\n      status: 'sending'\n    };\n\n    setMessages(prev => [...prev, tempMessage]);\n\n    try {\n      // Format phone number to E.164 format\n      const formattedPhone = formatPhoneToE164(contact.contact_number);\n\n      // Send SMS using the messaging service\n      const result = await sendSMSToContact({\n        toPhoneNumber: formattedPhone,\n        message: messageContent,\n        contactId: contact.id\n      });\n\n      if (result.success) {\n        // Update message status to sent\n        setMessages(prev =>\n          prev.map(msg =>\n            msg.id === tempMessage.id\n              ? { ...msg, status: 'sent', messageId: result.messageId }\n              : msg\n          )\n        );\n        toast.success('Message sent successfully');\n      } else {\n        throw new Error(result.error || 'Failed to send message');\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error);\n\n      // Update message status to failed\n      setMessages(prev =>\n        prev.map(msg =>\n          msg.id === tempMessage.id\n            ? { ...msg, status: 'failed' }\n            : msg\n        )\n      );\n\n      toast.error('Failed to send message');\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const getInitials = (email: string) => {\n    const name = email.split('@')[0];\n    return name.substring(0, 2).toUpperCase();\n  };\n\n  const formatPhoneNumber = (phone: string) => {\n    if (!phone) return '';\n    return formatPhoneForDisplay(phone);\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const getMessageStatusIcon = (status: Message['status']) => {\n    switch (status) {\n      case 'sending':\n        return <Loader2 className=\"h-3 w-3 animate-spin text-gray-400\" />;\n      case 'sent':\n        return <Check className=\"h-3 w-3 text-gray-400\" />;\n      case 'delivered':\n        return <CheckCheck className=\"h-3 w-3 text-blue-500\" />;\n      case 'failed':\n        return <AlertCircle className=\"h-3 w-3 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  if (!contact) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl h-[600px] p-0 flex flex-col\">\n        {/* Header */}\n        <DialogHeader className=\"p-4 border-b bg-gray-50 flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"h-10 w-10 bg-gradient-to-br from-primary/20 to-primary/10\">\n                <AvatarFallback className=\"text-primary font-medium\">\n                  {getInitials(contact.email)}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <DialogTitle className=\"text-lg font-semibold text-gray-900\">\n                  {contact.email.split('@')[0]}\n                </DialogTitle>\n                <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Mail className=\"h-3 w-3\" />\n                    <span>{contact.email}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Phone className=\"h-3 w-3\" />\n                    <span>{formatPhoneNumber(contact.contact_number)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {contact.list_name && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {contact.list_name}\n                </Badge>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                className=\"h-8 w-8 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n\n        {/* Messages Area */}\n        <div className=\"flex-1 overflow-y-auto p-4 bg-gray-50\">\n          {messages.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-gray-400\">\n              <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center mb-4 shadow-sm\">\n                <MessageSquare className=\"h-8 w-8\" />\n              </div>\n              <p className=\"text-center text-sm\">\n                No messages yet. Start a conversation!\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={cn(\n                    'flex',\n                    message.sender === 'user' ? 'justify-end' : 'justify-start'\n                  )}\n                >\n                  <div\n                    className={cn(\n                      'max-w-[70%] rounded-lg px-4 py-2 shadow-sm',\n                      message.sender === 'user'\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-white text-gray-900 border'\n                    )}\n                  >\n                    <p className=\"text-sm\">{message.content}</p>\n                    <div className={cn(\n                      'flex items-center justify-end space-x-1 mt-1',\n                      message.sender === 'user' ? 'text-primary-foreground/70' : 'text-gray-500'\n                    )}>\n                      <span className=\"text-xs\">{formatTime(message.timestamp)}</span>\n                      {message.sender === 'user' && getMessageStatusIcon(message.status)}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          )}\n        </div>\n\n        {/* Message Input */}\n        <div className=\"p-4 border-t bg-white flex-shrink-0\">\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              className=\"flex-1\"\n              disabled={isSending}\n            />\n            <Button\n              onClick={sendMessage}\n              disabled={!newMessage.trim() || isSending}\n              size=\"sm\"\n              className=\"px-3\"\n            >\n              {isSending ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">\n            Messages will be sent via SMS to {formatPhoneNumber(contact.contact_number)}\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default ContactChatModal;\n","import React, { useState } from 'react';\nimport Page from '@/components/Page';\nimport Header from '@/components/Header';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  MessageSquare,\n  Phone,\n  Mail,\n  Settings,\n  Plus,\n  Users\n} from 'lucide-react';\nimport ConversationsList from '@/components/ContactMessaging/ConversationsList';\nimport ContactChatModal from '@/components/ContactMessaging/ContactChatModal';\n\ninterface Contact {\n  id: string;\n  email: string;\n  contact_number: string;\n  list_name?: string;\n}\n\nconst Messages: React.FC = () => {\n  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);\n  const [isChatModalOpen, setIsChatModalOpen] = useState(false);\n\n  const handleSelectConversation = (contact: Contact) => {\n    setSelectedContact(contact);\n    setIsChatModalOpen(true);\n  };\n\n  const handleCloseChat = () => {\n    setIsChatModalOpen(false);\n    setSelectedContact(null);\n  };\n\n  return (\n    <Page>\n      <Header\n        title=\"Messages\"\n        buttonText=\"New Message\"\n        filterByName={false}\n        action={() => {\n          // TODO: Implement new message functionality\n          console.log('New message clicked');\n        }}\n      />\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-200px)]\">\n        {/* Conversations Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"h-full\">\n            <ConversationsList\n              onSelectConversation={handleSelectConversation}\n              selectedContactId={selectedContact?.id}\n            />\n          </Card>\n        </div>\n\n        {/* Main Chat Area */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"h-full flex flex-col\">\n            {selectedContact ? (\n              <div className=\"h-full flex flex-col\">\n                {/* Chat Header */}\n                <div className=\"p-4 border-b bg-gray-50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <MessageSquare className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">\n                          {selectedContact.email.split('@')[0]}\n                        </h3>\n                        <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Mail className=\"h-3 w-3\" />\n                            <span>{selectedContact.email}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Phone className=\"h-3 w-3\" />\n                            <span>{selectedContact.contact_number}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {selectedContact.list_name && (\n                        <Badge variant=\"secondary\">\n                          {selectedContact.list_name}\n                        </Badge>\n                      )}\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Chat Messages Area */}\n                <div className=\"flex-1 p-4 bg-gray-50 flex items-center justify-center\">\n                  <div className=\"text-center text-gray-500\">\n                    <MessageSquare className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                    <p className=\"text-lg font-medium mb-2\">Open Full Chat</p>\n                    <p className=\"text-sm mb-4\">\n                      Click the button below to open the full messaging interface\n                    </p>\n                    <Button onClick={() => setIsChatModalOpen(true)}>\n                      <MessageSquare className=\"h-4 w-4 mr-2\" />\n                      Open Chat\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"h-full flex items-center justify-center\">\n                <div className=\"text-center text-gray-400\">\n                  <div className=\"w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <MessageSquare className=\"h-10 w-10\" />\n                  </div>\n                  <h3 className=\"text-xl font-medium mb-2\">Welcome to Messages</h3>\n                  <p className=\"text-gray-500 mb-6 max-w-md\">\n                    Select a conversation from the sidebar to start messaging with your contacts via SMS.\n                  </p>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-500\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>SMS messaging powered by Twilio</span>\n                    </div>\n                    <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-500\">\n                      <Users className=\"h-4 w-4\" />\n                      <span>Message history stored securely</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </Card>\n        </div>\n      </div>\n\n      {/* Chat Modal */}\n      <ContactChatModal\n        isOpen={isChatModalOpen}\n        onClose={handleCloseChat}\n        contact={selectedContact}\n      />\n    </Page>\n  );\n};\n\nexport default Messages;\n"],"names":["ConversationsList","onSelectConversation","selectedContactId","conversations","setConversations","useState","isLoading","setIsLoading","searchQuery","setSearchQuery","isRefreshing","setIsRefreshing","useEffect","loadConversations","response","getConversations","error","toast","handleRefresh","getInitials","email","formatTime","dateString","date","diffInHours","filteredConversations","conv","jsxs","jsx","Loader2","Button","RefreshCw","Search","Input","e","MessageSquare","conversation","Card","Avatar","AvatarFallback","Badge","Phone","formatPhoneForDisplay","Fragment","Clock","ContactChatModal","isOpen","onClose","contact","messages","setMessages","newMessage","setNewMessage","isSending","setIsSending","messagesEndRef","useRef","scrollToBottom","_a","loadMessageHistory","pollInterval","lastMessage","lastMessageId","checkNewIncomingMessages","newMessages","msg","prev","getContactMessages","formattedMessages","sendMessage","messageContent","tempMessage","formattedPhone","formatPhoneToE164","result","sendSMSToContact","handleKeyPress","formatPhoneNumber","phone","getMessageStatusIcon","status","Check","CheckCheck","AlertCircle","Dialog","DialogContent","DialogHeader","DialogTitle","Mail","X","message","cn","Send","Messages","selectedContact","setSelectedContact","isChatModalOpen","setIsChatModalOpen","handleSelectConversation","handleCloseChat","Page","Header","Settings","Users"],"mappings":"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"}