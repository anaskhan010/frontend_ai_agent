{"version":3,"file":"PhoneNumbers-jpvNHRsQ.js","sources":["../../src/components/PhoneNumbers/CreatePhoneNumberForm.tsx","../../src/components/PhoneNumbers/SuperAdminPhoneNumberManagement.tsx","../../src/components/Debug/PhoneNumberDebug.tsx","../../src/pages/PhoneNumbers/PhoneNumbers.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2, Phone, Shield, Settings, AlertCircle, ChevronDown, ChevronRight, Bot } from \"lucide-react\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { toast } from \"sonner\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { createPhoneNumber, importTwilioPhoneNumber } from \"@/api/services/phoneNumbers/phoneNumberService\";\nimport { fetchAllAgentsComplete } from \"@/api/services/agents/agentService\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { usePermissions } from \"@/context/PermissionContext\";\nimport CreditGuard from \"@/components/Credits/CreditGuard\";\n\ninterface CreatePhoneNumberFormProps {\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\ninterface FormData {\n  provider: string;\n  phoneNumber: string;\n  name: string;\n  assistantId: string;\n  squadId: string;\n  workflowId: string;\n  fallbackDestination: string;\n  serverUrl: string;\n  serverUrlSecret: string;\n  // Provider-specific credentials\n  twilioAccountSid: string;\n  twilioAuthToken: string;\n  vonageApiKey: string;\n  vonageApiSecret: string;\n  telnyxApiKey: string;\n  telnyxApiSecret: string;\n  // VAPI specific\n  areaCode: string;\n  // Twilio import specific\n  twilioPhoneNumber: string;\n  twilioLabel: string;\n  smsEnabled: boolean;\n}\n\nconst CreatePhoneNumberForm: React.FC<CreatePhoneNumberFormProps> = ({\n  onSuccess,\n  onCancel\n}) => {\n  const { user } = useAuth();\n  const { isSuperAdmin } = usePermissions();\n\n  const [formData, setFormData] = useState<FormData>({\n    provider: \"vapi\", // Default to VAPI\n    phoneNumber: \"\",\n    name: \"\",\n    assistantId: \"\",\n    squadId: \"\",\n    workflowId: \"\",\n    fallbackDestination: \"\",\n    serverUrl: \"\",\n    serverUrlSecret: \"\",\n    twilioAccountSid: \"\",\n    twilioAuthToken: \"\",\n    vonageApiKey: \"\",\n    vonageApiSecret: \"\",\n    telnyxApiKey: \"\",\n    telnyxApiSecret: \"\",\n    areaCode: \"\",\n    twilioPhoneNumber: \"\",\n    twilioLabel: \"\",\n    smsEnabled: true\n  });\n\n  const [phoneNumberOption, setPhoneNumberOption] = useState<\"free\" | \"import\">(\"free\");\n\n  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Fetch assistants based on user role\n  const { data: assistantsData, isLoading: assistantsLoading } = useQuery({\n    queryKey: [\"assistants\", \"complete\", user?.id],\n    queryFn: () => fetchAllAgentsComplete(\"\"),\n    retry: (failureCount, error: any) => {\n      // Don't retry for expected scenarios (normal for new users)\n      const expectedStatuses = [404, 204, 402]; // 402 = Payment Required (no credits)\n      if (expectedStatuses.includes(error?.response?.status)) {\n        return false;\n      }\n      return failureCount < 1; // Retry once for other errors\n    },\n    enabled: !!user?.id,\n  });\n\n  const assistants = assistantsData?.data || [];\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => {\n      if (phoneNumberOption === 'import') {\n        return importTwilioPhoneNumber(data);\n      } else {\n        return createPhoneNumber(data);\n      }\n    },\n    onSuccess: () => {\n      const message = phoneNumberOption === 'import'\n        ? \"Twilio phone number imported successfully!\"\n        : \"Phone number created successfully!\";\n      toast.success(message);\n      queryClient.invalidateQueries({ queryKey: [\"phoneNumbers\"] });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      const message = phoneNumberOption === 'import'\n        ? \"Failed to import Twilio phone number\"\n        : \"Failed to create phone number\";\n      toast.error(error.response?.data?.message || message);\n    }\n  });\n\n  const handleInputChange = (field: keyof FormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const formatPhoneNumber = (phone: string) => {\n    // Simple phone number formatting\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length === 10) {\n      return `+1${cleaned}`;\n    } else if (cleaned.length === 11 && cleaned.startsWith('1')) {\n      return `+${cleaned}`;\n    }\n    return phone;\n  };\n\n  const handlePhoneNumberChange = (value: string) => {\n    const formatted = formatPhoneNumber(value);\n    handleInputChange('phoneNumber', formatted);\n  };\n\n  const validateForm = () => {\n    if (!formData.provider) {\n      toast.error(\"Please select a provider\");\n      return false;\n    }\n\n    // Validation for VAPI free numbers\n    if (formData.provider === 'vapi' && phoneNumberOption === 'free') {\n      if (!formData.areaCode || formData.areaCode.length !== 3) {\n        toast.error(\"Please enter a valid 3-digit area code\");\n        return false;\n      }\n    }\n\n    // Validation for Twilio import\n    if (phoneNumberOption === 'import') {\n      if (!formData.twilioPhoneNumber) {\n        toast.error(\"Please enter a Twilio phone number\");\n        return false;\n      }\n      if (!formData.twilioAccountSid) {\n        toast.error(\"Please enter Twilio Account SID\");\n        return false;\n      }\n      if (!formData.twilioAuthToken) {\n        toast.error(\"Please enter Twilio Auth Token\");\n        return false;\n      }\n      if (!formData.twilioLabel) {\n        toast.error(\"Please enter a label for the phone number\");\n        return false;\n      }\n\n      // Validate phone number format for Twilio\n      const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n      if (!phoneRegex.test(formData.twilioPhoneNumber)) {\n        toast.error(\"Phone number must be in E.164 format (e.g., +14155551234)\");\n        return false;\n      }\n    }\n\n    // Validation for other providers (existing logic)\n    if (formData.provider !== 'vapi' && phoneNumberOption !== 'import') {\n      if (!formData.phoneNumber) {\n        toast.error(\"Please enter a phone number\");\n        return false;\n      }\n      const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n      if (!phoneRegex.test(formData.phoneNumber)) {\n        toast.error(\"Phone number must be in E.164 format (e.g., +1234567890)\");\n        return false;\n      }\n    }\n\n    // Validate assistant selection\n    if (!formData.assistantId || formData.assistantId === \"unassigned\") {\n      toast.error(\"Please select an assistant\");\n      return false;\n    }\n\n    // Validate server URL if provided\n    if (formData.serverUrl) {\n      try {\n        new URL(formData.serverUrl);\n      } catch {\n        toast.error(\"Server URL must be a valid URL\");\n        return false;\n      }\n    }\n\n    // Validate fallback destination JSON if provided\n    if (formData.fallbackDestination) {\n      try {\n        JSON.parse(formData.fallbackDestination);\n      } catch {\n        toast.error(\"Fallback destination must be valid JSON\");\n        return false;\n      }\n    }\n\n    // Provider-specific validation\n    switch (formData.provider) {\n      case 'vapi':\n        // No additional validation needed for VAPI\n        break;\n      case 'twilio':\n        if (!formData.twilioAccountSid || !formData.twilioAuthToken) {\n          toast.error(\"Twilio Account SID and Auth Token are required\");\n          return false;\n        }\n        if (!formData.twilioAccountSid.startsWith('AC')) {\n          toast.error(\"Twilio Account SID should start with 'AC'\");\n          return false;\n        }\n        if (formData.twilioAccountSid.length !== 34) {\n          toast.error(\"Twilio Account SID should be 34 characters long\");\n          return false;\n        }\n        break;\n      case 'vonage':\n        if (!formData.vonageApiKey || !formData.vonageApiSecret) {\n          toast.error(\"Vonage API Key and Secret are required\");\n          return false;\n        }\n        break;\n      case 'telnyx':\n        if (!formData.telnyxApiKey) {\n          toast.error(\"Telnyx API Key is required\");\n          return false;\n        }\n        break;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    // Prepare form data for submission\n    let submitData;\n\n    if (phoneNumberOption === 'import') {\n      // For Twilio import - use the specific import service format\n      submitData = {\n        twilioPhoneNumber: formData.twilioPhoneNumber,\n        twilioAccountSid: formData.twilioAccountSid,\n        twilioAuthToken: formData.twilioAuthToken,\n        twilioLabel: formData.twilioLabel,\n        assistantId: formData.assistantId,\n        smsEnabled: formData.smsEnabled\n      };\n    } else {\n      // For VAPI free number or other providers\n      submitData = {\n        ...formData\n      };\n    }\n\n    createMutation.mutate(submitData);\n\n    \n  };\n\n\n\n  return (\n    <CreditGuard\n      requiredCredits={1}\n      feature=\"phone number creation\"\n      showUpgradeButton={true}\n    >\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Phone className=\"h-5 w-5 text-blue-600\" />\n            Create Phone Number\n          </CardTitle>\n          <CardDescription>\n            Get a free AI CRUITMENT phone number.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-5\">\n          {/* Phone Number Options - New Design */}\n          <div className=\"flex gap-6\">\n            {/* Left Sidebar - Phone Number Options */}\n            <div className=\"w-48 space-y-3\">\n              <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Phone Number Options</h3>\n\n              {/* Free Vapi Number Option */}\n              <button\n                type=\"button\"\n                onClick={() => setPhoneNumberOption('free')}\n                className={`w-full p-2.5 text-left rounded-md border text-xs transition-colors ${\n                  phoneNumberOption === 'free'\n                    ? 'border-[#12a594] bg-[#12a594] text-white'\n                    : 'border-gray-200 bg-white text-gray-700 hover:bg-gray-50'\n                }`}\n              >\n                Free AICRUITMENT Number\n              </button>\n\n              {/* Import Twilio Option */}\n              <button\n                type=\"button\"\n                onClick={() => setPhoneNumberOption('import')}\n                className={`w-full p-2.5 text-left rounded-md border text-sm transition-colors ${\n                  phoneNumberOption === 'import'\n                    ? 'border-[#12a594] bg-white text-[#12a594] ring-1 ring-[#12a594]'\n                    : 'border-gray-200 bg-white text-[#12a594] hover:bg-gray-50'\n                }`}\n              >\n                Import Twilio\n              </button>\n            </div>\n\n            {/* Right Content Area */}\n            <div className=\"flex-1 space-y-4\">\n              {phoneNumberOption === 'free' ? (\n                // Free Vapi Number Content - Complete Section\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Free Vapi Number</h3>\n\n                  {/* Provider Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"provider\" className=\"text-sm font-medium\">Provider *</Label>\n                    <Select value={formData.provider} onValueChange={(value) => handleInputChange('provider', value)}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a provider\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"vapi\" className=\"font-medium\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: '#12a594' }}></div>\n                            AI CRUITMENT (Free US Number)\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Area Code and Friendly Name */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"areaCode\" className=\"flex items-center gap-2 text-sm font-medium\">\n                        Area Code *\n                        <span className=\"text-xs px-2 py-0.5 rounded-full text-white font-medium\" style={{ backgroundColor: '#12a594' }}>\n                          Free\n                        </span>\n                      </Label>\n                      <div className=\"relative mt-1\">\n                        <Input\n                          id=\"areaCode\"\n                          type=\"text\"\n                          placeholder=\"000\"\n                          value={formData.areaCode}\n                          onChange={(e) => {\n                            const value = e.target.value.replace(/\\D/g, '').slice(0, 3);\n                            handleInputChange('areaCode', value);\n                            handleInputChange('phoneNumber', value);\n                          }}\n                          className=\"font-mono text-lg text-center border-2 focus:border-[#12a594] focus:ring-[#12a594]\"\n                          style={{ borderColor: formData.areaCode ? '#12a594' : undefined }}\n                          maxLength={3}\n                        />\n                        {formData.areaCode && (\n                          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                            <svg className=\"h-4 w-4\" style={{ color: '#12a594' }} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                            </svg>\n                          </div>\n                        )}\n                      </div>\n                      <p className=\"text-xs mt-1\" style={{ color: '#12a594' }}>\n                        Enter a 3-digit US area code (e.g., 415, 212, 310)\n                      </p>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-sm font-medium\">Friendly Name</Label>\n                      <Input\n                        id=\"name\"\n                        type=\"text\"\n                        placeholder=\"My AI CRUITMENT Number\"\n                        value={formData.name}\n                        onChange={(e) => handleInputChange('name', e.target.value)}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Assistant Selection */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assistantId\" className=\"flex items-center gap-2 text-sm font-medium\">\n                      <Bot className=\"h-4 w-4\" />\n                      Assistant *\n                    </Label>\n                    <Select value={formData.assistantId} onValueChange={(value) => handleInputChange('assistantId', value)}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select an assistant\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {assistantsLoading ? (\n                          <div className=\"flex items-center justify-center p-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            <span className=\"ml-2\">Loading assistants...</span>\n                          </div>\n                        ) : assistants.length === 0 ? (\n                          <div className=\"flex items-center justify-center p-2 text-gray-500\">\n                            No assistants available\n                          </div>\n                        ) : (\n                          <>\n                            {assistants.map((assistant) => (\n                              <SelectItem key={assistant.id} value={assistant.assistant_id || assistant.id}>\n                                <div className=\"flex items-center gap-2\">\n                                  <Bot className=\"h-3 w-3\" />\n                                  {assistant.name}\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-xs text-gray-500\">\n                      {isSuperAdmin\n                        ? \"Super admin can see all assistants\"\n                        : \"You can only see your own assistants\"\n                      }\n                    </p>\n                  </div>\n\n                  {/* AI CRUITMENT Free Phone Number Info Box */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 text-[#12a594]\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span className=\"text-sm font-medium\">AI CRUITMENT Free Phone Number</span>\n                    </div>\n\n                    <div className=\"border border-[#12a594] rounded-lg p-4 bg-[#fafefd]\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"flex-shrink-0 mt-0.5\">\n                          <svg className=\"h-4 w-4 text-[#12a594]\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                          </svg>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"text-sm font-medium text-[#12a594]\">No credentials required!</div>\n                          <div className=\"text-sm text-gray-700\">\n                            AI CRUITMENT provides free US phone numbers instantly. Just enter your desired area code and we'll assign you a random number in that area.\n                          </div>\n                          <div className=\"space-y-1 text-xs text-gray-600\">\n                            <div>• Up to 10 free numbers per account</div>\n                            <div>• Instant activation (2-3 minutes)</div>\n                            <div>• US numbers only</div>\n                            <div>• No monthly fees</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                // Import Twilio Content - Separate Section\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">Import Twilio</h3>\n\n                  {/* Twilio Phone Number */}\n                  <div>\n                    <Label htmlFor=\"twilioPhoneNumber\" className=\"text-sm font-medium\">Twilio Phone Number</Label>\n                    <div className=\"flex mt-1\">\n                      <div className=\"flex items-center px-3 border border-r-0 border-gray-300 bg-gray-50 rounded-l-md\">\n                        <span className=\"text-xs font-medium text-gray-600\">🇺🇸</span>\n                      </div>\n                      <Input\n                        id=\"twilioPhoneNumber\"\n                        type=\"tel\"\n                        placeholder=\"+1415689........\"\n                        value={formData.twilioPhoneNumber}\n                        onChange={(e) => handleInputChange('twilioPhoneNumber', e.target.value)}\n                        className=\"rounded-l-none font-mono\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Twilio Account SID */}\n                  <div>\n                    <Label htmlFor=\"twilioAccountSid\" className=\"text-sm font-medium\">Twilio Account SID</Label>\n                    <Input\n                      id=\"twilioAccountSid\"\n                      type=\"text\"\n                      placeholder=\"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                      value={formData.twilioAccountSid}\n                      onChange={(e) => handleInputChange('twilioAccountSid', e.target.value)}\n                      className=\"font-mono text-sm mt-1\"\n                      required\n                      \n                    />\n                  </div>\n\n                  {/* Twilio Auth Token */}\n                  <div>\n                    <Label htmlFor=\"twilioAuthToken\" className=\"text-sm font-medium\">Twilio Auth Token</Label>\n                    <Input\n                      id=\"twilioAuthToken\"\n                      type=\"password\"\n                      placeholder=\"Your Twilio Auth Token\"\n                      value={formData.twilioAuthToken}\n                      onChange={(e) => handleInputChange('twilioAuthToken', e.target.value)}\n                      className=\"font-mono text-sm mt-1\"\n                    />\n                  </div>\n\n                  {/* Label */}\n                  <div>\n                    <Label htmlFor=\"twilioLabel\" className=\"text-sm font-medium\">Label</Label>\n                    <Input\n                      id=\"twilioLabel\"\n                      type=\"text\"\n                      placeholder=\"Label for Phone Number\"\n                      value={formData.twilioLabel}\n                      onChange={(e) => handleInputChange('twilioLabel', e.target.value)}\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  {/* Assistant Selection for Twilio */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assistantId\" className=\"flex items-center gap-2 text-sm font-medium\">\n                      <Bot className=\"h-4 w-4\" />\n                      Assistant *\n                    </Label>\n                    <Select value={formData.assistantId} onValueChange={(value) => handleInputChange('assistantId', value)}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select an assistant\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {assistantsLoading ? (\n                          <div className=\"flex items-center justify-center p-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            <span className=\"ml-2\">Loading assistants...</span>\n                          </div>\n                        ) : assistants.length === 0 ? (\n                          <div className=\"flex items-center justify-center p-2 text-gray-500\">\n                            No assistants available\n                          </div>\n                        ) : (\n                          <>\n                            {assistants.map((assistant) => (\n                              <SelectItem key={assistant.id} value={assistant.assistant_id || assistant.id}>\n                                <div className=\"flex items-center gap-2\">\n                                  <Bot className=\"h-3 w-3\" />\n                                  {assistant.name}\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-xs text-gray-500\">\n                      {isSuperAdmin\n                        ? \"Super admin can see all assistants\"\n                        : \"You can only see your own assistants\"\n                      }\n                    </p>\n                  </div>\n\n                  {/* SMS Enabled Toggle */}\n                  <div className=\"flex items-center justify-between p-3 border rounded-lg bg-gray-50\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">SMS Enabled</div>\n                      <div className=\"text-xs text-gray-500\">Enable SMS messaging for this phone number</div>\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() => handleInputChange('smsEnabled', !formData.smsEnabled)}\n                      className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${\n                        formData.smsEnabled ? 'bg-[#12a594]' : 'bg-gray-300'\n                      }`}\n                    >\n                      <span\n                        className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${\n                          formData.smsEnabled ? 'translate-x-5' : 'translate-x-1'\n                        }`}\n                      />\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-end gap-3\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onCancel}\n          disabled={createMutation.isPending}\n        >\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          disabled={createMutation.isPending}\n          className=\"min-w-[140px]\"\n          style={phoneNumberOption === 'free' ? {\n            backgroundColor: '#12a594',\n            borderColor: '#12a594',\n            color: 'white'\n          } : {\n            backgroundColor: '#12a594',\n            borderColor: '#12a594',\n            color: 'white'\n          }}\n        >\n          {createMutation.isPending ? (\n            <>\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              {phoneNumberOption === 'import' ? 'Importing from Twilio...' : 'Getting Free Number...'}\n            </>\n          ) : (\n            <>\n              <Phone className=\"h-4 w-4 mr-2\" />\n              {phoneNumberOption === 'import' ? 'Import from Twilio' : 'Get Free Number'}\n            </>\n          )}\n        </Button>\n      </div>\n    </form>\n    </CreditGuard>\n  );\n};\n\nexport default CreatePhoneNumberForm;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Loader2, Phone, UserPlus, UserMinus, Users, Shield } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axiosInstance from \"@/api/axios/axiosInstance\";\n\nimport {\n  getAllPhoneNumbersForAdmin,\n  getAllVapiPhoneNumbersForAdmin,\n  assignPhoneNumberToUser,\n  unassignPhoneNumber\n} from \"@/api/services/phoneNumbers/phoneNumberService\";\nimport { getAllUsersWithRoles } from \"@/api/services/user/userService\";\nimport type { PhoneNumber } from \"@/api/services/phoneNumbers/phoneNumberService\";\n\ninterface AdminUser {\n  id: number;\n  username?: string;\n  email: string;\n  first_name?: string;\n  last_name?: string;\n  is_active: boolean;\n}\n\nconst SuperAdminPhoneNumberManagement = () => {\n  const [selectedPhoneNumber, setSelectedPhoneNumber] = useState<PhoneNumber | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Fetch all VAPI phone numbers with assignment info for admin\n  const { data: phoneNumbersData, isLoading: numbersLoading, error: numbersError } = useQuery({\n    queryKey: [\"admin-vapi-phone-numbers\"],\n    queryFn: () => getAllVapiPhoneNumbersForAdmin(),\n    retry: 1,\n  });\n\n  // Fetch all users for assignment\n  const { data: usersData, isLoading: usersLoading } = useQuery({\n    queryKey: [\"all-users\"],\n    queryFn: () => getAllUsersWithRoles(),\n    retry: 1,\n  });\n\n  // Assignment mutation\n  const assignMutation = useMutation({\n    mutationFn: ({ phoneNumberId, userId, vapiId }: { phoneNumberId: string; userId: string; vapiId?: string }) => {\n      // For VAPI phone numbers, send both the VAPI ID and user ID\n      if (vapiId) {\n        return axiosInstance.post(`/api/phone-numbers/${vapiId}/assign`, {\n          user_id: userId,\n          vapi_id: vapiId\n        });\n      } else {\n        // Traditional assignment for existing local records\n        return assignPhoneNumberToUser(phoneNumberId, userId);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-vapi-phone-numbers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"admin-phone-numbers\"] });\n      toast.success(\"Phone number assigned successfully!\");\n      setIsAssignDialogOpen(false);\n      setSelectedPhoneNumber(null);\n      setSelectedUserId(\"\");\n    },\n    onError: (error: any) => {\n      toast.error(\"Failed to assign phone number: \" + (error.response?.data?.message || error.message));\n    },\n  });\n\n  // Unassignment mutation\n  const unassignMutation = useMutation({\n    mutationFn: (phoneNumberId: string) => unassignPhoneNumber(phoneNumberId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-vapi-phone-numbers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"admin-phone-numbers\"] });\n      toast.success(\"Phone number unassigned successfully!\");\n    },\n    onError: (error: any) => {\n      toast.error(\"Failed to unassign phone number: \" + (error.response?.data?.message || error.message));\n    },\n  });\n\n  const handleAssignClick = (phoneNumber: PhoneNumber) => {\n    setSelectedPhoneNumber(phoneNumber);\n    setIsAssignDialogOpen(true);\n  };\n\n  const handleAssignSubmit = () => {\n    if (!selectedPhoneNumber || !selectedUserId) {\n      toast.error(\"Please select a user to assign the phone number to.\");\n      return;\n    }\n\n    assignMutation.mutate({\n      phoneNumberId: selectedPhoneNumber.local_id || selectedPhoneNumber.id,\n      userId: selectedUserId,\n      vapiId: selectedPhoneNumber.vapi_id || selectedPhoneNumber.id // Use VAPI ID for assignment\n    });\n  };\n\n  const handleUnassign = (phoneNumber: PhoneNumber) => {\n    if (!phoneNumber.local_id) {\n      toast.error(\"Cannot unassign phone number that is not in local database.\");\n      return;\n    }\n\n    if (window.confirm(`Are you sure you want to unassign phone number ${phoneNumber.number}?`)) {\n      unassignMutation.mutate(phoneNumber.local_id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case \"inactive\":\n        return <Badge variant=\"secondary\">Inactive</Badge>;\n      case \"pending\":\n        return <Badge variant=\"outline\">Pending</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  const phoneNumbers = phoneNumbersData?.data || [];\n  const users = usersData?.data || [];\n\n  if (numbersLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-32\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-blue-600\" />\n            <CardTitle>Super Admin - Phone Number Management</CardTitle>\n          </div>\n          <CardDescription>\n            Manage phone number assignments for all users. Shows all VAPI phone numbers including Twilio numbers.\n            Assign any available phone number to specific users to control access.\n          </CardDescription>\n          {phoneNumbersData?.debug_info && (\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-blue-900\">Total VAPI Numbers:</span>\n                  <div className=\"text-blue-700\">{phoneNumbersData.debug_info.total_vapi_numbers}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-green-900\">Assigned:</span>\n                  <div className=\"text-green-700\">{phoneNumbersData.debug_info.assigned_numbers}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-orange-900\">Available:</span>\n                  <div className=\"text-orange-700\">{phoneNumbersData.debug_info.unassigned_numbers}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-purple-900\">In Local DB:</span>\n                  <div className=\"text-purple-700\">{phoneNumbersData.debug_info.in_local_db}</div>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardHeader>\n        <CardContent>\n          {phoneNumbers.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Phone className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No phone numbers found</h3>\n              <p className=\"text-muted-foreground\">\n                No phone numbers are available for assignment.\n              </p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Phone Number</TableHead>\n                  <TableHead>Provider</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Assigned User</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {phoneNumbers.map((phoneNumber: PhoneNumber) => (\n                  <TableRow key={phoneNumber.id}>\n                    <TableCell className=\"font-mono\">{phoneNumber.number || \"Unknown\"}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={phoneNumber.provider === 'vapi' ? 'bg-blue-50 text-blue-700' : 'bg-gray-50 text-gray-700'}>\n                        {phoneNumber.provider?.toUpperCase() || 'VAPI'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        {phoneNumber.is_assigned ? (\n                          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Assigned</Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"text-orange-600\">Available</Badge>\n                        )}\n                        {phoneNumber.is_in_local_db ? (\n                          <Badge variant=\"secondary\" className=\"text-xs\">In DB</Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"text-xs text-blue-600\">VAPI Only</Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {phoneNumber.user_name ? (\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{phoneNumber.user_name}</span>\n                          <span className=\"text-xs text-muted-foreground\">{phoneNumber.user_email}</span>\n                        </div>\n                      ) : (\n                        <Badge variant=\"outline\" className=\"text-orange-600\">Unassigned</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        {phoneNumber.is_assigned ? (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUnassign(phoneNumber)}\n                            disabled={unassignMutation.isPending || !phoneNumber.is_in_local_db}\n                            title={!phoneNumber.is_in_local_db ? \"Cannot unassign phone number not in local database\" : \"\"}\n                          >\n                            <UserMinus className=\"h-3 w-3 mr-1\" />\n                            Unassign\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleAssignClick(phoneNumber)}\n                            disabled={assignMutation.isPending}\n                          >\n                            <UserPlus className=\"h-3 w-3 mr-1\" />\n                            Assign\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Assignment Dialog */}\n      <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Phone Number</DialogTitle>\n            <DialogDescription>\n              Assign phone number {selectedPhoneNumber?.number} to a user. Only the assigned user will be able to see and use this phone number.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Select User</label>\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a user to assign the phone number to\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {users.map((user: any) => (\n                    <SelectItem key={user.id} value={user.id.toString()}>\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">{user.first_name || ''} {user.last_name || ''}</div>\n                          <div className=\"text-xs text-muted-foreground\">{user.email}</div>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsAssignDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAssignSubmit}\n                disabled={!selectedUserId || assignMutation.isPending}\n              >\n                {assignMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Assigning...\n                  </>\n                ) : (\n                  <>\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    Assign Phone Number\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SuperAdminPhoneNumberManagement;\n","import React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Loader2, Bug, Phone, User } from \"lucide-react\";\nimport axiosInstance from \"@/api/axios/axiosInstance\";\nimport usePermissions from \"@/hooks/usePermissions\";\n\nconst PhoneNumberDebug = () => {\n  const { isSuperAdmin } = usePermissions();\n\n  // Debug: Get all assignments\n  const { data: allAssignments, isLoading: assignmentsLoading, refetch: refetchAssignments } = useQuery({\n    queryKey: [\"debug-assignments\"],\n    queryFn: async () => {\n      const response = await axiosInstance.get(\"/api/phone-numbers/debug/assignments\");\n      return response.data;\n    },\n    retry: 1,\n  });\n\n  // Debug: Get user's phone numbers\n  const { data: userNumbers, isLoading: userLoading, refetch: refetchUser } = useQuery({\n    queryKey: [\"debug-user-numbers\"],\n    queryFn: async () => {\n      const response = await axiosInstance.get(\"/api/phone-numbers/debug/user-numbers\");\n      return response.data;\n    },\n    retry: 1,\n  });\n\n  // Regular phone numbers API\n  const { data: regularNumbers, isLoading: regularLoading, refetch: refetchRegular } = useQuery({\n    queryKey: [\"regular-phone-numbers\"],\n    queryFn: async () => {\n      const response = await axiosInstance.get(\"/api/phone-numbers\");\n      return response.data;\n    },\n    retry: 1,\n  });\n\n  const handleRefreshAll = () => {\n    refetchAssignments();\n    refetchUser();\n    refetchRegular();\n  };\n\n  if (assignmentsLoading || userLoading || regularLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-32\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Bug className=\"h-5 w-5 text-orange-600\" />\n              <CardTitle>Phone Number Assignment Debug</CardTitle>\n            </div>\n            <Button onClick={handleRefreshAll} variant=\"outline\" size=\"sm\">\n              Refresh All\n            </Button>\n          </div>\n          <CardDescription>\n            Debug information for phone number assignments. This helps identify why assigned phone numbers might not be showing up for users.\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* User Debug Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Current User Debug Info\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {userNumbers && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <strong>User ID:</strong> {userNumbers.debug_info?.user_id}\n                </div>\n                <div>\n                  <strong>Is Super Admin:</strong> {userNumbers.debug_info?.is_super_admin ? \"Yes\" : \"No\"}\n                </div>\n                <div>\n                  <strong>Phone Count:</strong> {userNumbers.debug_info?.phone_count}\n                </div>\n                <div>\n                  <strong>Is Super Admin (Hook):</strong> {isSuperAdmin ? \"Yes\" : \"No\"}\n                </div>\n              </div>\n              \n              <div>\n                <strong>Phone Number IDs:</strong>\n                <div className=\"mt-2\">\n                  {userNumbers.debug_info?.phone_number_ids?.length > 0 ? (\n                    userNumbers.debug_info.phone_number_ids.map((id: string) => (\n                      <Badge key={id} variant=\"outline\" className=\"mr-2 mb-2\">\n                        {id}\n                      </Badge>\n                    ))\n                  ) : (\n                    <Badge variant=\"destructive\">No phone number IDs found</Badge>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <strong>User's Phone Numbers:</strong>\n                {userNumbers.data?.length > 0 ? (\n                  <Table className=\"mt-2\">\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>DB ID</TableHead>\n                        <TableHead>Phone Number ID</TableHead>\n                        <TableHead>Number</TableHead>\n                        <TableHead>User ID</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {userNumbers.data.map((phone: any) => (\n                        <TableRow key={phone.id}>\n                          <TableCell>{phone.id}</TableCell>\n                          <TableCell>{phone.phone_number_id || \"N/A\"}</TableCell>\n                          <TableCell>{phone.number || \"N/A\"}</TableCell>\n                          <TableCell>{phone.user_id}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <Badge variant=\"destructive\" className=\"mt-2\">No phone numbers found for user</Badge>\n                )}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* All Assignments (Super Admin Only) */}\n      {isSuperAdmin && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Phone className=\"h-4 w-4\" />\n              All Phone Number Assignments\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {allAssignments && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <strong>Total:</strong> {allAssignments.debug_info?.total_count}\n                  </div>\n                  <div>\n                    <strong>Assigned:</strong> {allAssignments.debug_info?.assigned_count}\n                  </div>\n                  <div>\n                    <strong>Unassigned:</strong> {allAssignments.debug_info?.unassigned_count}\n                  </div>\n                </div>\n\n                {allAssignments.data?.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>DB ID</TableHead>\n                        <TableHead>Phone Number ID</TableHead>\n                        <TableHead>Number</TableHead>\n                        <TableHead>Assigned User</TableHead>\n                        <TableHead>User ID</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {allAssignments.data.map((phone: any) => (\n                        <TableRow key={phone.id}>\n                          <TableCell>{phone.id}</TableCell>\n                          <TableCell>{phone.phone_number_id || \"N/A\"}</TableCell>\n                          <TableCell>{phone.number || \"N/A\"}</TableCell>\n                          <TableCell>\n                            {phone.user_name ? (\n                              <div>\n                                <div className=\"font-medium\">{phone.user_name}</div>\n                                <div className=\"text-xs text-muted-foreground\">{phone.user_email}</div>\n                              </div>\n                            ) : (\n                              <Badge variant=\"outline\">Unassigned</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>{phone.user_id || \"NULL\"}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <Badge variant=\"destructive\">No phone numbers found in database</Badge>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Regular API Response */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Phone className=\"h-4 w-4\" />\n            Regular Phone Numbers API Response\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {regularNumbers && (\n            <div className=\"space-y-4\">\n              <div>\n                <strong>Success:</strong> {regularNumbers.success ? \"Yes\" : \"No\"}\n              </div>\n              <div>\n                <strong>Count:</strong> {regularNumbers.data?.length || 0}\n              </div>\n              \n              {regularNumbers.data?.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>ID</TableHead>\n                      <TableHead>Number</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created By</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {regularNumbers.data.map((phone: any) => (\n                      <TableRow key={phone.id}>\n                        <TableCell>{phone.id}</TableCell>\n                        <TableCell>{phone.number || \"N/A\"}</TableCell>\n                        <TableCell>{phone.status || \"N/A\"}</TableCell>\n                        <TableCell>{phone.created_by || phone.user_name || \"N/A\"}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <Badge variant=\"destructive\">No phone numbers returned by regular API</Badge>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default PhoneNumberDebug;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Loader2, Phone, Plus, Search, ShoppingCart, Edit, Trash2 } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport Page from \"@/components/Page\";\nimport CreatePhoneNumberForm from \"@/components/PhoneNumbers/CreatePhoneNumberForm\";\nimport SuperAdminPhoneNumberManagement from \"@/components/PhoneNumbers/SuperAdminPhoneNumberManagement\";\nimport PhoneNumberDebug from \"@/components/Debug/PhoneNumberDebug\";\n\nimport {\n  getAllPhoneNumbers,\n  searchAvailablePhoneNumbers,\n  buyPhoneNumber,\n  updatePhoneNumber,\n  deletePhoneNumber\n} from \"@/api/services/phoneNumbers/phoneNumberService\";\nimport { fetchAllAgents } from \"@/api/services/agents/agentService\";\nimport usePermissions from \"@/hooks/usePermissions\";\nimport type { PhoneNumber, AvailablePhoneNumber, PhoneNumberSearchParams } from \"@/api/services/phoneNumbers/phoneNumberService\";\n\nconst PhoneNumbers = () => {\n  const [searchParams, setSearchParams] = useState<PhoneNumberSearchParams>({\n    country: \"US\",\n    limit: 10,\n  });\n  const [selectedNumber, setSelectedNumber] = useState<PhoneNumber | null>(null);\n  const [isSearchDialogOpen, setIsSearchDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<\"user\" | \"admin\" | \"debug\">(\"user\");\n  const [editForm, setEditForm] = useState({\n    friendlyName: \"\",\n    assistantId: \"\",\n  });\n\n  const queryClient = useQueryClient();\n  const { isSuperAdmin } = usePermissions();\n\n  // Fetch owned phone numbers\n  const { data: phoneNumbersData, isLoading: numbersLoading, error: numbersError } = useQuery({\n    queryKey: [\"phoneNumbers\"],\n    queryFn: () => getAllPhoneNumbers(),\n    retry: 1,\n  });\n\n  // Handle success/error with useEffect\n  React.useEffect(() => {\n    if (phoneNumbersData) {\n      console.log(\"Phone numbers data received:\", phoneNumbersData);\n      if (phoneNumbersData?.data?.length > 0) {\n        console.log(\"First phone number structure:\", phoneNumbersData.data[0]);\n      }\n    }\n  }, [phoneNumbersData]);\n\n  React.useEffect(() => {\n    if (numbersError) {\n      console.error(\"Phone numbers fetch error:\", numbersError);\n    }\n  }, [numbersError]);\n\n  // Fetch available phone numbers for purchase\n  const { data: availableNumbers, isLoading: searchLoading, refetch: searchNumbers } = useQuery({\n    queryKey: [\"phoneNumbers\", \"available\", searchParams],\n    queryFn: () => searchAvailablePhoneNumbers(searchParams),\n    enabled: false,\n  });\n\n  // Fetch assistants for assignment\n  const { data: assistantsData } = useQuery({\n    queryKey: [\"assistants\"],\n    queryFn: () => fetchAllAgents(1, \"\"),\n    retry: 1,\n  });\n\n  // Buy phone number mutation\n  const buyNumberMutation = useMutation({\n    mutationFn: buyPhoneNumber,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"phoneNumbers\"] });\n      toast.success(\"Phone number purchased successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to purchase phone number\");\n    },\n  });\n\n  // Update phone number mutation\n  const updateNumberMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => updatePhoneNumber(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"phoneNumbers\"] });\n      setIsEditDialogOpen(false);\n      toast.success(\"Phone number updated successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to update phone number\");\n    },\n  });\n\n  // Delete phone number mutation\n  const deleteNumberMutation = useMutation({\n    mutationFn: deletePhoneNumber,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"phoneNumbers\"] });\n      toast.success(\"Phone number deleted successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to delete phone number\");\n    },\n  });\n\n  const handleSearch = () => {\n    searchNumbers();\n  };\n\n  const handleBuyNumber = (number: AvailablePhoneNumber) => {\n    buyNumberMutation.mutate({\n      number: number.number,\n      friendlyName: number.friendlyName,\n    });\n  };\n\n  const handleEditNumber = (phoneNumber: PhoneNumber) => {\n    setSelectedNumber(phoneNumber);\n    setEditForm({\n      friendlyName: phoneNumber.friendlyName || \"\",\n      assistantId: phoneNumber.assistantId || \"unassigned\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateNumber = () => {\n    if (!selectedNumber) return;\n\n    updateNumberMutation.mutate({\n      id: selectedNumber.id,\n      data: {\n        ...editForm,\n        assistantId: editForm.assistantId === \"unassigned\" ? \"\" : editForm.assistantId,\n      },\n    });\n  };\n\n  const handleDeleteNumber = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this phone number?\")) {\n      deleteNumberMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      active: \"default\",\n      inactive: \"secondary\",\n      pending: \"outline\",\n    };\n    return <Badge variant={variants[status] || \"outline\"}>{status}</Badge>;\n  };\n\n  const assistants = assistantsData?.data?.assistants || [];\n\n  if (numbersError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Phone Numbers</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your phone numbers and purchase new ones\n          </p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground mb-4\">\n                Unable to connect to the backend API. Please ensure the backend server is running.\n              </p>\n              <Button onClick={() => window.location.reload()}>\n                Retry Connection\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <Page>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Phone Numbers</h1>\n            <p className=\"text-muted-foreground\">\n              {viewMode === \"admin\" ? \"Manage phone number assignments for all users\" : \"Get free AI CRUITMENT phone numbers.\"}\n            </p>\n          </div>\n          {isSuperAdmin && (\n            <div className=\"flex gap-2 mr-4\">\n              <Button\n                variant={viewMode === \"user\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"user\")}\n                size=\"sm\"\n              >\n                User View\n              </Button>\n              <Button\n                variant={viewMode === \"admin\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"admin\")}\n                size=\"sm\"\n              >\n                Admin Management\n              </Button>\n              <Button\n                variant={viewMode === \"debug\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"debug\")}\n                size=\"sm\"\n              >\n                Debug\n              </Button>\n            </div>\n          )}\n          {viewMode === \"user\" && (\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Phone Number\n                </Button>\n              </DialogTrigger>\n            <DialogContent className=\"max-w-7xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create New Phone Number</DialogTitle>\n                <DialogDescription>\n                  Get a free AI CRUITMENT phone number.\n                </DialogDescription>\n              </DialogHeader>\n              <CreatePhoneNumberForm\n                onSuccess={() => setIsCreateDialogOpen(false)}\n                onCancel={() => setIsCreateDialogOpen(false)}\n              />\n            </DialogContent>\n          </Dialog>\n          )}\n        </div>\n\n        {/* Conditional Content Based on View Mode */}\n        {viewMode === \"admin\" ? (\n          <SuperAdminPhoneNumberManagement />\n        ) : viewMode === \"debug\" ? (\n          <PhoneNumberDebug />\n        ) : (\n          <>\n        <Dialog open={isSearchDialogOpen} onOpenChange={setIsSearchDialogOpen}>\n          {/* <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Buy Number\n            </Button>\n          </DialogTrigger> */}\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Search & Buy Phone Numbers</DialogTitle>\n              <DialogDescription>\n                Search for available phone numbers to purchase\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div>\n                  <Label htmlFor=\"country\">Country</Label>\n                  <Select\n                    value={searchParams.country}\n                    onValueChange={(value) => setSearchParams(prev => ({ ...prev, country: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"US\">United States</SelectItem>\n                      <SelectItem value=\"CA\">Canada</SelectItem>\n                      <SelectItem value=\"GB\">United Kingdom</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"areaCode\">Area Code</Label>\n                  <Input\n                    id=\"areaCode\"\n                    value={searchParams.areaCode || \"\"}\n                    onChange={(e) => setSearchParams(prev => ({ ...prev, areaCode: e.target.value }))}\n                    placeholder=\"e.g., 415\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"contains\">Contains</Label>\n                  <Input\n                    id=\"contains\"\n                    value={searchParams.contains || \"\"}\n                    onChange={(e) => setSearchParams(prev => ({ ...prev, contains: e.target.value }))}\n                    placeholder=\"e.g., 1234\"\n                  />\n                </div>\n                <div className=\"flex items-end\">\n                  <Button onClick={handleSearch} disabled={searchLoading} className=\"w-full\">\n                    {searchLoading ? <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" /> : <Search className=\"h-4 w-4 mr-2\" />}\n                    Search\n                  </Button>\n                </div>\n              </div>\n\n              {availableNumbers && (\n                <div className=\"border rounded-lg\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Number</TableHead>\n                        <TableHead>Location</TableHead>\n                        <TableHead>Capabilities</TableHead>\n                        <TableHead>Price/Month</TableHead>\n                        <TableHead>Action</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {availableNumbers.data?.map((number: AvailablePhoneNumber) => (\n                        <TableRow key={number.number}>\n                          <TableCell className=\"font-mono\">{number.number}</TableCell>\n                          <TableCell>\n                            {number.locality && number.region\n                              ? `${number.locality}, ${number.region}`\n                              : number.locality || number.region || \"Unknown Location\"\n                            }\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-1\">\n                              {number.capabilities?.voice && <Badge variant=\"outline\">Voice</Badge>}\n                              {number.capabilities?.sms && <Badge variant=\"outline\">SMS</Badge>}\n                              {number.capabilities?.mms && <Badge variant=\"outline\">MMS</Badge>}\n                              {!number.capabilities && <Badge variant=\"outline\">Unknown</Badge>}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {number.monthlyPrice !== undefined\n                              ? `$${number.monthlyPrice}`\n                              : \"Contact for pricing\"\n                            }\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleBuyNumber(number)}\n                              disabled={buyNumberMutation.isPending}\n                            >\n                              {buyNumberMutation.isPending ? (\n                                <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                              ) : (\n                                <ShoppingCart className=\"h-3 w-3 mr-1\" />\n                              )}\n                              Buy\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Phone Numbers List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Phone className=\"h-5 w-5\" />\n            Your Phone Numbers\n          </CardTitle>\n          <CardDescription>\n            Manage your purchased phone numbers and their assignments\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {numbersLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Number</TableHead>\n                  <TableHead>Created By</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Assigned Assistant</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {phoneNumbersData?.data?.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\n                      No phone numbers found. Purchase your first number to get started.\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  phoneNumbersData?.data?.map((phoneNumber: PhoneNumber) => (\n                    <TableRow key={phoneNumber.id}>\n                      <TableCell className=\"font-mono\">{phoneNumber.number || \"Unknown\"}</TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{phoneNumber.created_by || phoneNumber.user_name || \"Unknown User\"}</span>\n                          {phoneNumber.user_email && (\n                            <span className=\"text-xs text-muted-foreground\">{phoneNumber.user_email}</span>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(phoneNumber.status || \"inactive\")}</TableCell>\n                   \n                      <TableCell>\n                        {phoneNumber.assistantId ? (\n                          <Badge variant=\"secondary\">Assigned</Badge>\n                        ) : (\n                          <Badge variant=\"outline\">Unassigned</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditNumber(phoneNumber)}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleDeleteNumber(phoneNumber.id)}\n                            disabled={deleteNumberMutation.isPending}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Phone Number</DialogTitle>\n            <DialogDescription>\n              Update the phone number settings\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"friendlyName\">Friendly Name</Label>\n              <Input\n                id=\"friendlyName\"\n                value={editForm.friendlyName}\n                onChange={(e) => setEditForm(prev => ({ ...prev, friendlyName: e.target.value }))}\n                placeholder=\"Enter a friendly name...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"assistantId\">Assign to Assistant</Label>\n              <Select\n                value={editForm.assistantId}\n                onValueChange={(value) => setEditForm(prev => ({ ...prev, assistantId: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select an assistant\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"unassigned\">Unassigned</SelectItem>\n                  {assistants.map((assistant: any) => (\n                    <SelectItem key={assistant.id} value={assistant.id}>\n                      {assistant.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <Button\n              onClick={handleUpdateNumber}\n              disabled={updateNumberMutation.isPending}\n              className=\"w-full\"\n            >\n              {updateNumberMutation.isPending && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n              Update Phone Number\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n          </>\n        )}\n      </div>\n    </Page>\n  );\n};\n\nexport default PhoneNumbers;\n"],"names":["CreatePhoneNumberForm","onSuccess","onCancel","user","useAuth","isSuperAdmin","usePermissions","formData","setFormData","useState","phoneNumberOption","setPhoneNumberOption","isAdvancedOpen","setIsAdvancedOpen","queryClient","useQueryClient","assistantsData","assistantsLoading","useQuery","fetchAllAgentsComplete","failureCount","error","_a","assistants","createMutation","useMutation","data","importTwilioPhoneNumber","createPhoneNumber","message","toast","_b","handleInputChange","field","value","prev","validateForm","handleSubmit","e","submitData","jsx","CreditGuard","jsxs","Card","CardHeader","CardTitle","Phone","CardDescription","CardContent","Label","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Input","Bot","Loader2","Fragment","assistant","Button","SuperAdminPhoneNumberManagement","selectedPhoneNumber","setSelectedPhoneNumber","selectedUserId","setSelectedUserId","isAssignDialogOpen","setIsAssignDialogOpen","phoneNumbersData","numbersLoading","numbersError","getAllVapiPhoneNumbersForAdmin","usersData","usersLoading","getAllUsersWithRoles","assignMutation","phoneNumberId","userId","vapiId","axiosInstance","assignPhoneNumberToUser","unassignMutation","unassignPhoneNumber","handleAssignClick","phoneNumber","handleAssignSubmit","handleUnassign","phoneNumbers","users","Shield","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","Badge","UserMinus","UserPlus","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","Users","PhoneNumberDebug","allAssignments","assignmentsLoading","refetchAssignments","userNumbers","userLoading","refetchUser","regularNumbers","regularLoading","refetchRegular","handleRefreshAll","Bug","User","_c","_e","_d","id","_f","phone","_g","_h","_i","_j","_k","_l","PhoneNumbers","searchParams","setSearchParams","selectedNumber","setSelectedNumber","isSearchDialogOpen","setIsSearchDialogOpen","isEditDialogOpen","setIsEditDialogOpen","isCreateDialogOpen","setIsCreateDialogOpen","viewMode","setViewMode","editForm","setEditForm","getAllPhoneNumbers","React","availableNumbers","searchLoading","searchNumbers","searchAvailablePhoneNumbers","fetchAllAgents","buyNumberMutation","buyPhoneNumber","updateNumberMutation","updatePhoneNumber","deleteNumberMutation","deletePhoneNumber","handleSearch","handleBuyNumber","number","handleEditNumber","handleUpdateNumber","handleDeleteNumber","getStatusBadge","status","variants","Page","DialogTrigger","Plus","Search","ShoppingCart","Edit","Trash2"],"mappings":"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"}