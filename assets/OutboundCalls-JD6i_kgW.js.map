{"version":3,"mappings":"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","names":["OutboundCalls","isCreateDialogOpen","setIsCreateDialogOpen","useState","isBulkDialogOpen","setIsBulkDialogOpen","selectedCall","setSelectedCall","callForm","setCallForm","bulkPhoneNumbers","setBulkPhoneNumbers","useVapiAssistants","setUseVapiAssistants","playingRecordingId","setPlayingRecordingId","queryClient","useQueryClient","user","useAuth","callsData","callsLoading","callsError","useQuery","getAllOutboundCalls","assistantsData","assistantsLoading","fetchAllAgentsComplete","vapiAssistantsData","vapiAssistantsLoading","fetchAllAgentsFromVapi","phoneNumbersData","getAllPhoneNumbers","statsData","getCallStats","recordingsData","recordingsLoading","getAllRecordings","createCallMutation","useMutation","createOutboundCall","toast","error","_b","_a","createBulkCallsMutation","createBulkOutboundCalls","endCallMutation","endOutboundCall","handleCreateCall","handleBulkCalls","phoneNumbers","num","handleEndCall","callId","handleDownloadTranscript","getCallTranscript","handleDownloadRecording","downloadCallRecording","__vitePreload","handleDownloadRecordingFile","recording","downloadRecording","handleShareRecording","shareRecording","handleDeleteRecording","deleteRecording","getStatusBadge","status","variants","Badge","assistants","calls","recordings","isAssistantsLoading","jsxs","jsx","Card","CardContent","Button","Page","Dialog","DialogTrigger","PhoneCall","DialogContent","DialogHeader","DialogTitle","DialogDescription","Label","Switch","checked","prev","Loader2","Select","value","SelectTrigger","SelectValue","SelectContent","assistant","SelectItem","Textarea","e","Plus","Input","Tabs","TabsList","TabsTrigger","TabsContent","CardHeader","CardTitle","Phone","CardDescription","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","call","AudioPlayer","Square","Download","FileAudio","Share2","Eye","Trash","BarChart3","_d","_c","_e","_g","_f","_i","_h"],"ignoreList":[],"sources":["../../src/pages/OutboundCalls/OutboundCalls.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Loader2, Phone, Plus, Play, Square, Download, BarChart3, PhoneCall, FileAudio, Pause, Share2, Eye, Trash } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport AudioPlayer from \"@/components/AudioPlayer\";\nimport Page from \"@/components/Page\";\n\nimport {\n  createOutboundCall,\n  getAllOutboundCalls,\n  getOutboundCallById,\n  endOutboundCall,\n  getCallTranscript,\n  getCallRecording,\n  getCallStats,\n  createBulkOutboundCalls\n} from \"@/api/services/outbound/outboundService\";\nimport { fetchAllAgentsComplete, fetchAllAgentsFromVapi } from \"@/api/services/agents/agentService\";\nimport { getAllPhoneNumbers } from \"@/api/services/phoneNumbers/phoneNumberService\";\nimport {\n  getAllRecordings,\n  deleteRecording,\n  downloadRecording,\n  shareRecording,\n  type Recording\n} from \"@/api/services/recordings/recordingService\";\nimport type { OutboundCall, OutboundCallConfig } from \"@/api/services/outbound/outboundService\";\nimport { useAuth } from \"@/context/AuthContext\";\n\nconst OutboundCalls = () => {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isBulkDialogOpen, setIsBulkDialogOpen] = useState(false);\n  const [selectedCall, setSelectedCall] = useState<OutboundCall | null>(null);\n  const [callForm, setCallForm] = useState<OutboundCallConfig>({\n    assistantId: \"\",\n    phoneNumber: \"\",\n    firstMessage: \"\",\n    voicemailMessage: \"\",\n    maxDurationSeconds: 300,\n  });\n  const [bulkPhoneNumbers, setBulkPhoneNumbers] = useState(\"\");\n  const [useVapiAssistants, setUseVapiAssistants] = useState(false);\n  const [playingRecordingId, setPlayingRecordingId] = useState<string | null>(null);\n\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  // Fetch outbound calls\n  const { data: callsData, isLoading: callsLoading, error: callsError } = useQuery({\n    queryKey: [\"outboundCalls\", user?.id],\n    queryFn: () => getAllOutboundCalls(),\n    retry: 1,\n    enabled: !!user?.id,\n  });\n\n  // Fetch assistants for selection (Database)\n  const { data: assistantsData, isLoading: assistantsLoading } = useQuery({\n    queryKey: [\"assistants\", \"database\", user?.id],\n    queryFn: () => fetchAllAgentsComplete(\"\"),\n    retry: 1,\n    enabled: !useVapiAssistants && !!user?.id,\n  });\n\n  // Fetch assistants from VAPI\n  const { data: vapiAssistantsData, isLoading: vapiAssistantsLoading } = useQuery({\n    queryKey: [\"assistants\", \"vapi\", user?.id],\n    queryFn: () => fetchAllAgentsFromVapi(),\n    retry: 1,\n    enabled: useVapiAssistants && !!user?.id,\n  });\n\n  // Fetch phone numbers\n  const { data: phoneNumbersData } = useQuery({\n    queryKey: [\"phoneNumbers\", user?.id],\n    queryFn: () => getAllPhoneNumbers(),\n    retry: 1,\n    enabled: !!user?.id,\n  });\n\n  // Fetch call statistics\n  const { data: statsData } = useQuery({\n    queryKey: [\"callStats\", user?.id],\n    queryFn: () => getCallStats(),\n    retry: 1,\n    enabled: !!user?.id,\n  });\n\n  // Fetch all recordings\n  const { data: recordingsData, isLoading: recordingsLoading } = useQuery({\n    queryKey: [\"recordings\", \"outbound\", user?.id],\n    queryFn: () => getAllRecordings(1, 50), // Get first 50 recordings\n    retry: 1,\n    enabled: !!user?.id,\n  });\n\n  // Create outbound call mutation\n  const createCallMutation = useMutation({\n    mutationFn: createOutboundCall,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"outboundCalls\", user?.id] });\n      setIsCreateDialogOpen(false);\n      setCallForm({\n        assistantId: \"\",\n        phoneNumber: \"\",\n        firstMessage: \"\",\n        voicemailMessage: \"\",\n        maxDurationSeconds: 300,\n      });\n      toast.success(\"Outbound call initiated successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to create outbound call\");\n    },\n  });\n\n  // Create bulk calls mutation\n  const createBulkCallsMutation = useMutation({\n    mutationFn: createBulkOutboundCalls,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"outboundCalls\"] });\n      setIsBulkDialogOpen(false);\n      setBulkPhoneNumbers(\"\");\n      toast.success(\"Bulk outbound calls initiated successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to create bulk outbound calls\");\n    },\n  });\n\n  // End call mutation\n  const endCallMutation = useMutation({\n    mutationFn: endOutboundCall,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"outboundCalls\"] });\n      toast.success(\"Call ended successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to end call\");\n    },\n  });\n\n  const handleCreateCall = () => {\n    if (!callForm.assistantId || !callForm.phoneNumber) {\n      toast.error(\"Please select an assistant and enter a phone number\");\n      return;\n    }\n    createCallMutation.mutate(callForm);\n  };\n\n  const handleBulkCalls = () => {\n    if (!callForm.assistantId || !bulkPhoneNumbers.trim()) {\n      toast.error(\"Please select an assistant and enter phone numbers\");\n      return;\n    }\n\n    const phoneNumbers = bulkPhoneNumbers\n      .split('\\n')\n      .map(num => num.trim())\n      .filter(num => num.length > 0);\n\n    if (phoneNumbers.length === 0) {\n      toast.error(\"Please enter at least one phone number\");\n      return;\n    }\n\n    createBulkCallsMutation.mutate({\n      assistantId: callForm.assistantId,\n      phoneNumbers,\n      firstMessage: callForm.firstMessage,\n      voicemailMessage: callForm.voicemailMessage,\n      maxDurationSeconds: callForm.maxDurationSeconds,\n    });\n  };\n\n  const handleEndCall = (callId: string) => {\n    if (confirm(\"Are you sure you want to end this call?\")) {\n      endCallMutation.mutate(callId);\n    }\n  };\n\n  const handleDownloadTranscript = async (callId: string) => {\n    try {\n      await getCallTranscript(callId);\n    } catch (error) {\n      console.error(\"Error downloading transcript:\", error);\n    }\n  };\n\n  const handleDownloadRecording = async (callId: string) => {\n    try {\n      const { downloadCallRecording } = await import(\"@/api/services/outbound/outboundService\");\n      await downloadCallRecording(callId);\n    } catch (error) {\n      console.error(\"Error downloading recording:\", error);\n    }\n  };\n\n  // Recording action handlers\n  const handlePlayRecording = (recordingId: string) => {\n    if (playingRecordingId === recordingId) {\n      setPlayingRecordingId(null);\n    } else {\n      setPlayingRecordingId(recordingId);\n    }\n  };\n\n  const handleDownloadRecordingFile = (recording: Recording) => {\n    downloadRecording(recording.id, `${recording.recordingName}.${recording.format}`);\n  };\n\n  const handleShareRecording = (recording: Recording) => {\n    shareRecording(recording.id, { expiresIn: \"7d\" });\n  };\n\n  const handleDeleteRecording = (recording: Recording) => {\n    if (confirm(`Are you sure you want to delete \"${recording.recordingName}\"?`)) {\n      deleteRecording(recording.id).then(() => {\n        queryClient.invalidateQueries({ queryKey: [\"recordings\"] });\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      queued: \"outline\",\n      ringing: \"secondary\",\n      \"in-progress\": \"default\",\n      forwarding: \"secondary\",\n      ended: \"destructive\",\n    };\n    return <Badge variant={variants[status] || \"outline\"}>{status}</Badge>;\n  };\n\n  // Get assistants from the appropriate source\n  const assistants = useVapiAssistants\n    ? (vapiAssistantsData?.data || [])\n    : (assistantsData?.data || []);\n\n  const phoneNumbers = phoneNumbersData?.data || [];\n  const calls = callsData?.data || [];\n  const recordings = recordingsData?.recordings || [];\n  const isAssistantsLoading = useVapiAssistants ? vapiAssistantsLoading : assistantsLoading;\n\n  if (callsError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Outbound Calls</h1>\n          <p className=\"text-muted-foreground\">\n            Make and manage outbound calls with your AI assistants\n          </p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground mb-4\">\n                Unable to connect to the backend API. Please ensure the backend server is running.\n              </p>\n              <Button onClick={() => window.location.reload()}>\n                Retry Connection\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <Page>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Outbound Calls</h1>\n            <p className=\"text-muted-foreground\">\n              Make and manage outbound calls with your AI assistants\n            </p>\n          </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isBulkDialogOpen} onOpenChange={setIsBulkDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <PhoneCall className=\"h-4 w-4 mr-2\" />\n                Bulk Calls\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create Bulk Outbound Calls</DialogTitle>\n                <DialogDescription>\n                  Create multiple outbound calls at once\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"bulk-assistant-source\">Assistant Source</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor=\"bulk-assistant-source\" className=\"text-sm\">Database</Label>\n                    <Switch\n                      id=\"bulk-assistant-source\"\n                      checked={useVapiAssistants}\n                      onCheckedChange={(checked) => {\n                        setUseVapiAssistants(checked);\n                        setCallForm(prev => ({ ...prev, assistantId: \"\" })); // Reset selection\n                      }}\n                    />\n                    <Label htmlFor=\"bulk-assistant-source\" className=\"text-sm\">VAPI</Label>\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"bulk-assistant\">\n                    Assistant {isAssistantsLoading && <Loader2 className=\"h-3 w-3 animate-spin inline ml-1\" />}\n                  </Label>\n                  <Select\n                    value={callForm.assistantId}\n                    onValueChange={(value) => setCallForm(prev => ({ ...prev, assistantId: value }))}\n                    disabled={isAssistantsLoading}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={\n                        isAssistantsLoading\n                          ? \"Loading assistants...\"\n                          : assistants.length === 0\n                            ? \"No assistants found\"\n                            : \"Select an assistant\"\n                      } />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {assistants.map((assistant: any) => (\n                        <SelectItem key={assistant.id} value={assistant.id}>\n                          {assistant.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {assistants.length === 0 && !isAssistantsLoading && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {useVapiAssistants\n                        ? \"No assistants found in VAPI. Try switching to Database source.\"\n                        : \"No assistants found in database. Try creating an assistant first.\"}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"bulk-numbers\">Phone Numbers (one per line)</Label>\n                  <Textarea\n                    id=\"bulk-numbers\"\n                    value={bulkPhoneNumbers}\n                    onChange={(e) => setBulkPhoneNumbers(e.target.value)}\n                    placeholder=\"+1234567890&#10;+1987654321&#10;+1555123456\"\n                    rows={5}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"bulk-first-message\">First Message (Optional)</Label>\n                  <Textarea\n                    id=\"bulk-first-message\"\n                    value={callForm.firstMessage || \"\"}\n                    onChange={(e) => setCallForm(prev => ({ ...prev, firstMessage: e.target.value }))}\n                    placeholder=\"Custom greeting message...\"\n                  />\n                </div>\n                <Button\n                  onClick={handleBulkCalls}\n                  disabled={createBulkCallsMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {createBulkCallsMutation.isPending && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n                  Create Bulk Calls\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Make Call\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create Outbound Call</DialogTitle>\n                <DialogDescription>\n                  Start a new outbound call with an AI assistant\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"assistant-source\">Assistant Source</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor=\"assistant-source\" className=\"text-sm\">Database</Label>\n                    <Switch\n                      id=\"assistant-source\"\n                      checked={useVapiAssistants}\n                      onCheckedChange={(checked) => {\n                        setUseVapiAssistants(checked);\n                        setCallForm(prev => ({ ...prev, assistantId: \"\" })); // Reset selection\n                      }}\n                    />\n                    <Label htmlFor=\"assistant-source\" className=\"text-sm\">VAPI</Label>\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"assistant\">\n                    Assistant {isAssistantsLoading && <Loader2 className=\"h-3 w-3 animate-spin inline ml-1\" />}\n                  </Label>\n                  <Select\n                    value={callForm.assistantId}\n                    onValueChange={(value) => setCallForm(prev => ({ ...prev, assistantId: value }))}\n                    disabled={isAssistantsLoading}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder={\n                        isAssistantsLoading\n                          ? \"Loading assistants...\"\n                          : assistants.length === 0\n                            ? \"No assistants found\"\n                            : \"Select an assistant\"\n                      } />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {assistants.map((assistant: any) => (\n                        <SelectItem key={assistant.id} value={assistant.id}>\n                          {assistant.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {assistants.length === 0 && !isAssistantsLoading && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {useVapiAssistants\n                        ? \"No assistants found in VAPI. Try switching to Database source.\"\n                        : \"No assistants found in database. Try creating an assistant first.\"}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                  <Input\n                    id=\"phoneNumber\"\n                    value={callForm.phoneNumber}\n                    onChange={(e) => setCallForm(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                    placeholder=\"+1234567890\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"firstMessage\">First Message (Optional)</Label>\n                  <Textarea\n                    id=\"firstMessage\"\n                    value={callForm.firstMessage || \"\"}\n                    onChange={(e) => setCallForm(prev => ({ ...prev, firstMessage: e.target.value }))}\n                    placeholder=\"Custom greeting message...\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"voicemailMessage\">Voicemail Message (Optional)</Label>\n                  <Textarea\n                    id=\"voicemailMessage\"\n                    value={callForm.voicemailMessage || \"\"}\n                    onChange={(e) => setCallForm(prev => ({ ...prev, voicemailMessage: e.target.value }))}\n                    placeholder=\"Message to leave if voicemail is detected...\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"maxDuration\">Max Duration (seconds)</Label>\n                  <Input\n                    id=\"maxDuration\"\n                    type=\"number\"\n                    value={callForm.maxDurationSeconds}\n                    onChange={(e) => setCallForm(prev => ({ ...prev, maxDurationSeconds: parseInt(e.target.value) }))}\n                    min=\"30\"\n                    max=\"3600\"\n                  />\n                </div>\n                <Button\n                  onClick={handleCreateCall}\n                  disabled={createCallMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {createCallMutation.isPending && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n                  Start Call\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"calls\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"calls\">Active Calls</TabsTrigger>\n          <TabsTrigger value=\"recordings\">All Recordings</TabsTrigger>\n          <TabsTrigger value=\"history\">Call History</TabsTrigger>\n          <TabsTrigger value=\"stats\">Statistics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"calls\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Phone className=\"h-5 w-5\" />\n                Outbound Calls\n              </CardTitle>\n              <CardDescription>\n                Manage your outbound calls and view their status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {callsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Phone Number</TableHead>\n                      <TableHead>Assistant</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Duration</TableHead>\n                      <TableHead>Recording</TableHead>\n                      <TableHead>Started</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {calls.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center text-muted-foreground\">\n                          No outbound calls found. Create your first call to get started.\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      calls.map((call: OutboundCall) => (\n                        <TableRow key={call.id}>\n                          <TableCell className=\"font-mono\">{call.phoneNumber}</TableCell>\n                          <TableCell>{call.assistantId}</TableCell>\n                          <TableCell>{getStatusBadge(call.status)}</TableCell>\n                          <TableCell>\n                            {call.duration ? `${Math.floor(call.duration / 60)}:${(call.duration % 60).toString().padStart(2, '0')}` : \"-\"}\n                          </TableCell>\n                          <TableCell>\n                            {call.status === \"ended\" || call.recording ? (\n                              <AudioPlayer\n                                src={call.recording || `/api/outboundcall/recording/${call.id}`}\n                                title={`Call Recording - ${call.phoneNumber}`}\n                                duration={call.duration ? `${Math.floor(call.duration / 60)}:${(call.duration % 60).toString().padStart(2, '0')}` : \"0:00\"}\n                                compact={true}\n                                onPlay={() => setPlayingRecordingId(call.id)}\n                                onPause={() => setPlayingRecordingId(null)}\n                              />\n                            ) : call.status === \"in-progress\" ? (\n                              <span className=\"text-muted-foreground text-sm\">Recording...</span>\n                            ) : (\n                              <span className=\"text-muted-foreground text-sm\">No recording</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {call.startedAt ? new Date(call.startedAt).toLocaleString() : \"-\"}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              {call.status === \"in-progress\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleEndCall(call.id)}\n                                  disabled={endCallMutation.isPending}\n                                >\n                                  <Square className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {call.transcript && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleDownloadTranscript(call.id)}\n                                >\n                                  <Download className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {(call.status === \"ended\" || call.recording) && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleDownloadRecording(call.id)}\n                                  title=\"Download Recording\"\n                                >\n                                  <Download className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"recordings\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileAudio className=\"h-5 w-5\" />\n                All Call Recordings\n              </CardTitle>\n              <CardDescription>\n                View and manage all call recordings with inline playback\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {recordingsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Recording Name</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Duration</TableHead>\n                      <TableHead>Audio Player</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {recordings.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\n                          No recordings found. Recordings will appear here after calls are completed.\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      recordings.map((recording: Recording) => (\n                        <TableRow key={recording.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{recording.recordingName}</div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                ID: {recording.id}\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{recording.type}</Badge>\n                          </TableCell>\n                          <TableCell>{recording.duration}</TableCell>\n                          <TableCell>\n                            <AudioPlayer\n                              src={`/api/recordings/${recording.id}/stream`}\n                              title={recording.recordingName}\n                              duration={recording.duration}\n                              compact={true}\n                              onPlay={() => setPlayingRecordingId(recording.id)}\n                              onPause={() => setPlayingRecordingId(null)}\n                            />\n                          </TableCell>\n                          <TableCell>\n                            {new Date(recording.date).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDownloadRecordingFile(recording)}\n                                title=\"Download Recording\"\n                              >\n                                <Download className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleShareRecording(recording)}\n                                title=\"Share Recording\"\n                              >\n                                <Share2 className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => window.open(`/recordings/${recording.id}`, '_blank')}\n                                title=\"View Details\"\n                              >\n                                <Eye className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDeleteRecording(recording)}\n                                title=\"Delete Recording\"\n                              >\n                                <Trash className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Call History</CardTitle>\n              <CardDescription>View completed and failed calls</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Call history will be displayed here.</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"stats\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Calls</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {statsData?.data?.totalCalls?.toLocaleString() || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Successful Calls</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {statsData?.data?.successfulCalls?.toLocaleString() || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Avg Duration</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {statsData?.data?.averageDuration ? `${Math.floor(statsData.data.averageDuration / 60)}:${(statsData.data.averageDuration % 60).toString().padStart(2, '0')}` : \"0:00\"}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Cost</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  ${statsData?.data?.totalCost?.toFixed(2) || \"0.00\"}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Recordings</CardTitle>\n                <FileAudio className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {recordingsData?.pagination?.totalRecordings?.toLocaleString() || recordings.length}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n      </div>\n    </Page>\n  );\n};\n\nexport default OutboundCalls;\n"],"file":"assets/OutboundCalls-JD6i_kgW.js"}