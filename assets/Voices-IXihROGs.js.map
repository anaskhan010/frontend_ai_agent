{"version":3,"file":"Voices-IXihROGs.js","sources":["../../src/api/services/voices/voiceService.ts","../../src/pages/Voices/Voices.tsx"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface VoiceProvider {\n  name: string;\n  voices: Voice[];\n}\n\nexport interface Voice {\n  id: string;\n  name: string;\n  provider: string;\n  gender?: string;\n  accent?: string;\n  language?: string;\n  description?: string;\n  previewUrl?: string;\n}\n\nexport interface VoiceConfig {\n  provider: string;\n  voiceId: string;\n  speed?: number;\n  pitch?: number;\n  volume?: number;\n  stability?: number;\n  similarityBoost?: number;\n  style?: number;\n  useSpeakerBoost?: boolean;\n}\n\nexport interface VoiceStats {\n  totalSynthesis: number;\n  totalCharacters: number;\n  averageLatency: number;\n  errorRate: number;\n  costBreakdown: {\n    provider: string;\n    cost: number;\n  }[];\n}\n\n// Get all available voices\nexport async function getAvailableVoices() {\n  try {\n    const res = await axiosInstance.get(\"/api/voices/available\");\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching available voices:\", error);\n    toast.error(\"Failed to fetch available voices\");\n    throw error;\n  }\n}\n\n// Create voice configuration\nexport async function createVoiceConfig(data: VoiceConfig) {\n  try {\n    const res = await axiosInstance.post(\"/api/voices/config\", data);\n    toast.success(\"Voice configuration created successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error creating voice config:\", error);\n    const message = error.response?.data?.message || \"Failed to create voice configuration\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Test voice synthesis\nexport async function testVoiceSynthesis(data: {\n  provider: string;\n  voiceId: string;\n  text: string;\n  speed?: number;\n  pitch?: number;\n}) {\n  try {\n    const res = await axiosInstance.post(\"/api/voices/test\", data);\n    toast.success(\"Voice test completed successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error testing voice:\", error);\n    const message = error.response?.data?.message || \"Failed to test voice\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get voice usage statistics\nexport async function getVoiceStats() {\n  try {\n    const res = await axiosInstance.get(\"/api/voices/stats\");\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching voice stats:\", error);\n    toast.error(\"Failed to fetch voice statistics\");\n    throw error;\n  }\n}\n\n// Get voices by provider\nexport async function getVoicesByProvider(provider: string) {\n  try {\n    const res = await axiosInstance.get(`/api/voices/provider/${provider}`);\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching voices by provider:\", error);\n    toast.error(\"Failed to fetch voices\");\n    throw error;\n  }\n}\n\n// Clone voice (for supported providers)\nexport async function cloneVoice(data: {\n  provider: string;\n  name: string;\n  description?: string;\n  files: File[];\n}) {\n  try {\n    const formData = new FormData();\n    formData.append(\"provider\", data.provider);\n    formData.append(\"name\", data.name);\n    if (data.description) {\n      formData.append(\"description\", data.description);\n    }\n    data.files.forEach((file, index) => {\n      formData.append(`files[${index}]`, file);\n    });\n\n    const res = await axiosInstance.post(\"/api/voices/clone\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    toast.success(\"Voice cloned successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error cloning voice:\", error);\n    const message = error.response?.data?.message || \"Failed to clone voice\";\n    toast.error(message);\n    throw error;\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport secureLocalStorage from \"react-secure-storage\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, Play, Pause, Volume2, BarChart3, Mic } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport Page from \"@/components/Page\";\n\nimport {\n  getAvailableVoices,\n  testVoiceSynthesis,\n  getVoiceStats,\n  createVoiceConfig,\n  cloneVoice\n} from \"@/api/services/voices/voiceService\";\nimport axiosInstance from \"@/api/axios/axiosInstance\";\nimport type { VoiceProvider, VoiceConfig } from \"@/api/services/voices/voiceService\";\n\nconst Voices = () => {\n  const [selectedProvider, setSelectedProvider] = useState<string>(\"\");\n  const [selectedVoice, setSelectedVoice] = useState<string>(\"\");\n  const [testText, setTestText] = useState(\"Hello, this is a test of the voice synthesis.\");\n  const [speed, setSpeed] = useState(1.0);\n  const [pitch, setPitch] = useState(1.0);\n  const [isTestDialogOpen, setIsTestDialogOpen] = useState(false);\n  const [isConfigDialogOpen, setIsConfigDialogOpen] = useState(false);\n  const [isCloneDialogOpen, setIsCloneDialogOpen] = useState(false);\n  const [cloneFiles, setCloneFiles] = useState<File[]>([]);\n  const [cloneName, setCloneName] = useState(\"\");\n  const [cloneDescription, setCloneDescription] = useState(\"\");\n\n  const queryClient = useQueryClient();\n\n  // Fetch available voices\n  const { data: voicesData, isLoading: voicesLoading, error: voicesError } = useQuery({\n    queryKey: [\"voices\", \"available\"],\n    queryFn: getAvailableVoices,\n    retry: 1,\n  });\n\n  // Fetch voice statistics\n  const { data: statsData, isLoading: statsLoading } = useQuery({\n    queryKey: [\"voices\", \"stats\"],\n    queryFn: getVoiceStats,\n    retry: 1,\n  });\n\n  // Test voice mutation\n  const testVoiceMutation = useMutation({\n    mutationFn: testVoiceSynthesis,\n    onSuccess: (data) => {\n      toast.success(\"Voice test completed successfully\");\n      console.log(\"Test result:\", data);\n    },\n    onError: (error: any) => {\n      console.error(\"Voice test failed:\", error);\n      toast.error(error.response?.data?.message || \"Voice test failed\");\n    },\n  });\n\n  // Create voice config mutation\n  const createConfigMutation = useMutation({\n    mutationFn: createVoiceConfig,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"voices\"] });\n      setIsConfigDialogOpen(false);\n      toast.success(\"Voice configuration created successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to create voice configuration\");\n    },\n  });\n\n  // Clone voice mutation\n  const cloneVoiceMutation = useMutation({\n    mutationFn: cloneVoice,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"voices\"] });\n      setIsCloneDialogOpen(false);\n      setCloneFiles([]);\n      setCloneName(\"\");\n      setCloneDescription(\"\");\n      toast.success(\"Voice cloned successfully\");\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.message || \"Failed to clone voice\");\n    },\n  });\n\n  const handleTestVoice = () => {\n    if (!selectedProvider || !selectedVoice) {\n      toast.error(\"Please select a provider and voice\");\n      return;\n    }\n\n    testVoiceMutation.mutate({\n      provider: selectedProvider,\n      voiceId: selectedVoice,\n      text: testText,\n      speed,\n      pitch,\n    });\n  };\n\n  const handleCreateConfig = (data: VoiceConfig) => {\n    createConfigMutation.mutate(data);\n  };\n\n  const handleCloneVoice = () => {\n    if (!selectedProvider || !cloneName || cloneFiles.length === 0) {\n      toast.error(\"Please fill in all required fields and upload audio files\");\n      return;\n    }\n\n    cloneVoiceMutation.mutate({\n      provider: selectedProvider,\n      name: cloneName,\n      description: cloneDescription,\n      files: cloneFiles,\n    });\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setCloneFiles(files);\n  };\n\n  const providers = voicesData?.data || {};\n\n  if (voicesError) {\n    return (\n      <Page>\n        <div className=\"space-y-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Voice Synthesis</h1>\n            <p className=\"text-muted-foreground\">\n              Manage and configure text-to-speech voices from different providers\n            </p>\n          </div>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-muted-foreground mb-4\">\n                  Unable to connect to the backend API. Please ensure the backend server is running.\n                </p>\n                <Button onClick={() => window.location.reload()}>\n                  Retry Connection\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </Page>\n    );\n  }\n\n  return (\n    <Page>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Voice Synthesis</h1>\n            <p className=\"text-muted-foreground\">\n              Manage and configure text-to-speech voices from different providers\n            </p>\n          </div>\n        <div className=\"flex gap-2\">\n         \n\n        \n\n          {/* <Dialog open={isConfigDialogOpen} onOpenChange={setIsConfigDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Volume2 className=\"h-4 w-4 mr-2\" />\n                Create Config\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create Voice Configuration</DialogTitle>\n                <DialogDescription>\n                  Create a new voice configuration for your assistants\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Voice configuration form will be implemented here.\n                </p>\n              </div>\n            </DialogContent>\n          </Dialog> */}\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"providers\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"providers\">Available Voices</TabsTrigger>\n          <TabsTrigger value=\"stats\">Statistics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"providers\" className=\"space-y-4\">\n          {voicesLoading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : (\n            <div className=\"grid gap-6\">\n              {Object.keys(providers).length === 0 ? (\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <p className=\"text-muted-foreground\">\n                        No voices available. Please check your backend configuration.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                Object.entries(providers).map(([providerName, voices]: [string, any]) => (\n                  <Card key={providerName}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Volume2 className=\"h-5 w-5\" />\n                        {providerName}\n                      </CardTitle>\n                      <CardDescription>\n                        {Array.isArray(voices) ? voices.length : 0} voices available\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                        {Array.isArray(voices) && voices.map((voice: any) => (\n                          <Card key={voice.id || voice.name} className=\"p-4\">\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-center justify-between\">\n                                <h4 className=\"font-semibold\">{voice.name}</h4>\n                                <div className=\"flex gap-1\">\n                                  {voice.gender && (\n                                    <Badge variant=\"secondary\">{voice.gender}</Badge>\n                                  )}\n                                  {voice.accent && (\n                                    <Badge variant=\"outline\">{voice.accent}</Badge>\n                                  )}\n                                </div>\n                              </div>\n                              {voice.description && (\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {voice.description}\n                                </p>\n                              )}\n                              {voice.language && (\n                                <div className=\"text-xs text-muted-foreground\">\n                                  Language: {voice.language}\n                                </div>\n                              )}\n                              {voice.previewUrl && (\n                                <VoicePreviewButton\n                                  previewUrl={voice.previewUrl}\n                                  voiceName={voice.name}\n                                />\n                              )}\n                            </div>\n                          </Card>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"stats\" className=\"space-y-4\">\n          {statsLoading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Synthesis</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {statsData?.data?.totalSynthesis?.toLocaleString() || 0}\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Characters</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {statsData?.data?.totalCharacters?.toLocaleString() || 0}\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Avg Latency</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {statsData?.data?.averageLatency || 0}ms\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Error Rate</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {((statsData?.data?.errorRate || 0) * 100).toFixed(1)}%\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n      </div>\n    </Page>\n  );\n};\n\n// Voice Preview Button Component\nconst VoicePreviewButton = ({ previewUrl, voiceName }: { previewUrl: string; voiceName: string }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);\n  const [hasError, setHasError] = useState(false);\n\n  // Cleanup function\n  const cleanup = () => {\n    if (audio) {\n      audio.pause();\n      audio.removeEventListener('loadstart', handleLoadStart);\n      audio.removeEventListener('canplay', handleCanPlay);\n      audio.removeEventListener('ended', handleEnded);\n      audio.removeEventListener('error', handleError);\n      audio.removeEventListener('loadeddata', handleLoadedData);\n      setAudio(null);\n    }\n  };\n\n  // Event handlers\n  const handleLoadStart = () => setIsLoading(true);\n  const handleCanPlay = () => setIsLoading(false);\n  const handleLoadedData = () => setIsLoading(false);\n  const handleEnded = () => {\n    setIsPlaying(false);\n    setIsLoading(false);\n  };\n  const handleError = (e: Event) => {\n    console.error('Audio error for', voiceName, ':', e);\n    setIsLoading(false);\n    setIsPlaying(false);\n    setHasError(true);\n    toast.error(`Preview not available for ${voiceName}`);\n  };\n\n  const handlePlayPause = async () => {\n    if (isPlaying && audio) {\n      audio.pause();\n      setIsPlaying(false);\n      return;\n    }\n\n    // Reset error state\n    setHasError(false);\n\n    try {\n      setIsLoading(true);\n\n      // Cleanup previous audio\n      cleanup();\n\n      // Validate URL\n      if (!previewUrl || previewUrl.trim() === '') {\n        throw new Error('No preview URL available');\n      }\n\n      // Check if this is a dynamic preview URL (starts with /api/voices/preview)\n      if (previewUrl.startsWith('/api/voices/preview')) {\n        // Handle dynamic preview generation\n        await handleDynamicPreview(previewUrl);\n      } else {\n        // Handle static preview URLs\n        await handleStaticPreview(previewUrl);\n      }\n\n    } catch (error) {\n      console.error('Error playing voice preview:', error);\n      setIsLoading(false);\n      setIsPlaying(false);\n      setHasError(true);\n\n      // More specific error messages\n      if (error instanceof Error) {\n        if (error.message.includes('timeout')) {\n          toast.error(`Preview timeout for ${voiceName}`);\n        } else if (error.message.includes('No preview URL')) {\n          toast.error(`No preview available for ${voiceName}`);\n        } else if (error.message.includes('Voice preview not available')) {\n          toast.error(`${voiceName} preview is currently unavailable`);\n        } else {\n          toast.error(`Preview unavailable for ${voiceName}`);\n        }\n      } else {\n        toast.error(`Failed to play preview for ${voiceName}`);\n      }\n    }\n  };\n\n  // Handle dynamic preview generation\n  const handleDynamicPreview = async (previewUrl: string) => {\n    try {\n      console.log('🔄 Making request to:', previewUrl);\n\n      // Use axiosInstance which already has proper authentication setup\n      const response = await axiosInstance.get(previewUrl);\n\n      console.log('🎵 Voice preview response received:', response.data);\n      console.log('🔍 Response analysis:');\n      console.log('  - success:', response.data.success);\n      console.log('  - audioUrl:', response.data.audioUrl);\n      console.log('  - note:', response.data.note);\n      console.log('  - message:', response.data.message);\n\n      if (response.data.success && response.data.audioUrl) {\n        // Play the generated audio\n        console.log('✅ Path 1: Playing audio from:', response.data.audioUrl);\n        await handleStaticPreview(response.data.audioUrl);\n        toast.success(`Playing ${voiceName} preview`);\n      } else if (response.data.note) {\n        // Show informative message about preview status (don't throw error)\n        console.log('✅ Path 2: Showing note toast:', response.data.note);\n        toast.info(response.data.note);\n        setIsLoading(false);\n        setHasError(false);\n        return; // Exit gracefully without throwing error\n      } else if (response.data.message && !response.data.audioUrl) {\n        // Show backend message when no audio URL\n        console.log('✅ Path 3: Showing message toast:', response.data.message);\n        toast.info(response.data.message);\n        setIsLoading(false);\n        setHasError(false);\n        return; // Exit gracefully without throwing error\n      } else {\n        // Fallback error\n        console.log('❌ Path 4: No valid response found');\n        console.log('❌ Full response:', JSON.stringify(response.data, null, 2));\n        throw new Error('Voice preview not available');\n      }\n    } catch (error: any) {\n      console.error('❌ Error in handleDynamicPreview:', error);\n      if (error.response?.status === 401) {\n        throw new Error('Authentication failed - please log in again');\n      }\n      throw error;\n    }\n  };\n\n  // Handle static preview URLs\n  const handleStaticPreview = async (audioUrl: string) => {\n    const newAudio = new Audio();\n\n    // Set up event listeners before setting src\n    newAudio.addEventListener('loadstart', handleLoadStart);\n    newAudio.addEventListener('canplay', handleCanPlay);\n    newAudio.addEventListener('loadeddata', handleLoadedData);\n    newAudio.addEventListener('ended', handleEnded);\n    newAudio.addEventListener('error', handleError);\n\n    // Configure audio settings\n    newAudio.preload = 'metadata';\n    newAudio.crossOrigin = 'anonymous';\n\n    setAudio(newAudio);\n\n    // Set source and load\n    newAudio.src = audioUrl;\n    newAudio.load();\n\n    // Wait for audio to be ready\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Audio load timeout'));\n      }, 10000); // 10 second timeout\n\n      newAudio.addEventListener('canplay', () => {\n        clearTimeout(timeout);\n        resolve(void 0);\n      }, { once: true });\n\n      newAudio.addEventListener('error', () => {\n        clearTimeout(timeout);\n        reject(new Error('Audio load failed'));\n      }, { once: true });\n    });\n\n    // Play the audio\n    await newAudio.play();\n    setIsPlaying(true);\n    setIsLoading(false);\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanup;\n  }, []);\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"w-full\"\n      onClick={handlePlayPause}\n      disabled={isLoading || hasError}\n    >\n      {isLoading ? (\n        <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n      ) : isPlaying ? (\n        <Pause className=\"h-3 w-3 mr-1\" />\n      ) : hasError ? (\n        <Volume2 className=\"h-3 w-3 mr-1 opacity-50\" />\n      ) : (\n        <Play className=\"h-3 w-3 mr-1\" />\n      )}\n      {isLoading ? 'Loading...' : isPlaying ? 'Pause' : hasError ? 'Unavailable' : 'Preview'}\n    </Button>\n  );\n};\n\nexport default Voices;\n"],"names":["getAvailableVoices","axiosInstance","error","toast","createVoiceConfig","data","res","message","_b","_a","testVoiceSynthesis","getVoiceStats","cloneVoice","formData","file","index","Voices","selectedProvider","setSelectedProvider","useState","selectedVoice","setSelectedVoice","testText","setTestText","speed","setSpeed","pitch","setPitch","isTestDialogOpen","setIsTestDialogOpen","isConfigDialogOpen","setIsConfigDialogOpen","isCloneDialogOpen","setIsCloneDialogOpen","cloneFiles","setCloneFiles","cloneName","setCloneName","cloneDescription","setCloneDescription","queryClient","useQueryClient","voicesData","voicesLoading","voicesError","useQuery","statsData","statsLoading","useMutation","providers","jsx","Page","jsxs","Card","CardContent","Button","Tabs","TabsList","TabsTrigger","TabsContent","Loader2","providerName","voices","CardHeader","CardTitle","Volume2","CardDescription","voice","Badge","VoicePreviewButton","BarChart3","_d","_c","_e","_f","previewUrl","voiceName","isPlaying","setIsPlaying","isLoading","setIsLoading","audio","setAudio","hasError","setHasError","cleanup","handleLoadStart","handleCanPlay","handleEnded","handleError","handleLoadedData","e","handlePlayPause","handleDynamicPreview","handleStaticPreview","response","audioUrl","newAudio","resolve","reject","timeout","useEffect","Pause","Play"],"mappings":"0kBA4CA,eAAsBA,IAAqB,CACrC,GAAA,CAEF,OADY,MAAMC,EAAc,IAAI,uBAAuB,GAChD,WACJC,EAAO,CACN,cAAA,MAAM,mCAAoCA,CAAK,EACvDC,EAAM,MAAM,kCAAkC,EACxCD,CAAA,CAEV,CAGA,eAAsBE,GAAkBC,EAAmB,SACrD,GAAA,CACF,MAAMC,EAAM,MAAML,EAAc,KAAK,qBAAsBI,CAAI,EAC/DF,OAAAA,EAAM,QAAQ,0CAA0C,EACjDG,EAAI,WACJJ,EAAY,CACX,QAAA,MAAM,+BAAgCA,CAAK,EACnD,MAAMK,IAAUC,GAAAC,EAAAP,EAAM,WAAN,YAAAO,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,uCACjDL,MAAAA,EAAM,MAAMI,CAAO,EACbL,CAAA,CAEV,CAGA,eAAsBQ,GAAmBL,EAMtC,SACG,GAAA,CACF,MAAMC,EAAM,MAAML,EAAc,KAAK,mBAAoBI,CAAI,EAC7DF,OAAAA,EAAM,QAAQ,mCAAmC,EAC1CG,EAAI,WACJJ,EAAY,CACX,QAAA,MAAM,uBAAwBA,CAAK,EAC3C,MAAMK,IAAUC,GAAAC,EAAAP,EAAM,WAAN,YAAAO,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,uBACjDL,MAAAA,EAAM,MAAMI,CAAO,EACbL,CAAA,CAEV,CAGA,eAAsBS,IAAgB,CAChC,GAAA,CAEF,OADY,MAAMV,EAAc,IAAI,mBAAmB,GAC5C,WACJC,EAAO,CACN,cAAA,MAAM,8BAA+BA,CAAK,EAClDC,EAAM,MAAM,kCAAkC,EACxCD,CAAA,CAEV,CAeA,eAAsBU,GAAWP,EAK9B,SACG,GAAA,CACI,MAAAQ,EAAW,IAAI,SACZA,EAAA,OAAO,WAAYR,EAAK,QAAQ,EAChCQ,EAAA,OAAO,OAAQR,EAAK,IAAI,EAC7BA,EAAK,aACEQ,EAAA,OAAO,cAAeR,EAAK,WAAW,EAEjDA,EAAK,MAAM,QAAQ,CAACS,EAAMC,IAAU,CAClCF,EAAS,OAAO,SAASE,CAAK,IAAKD,CAAI,CAAA,CACxC,EAED,MAAMR,EAAM,MAAML,EAAc,KAAK,oBAAqBY,EAAU,CAClE,QAAS,CACP,eAAgB,qBAAA,CAClB,CACD,EACDV,OAAAA,EAAM,QAAQ,2BAA2B,EAClCG,EAAI,WACJJ,EAAY,CACX,QAAA,MAAM,uBAAwBA,CAAK,EAC3C,MAAMK,IAAUC,GAAAC,EAAAP,EAAM,WAAN,YAAAO,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,wBACjDL,MAAAA,EAAM,MAAMI,CAAO,EACbL,CAAA,CAEV,CCtHA,MAAMc,GAAS,IAAM,iBACnB,KAAM,CAACC,EAAkBC,CAAmB,EAAIC,EAAAA,SAAiB,EAAE,EAC7D,CAACC,EAAeC,CAAgB,EAAIF,EAAAA,SAAiB,EAAE,EACvD,CAACG,EAAUC,CAAW,EAAIJ,EAAAA,SAAS,+CAA+C,EAClF,CAACK,EAAOC,CAAQ,EAAIN,EAAAA,SAAS,CAAG,EAChC,CAACO,EAAOC,CAAQ,EAAIR,EAAAA,SAAS,CAAG,EAChC,CAACS,EAAkBC,CAAmB,EAAIV,EAAAA,SAAS,EAAK,EACxD,CAACW,EAAoBC,CAAqB,EAAIZ,EAAAA,SAAS,EAAK,EAC5D,CAACa,EAAmBC,CAAoB,EAAId,EAAAA,SAAS,EAAK,EAC1D,CAACe,EAAYC,CAAa,EAAIhB,EAAAA,SAAiB,CAAA,CAAE,EACjD,CAACiB,EAAWC,CAAY,EAAIlB,EAAAA,SAAS,EAAE,EACvC,CAACmB,EAAkBC,CAAmB,EAAIpB,EAAAA,SAAS,EAAE,EAErDqB,EAAcC,GAAe,EAG7B,CAAE,KAAMC,EAAY,UAAWC,EAAe,MAAOC,IAAgBC,EAAS,CAClF,SAAU,CAAC,SAAU,WAAW,EAChC,QAAS7C,GACT,MAAO,CAAA,CACR,EAGK,CAAE,KAAM8C,EAAW,UAAWC,EAAA,EAAiBF,EAAS,CAC5D,SAAU,CAAC,SAAU,OAAO,EAC5B,QAASlC,GACT,MAAO,CAAA,CACR,EAGyBqC,EAAY,CACpC,WAAYtC,GACZ,UAAYL,GAAS,CACnBF,EAAM,QAAQ,mCAAmC,EACzC,QAAA,IAAI,eAAgBE,CAAI,CAClC,EACA,QAAUH,GAAe,SACf,QAAA,MAAM,qBAAsBA,CAAK,EACzCC,EAAM,QAAMK,GAAAC,EAAAP,EAAM,WAAN,YAAAO,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,mBAAmB,CAAA,CAEnE,CAAA,EAG4BwC,EAAY,CACvC,WAAY5C,GACZ,UAAW,IAAM,CACfoC,EAAY,kBAAkB,CAAE,SAAU,CAAC,QAAQ,EAAG,EACtDT,EAAsB,EAAK,EAC3B5B,EAAM,QAAQ,0CAA0C,CAC1D,EACA,QAAUD,GAAe,SACvBC,EAAM,QAAMK,GAAAC,EAAAP,EAAM,WAAN,YAAAO,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,sCAAsC,CAAA,CAEtF,CAAA,EAG0BwC,EAAY,CACrC,WAAYpC,GACZ,UAAW,IAAM,CACf4B,EAAY,kBAAkB,CAAE,SAAU,CAAC,QAAQ,EAAG,EACtDP,EAAqB,EAAK,EAC1BE,EAAc,CAAA,CAAE,EAChBE,EAAa,EAAE,EACfE,EAAoB,EAAE,EACtBpC,EAAM,QAAQ,2BAA2B,CAC3C,EACA,QAAUD,GAAe,SACvBC,EAAM,QAAMK,GAAAC,EAAAP,EAAM,WAAN,YAAAO,EAAgB,OAAhB,YAAAD,EAAsB,UAAW,uBAAuB,CAAA,CAEvE,CAAA,EAwCK,MAAAyC,GAAYP,GAAA,YAAAA,EAAY,OAAQ,CAAC,EAEvC,OAAIE,GAECM,EAAA,IAAAC,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACF,EAAA,IAAA,KAAA,CAAG,UAAU,oCAAoC,SAAe,kBAAA,EAChEA,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAErC,qEAAA,CAAA,CAAA,EACF,EACAA,EAAA,IAACG,GACC,SAACH,EAAAA,IAAAI,EAAA,CAAY,UAAU,OACrB,SAAAF,EAAA,KAAC,MAAI,CAAA,UAAU,cACb,SAAA,CAACF,EAAA,IAAA,IAAA,CAAE,UAAU,6BAA6B,SAE1C,qFAAA,EACAA,MAACK,GAAO,QAAS,IAAM,OAAO,SAAS,OAAA,EAAU,SAEjD,kBAAA,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EAKDL,EAAA,IAAAC,EAAA,CACC,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,YAEb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACF,EAAA,IAAA,KAAA,CAAG,UAAU,oCAAoC,SAAe,kBAAA,EAChEA,EAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAErC,qEAAA,CAAA,CAAA,EACF,EACFA,EAAAA,IAAC,MAAI,CAAA,UAAU,YA0Bf,CAAA,CAAA,EACF,EAECE,EAAA,KAAAI,GAAA,CAAK,aAAa,YAAY,UAAU,YACvC,SAAA,CAAAJ,OAACK,GACC,CAAA,SAAA,CAACP,EAAA,IAAAQ,EAAA,CAAY,MAAM,YAAY,SAAgB,mBAAA,EAC9CR,EAAA,IAAAQ,EAAA,CAAY,MAAM,QAAQ,SAAU,YAAA,CAAA,CAAA,EACvC,EAEAR,EAAA,IAACS,EAAY,CAAA,MAAM,YAAY,UAAU,YACtC,SAAAhB,EACEO,EAAA,IAAA,MAAA,CAAI,UAAU,wCACb,SAACA,EAAAA,IAAAU,EAAA,CAAQ,UAAU,sBAAuB,CAAA,CAC5C,CAAA,EAEAV,EAAAA,IAAC,MAAI,CAAA,UAAU,aACZ,SAAA,OAAO,KAAKD,CAAS,EAAE,SAAW,EACjCC,EAAAA,IAACG,GACC,SAACH,EAAAA,IAAAI,EAAA,CAAY,UAAU,OACrB,SAACJ,MAAA,MAAA,CAAI,UAAU,cACb,SAACA,EAAAA,IAAA,IAAA,CAAE,UAAU,wBAAwB,SAErC,+DAAA,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,EAEA,OAAO,QAAQD,CAAS,EAAE,IAAI,CAAC,CAACY,EAAcC,CAAM,IAClDV,EAAAA,KAACC,EACC,CAAA,SAAA,CAAAD,OAACW,EACC,CAAA,SAAA,CAACX,EAAAA,KAAAY,EAAA,CAAU,UAAU,0BACnB,SAAA,CAACd,EAAAA,IAAAe,EAAA,CAAQ,UAAU,SAAU,CAAA,EAC5BJ,CAAA,EACH,SACCK,GACE,CAAA,SAAA,CAAA,MAAM,QAAQJ,CAAM,EAAIA,EAAO,OAAS,EAAE,mBAAA,CAC7C,CAAA,CAAA,EACF,EACAZ,EAAAA,IAACI,GACC,SAACJ,EAAAA,IAAA,MAAA,CAAI,UAAU,2CACZ,SAAA,MAAM,QAAQY,CAAM,GAAKA,EAAO,IAAKK,GACnCjB,EAAAA,IAAAG,EAAA,CAAkC,UAAU,MAC3C,SAAAD,EAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAF,EAAA,IAAC,KAAG,CAAA,UAAU,gBAAiB,SAAAiB,EAAM,KAAK,EAC1Cf,EAAAA,KAAC,MAAI,CAAA,UAAU,aACZ,SAAA,CAAAe,EAAM,QACJjB,EAAA,IAAAkB,EAAA,CAAM,QAAQ,YAAa,WAAM,OAAO,EAE1CD,EAAM,QACLjB,EAAA,IAACkB,GAAM,QAAQ,UAAW,WAAM,MAAO,CAAA,CAAA,CAE3C,CAAA,CAAA,EACF,EACCD,EAAM,aACLjB,EAAA,IAAC,KAAE,UAAU,gCACV,WAAM,YACT,EAEDiB,EAAM,UACJf,OAAA,MAAA,CAAI,UAAU,gCAAgC,SAAA,CAAA,aAClCe,EAAM,QAAA,EACnB,EAEDA,EAAM,YACLjB,EAAA,IAACmB,GAAA,CACC,WAAYF,EAAM,WAClB,UAAWA,EAAM,IAAA,CAAA,CACnB,CAEJ,CAAA,GA7BSA,EAAM,IAAMA,EAAM,IA8B7B,CACD,EACH,CACF,CAAA,CA9CS,CAAA,EAAAN,CA+CX,CACD,CAEL,CAAA,EAEJ,EAEAX,EAAAA,IAACS,GAAY,MAAM,QAAQ,UAAU,YAClC,SAAAZ,SACE,MAAI,CAAA,UAAU,wCACb,SAACG,EAAA,IAAAU,EAAA,CAAQ,UAAU,sBAAuB,CAAA,CAAA,CAC5C,EAECR,EAAAA,KAAA,MAAA,CAAI,UAAU,2CACb,SAAA,CAAAA,OAACC,EACC,CAAA,SAAA,CAACD,EAAAA,KAAAW,EAAA,CAAW,UAAU,4DACpB,SAAA,CAACb,EAAA,IAAAc,EAAA,CAAU,UAAU,sBAAsB,SAAe,kBAAA,EAC1Dd,EAAAA,IAACoB,EAAU,CAAA,UAAU,+BAAgC,CAAA,CAAA,EACvD,EACCpB,EAAA,IAAAI,EAAA,CACC,SAACJ,EAAAA,IAAA,MAAA,CAAI,UAAU,qBACZ,WAAW1C,GAAAC,EAAAqC,GAAA,YAAAA,EAAA,OAAA,YAAArC,EAAM,iBAAN,YAAAD,EAAsB,mBAAoB,CAAA,CACxD,CACF,CAAA,CAAA,EACF,SACC6C,EACC,CAAA,SAAA,CAACD,EAAAA,KAAAW,EAAA,CAAW,UAAU,4DACpB,SAAA,CAACb,EAAA,IAAAc,EAAA,CAAU,UAAU,sBAAsB,SAAgB,mBAAA,EAC3Dd,EAAAA,IAACoB,EAAU,CAAA,UAAU,+BAAgC,CAAA,CAAA,EACvD,EACCpB,EAAA,IAAAI,EAAA,CACC,SAACJ,EAAAA,IAAA,MAAA,CAAI,UAAU,qBACZ,WAAWqB,GAAAC,EAAA1B,GAAA,YAAAA,EAAA,OAAA,YAAA0B,EAAM,kBAAN,YAAAD,EAAuB,mBAAoB,CAAA,CACzD,CACF,CAAA,CAAA,EACF,SACClB,EACC,CAAA,SAAA,CAACD,EAAAA,KAAAW,EAAA,CAAW,UAAU,4DACpB,SAAA,CAACb,EAAA,IAAAc,EAAA,CAAU,UAAU,sBAAsB,SAAW,cAAA,EACtDd,EAAAA,IAACoB,EAAU,CAAA,UAAU,+BAAgC,CAAA,CAAA,EACvD,EACCpB,MAAAI,EAAA,CACC,SAACF,EAAAA,KAAA,MAAA,CAAI,UAAU,qBACZ,SAAA,GAAAqB,EAAA3B,GAAA,YAAAA,EAAW,OAAX,YAAA2B,EAAiB,iBAAkB,EAAE,IAAA,CAAA,CACxC,CACF,CAAA,CAAA,EACF,SACCpB,EACC,CAAA,SAAA,CAACD,EAAAA,KAAAW,EAAA,CAAW,UAAU,4DACpB,SAAA,CAACb,EAAA,IAAAc,EAAA,CAAU,UAAU,sBAAsB,SAAU,aAAA,EACrDd,EAAAA,IAACoB,EAAU,CAAA,UAAU,+BAAgC,CAAA,CAAA,EACvD,EACCpB,MAAAI,EAAA,CACC,SAACF,EAAAA,KAAA,MAAA,CAAI,UAAU,qBACV,SAAA,KAAAsB,EAAA5B,GAAA,YAAAA,EAAW,OAAX,YAAA4B,EAAiB,YAAa,GAAK,KAAK,QAAQ,CAAC,EAAE,GAAA,CAAA,CACxD,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CAEJ,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACA,CACF,CAAA,CAEJ,EAGML,GAAqB,CAAC,CAAE,WAAAM,EAAY,UAAAC,KAA2D,CACnG,KAAM,CAACC,EAAWC,CAAY,EAAI3D,EAAAA,SAAS,EAAK,EAC1C,CAAC4D,EAAWC,CAAY,EAAI7D,EAAAA,SAAS,EAAK,EAC1C,CAAC8D,EAAOC,CAAQ,EAAI/D,EAAAA,SAAkC,IAAI,EAC1D,CAACgE,EAAUC,CAAW,EAAIjE,EAAAA,SAAS,EAAK,EAGxCkE,EAAU,IAAM,CAChBJ,IACFA,EAAM,MAAM,EACNA,EAAA,oBAAoB,YAAaK,CAAe,EAChDL,EAAA,oBAAoB,UAAWM,CAAa,EAC5CN,EAAA,oBAAoB,QAASO,CAAW,EACxCP,EAAA,oBAAoB,QAASQ,CAAW,EACxCR,EAAA,oBAAoB,aAAcS,CAAgB,EACxDR,EAAS,IAAI,EAEjB,EAGMI,EAAkB,IAAMN,EAAa,EAAI,EACzCO,EAAgB,IAAMP,EAAa,EAAK,EACxCU,EAAmB,IAAMV,EAAa,EAAK,EAC3CQ,EAAc,IAAM,CACxBV,EAAa,EAAK,EAClBE,EAAa,EAAK,CACpB,EACMS,EAAeE,GAAa,CAChC,QAAQ,MAAM,kBAAmBf,EAAW,IAAKe,CAAC,EAClDX,EAAa,EAAK,EAClBF,EAAa,EAAK,EAClBM,EAAY,EAAI,EACVjF,EAAA,MAAM,6BAA6ByE,CAAS,EAAE,CACtD,EAEMgB,EAAkB,SAAY,CAClC,GAAIf,GAAaI,EAAO,CACtBA,EAAM,MAAM,EACZH,EAAa,EAAK,EAClB,MAAA,CAIFM,EAAY,EAAK,EAEb,GAAA,CAOF,GANAJ,EAAa,EAAI,EAGTK,EAAA,EAGJ,CAACV,GAAcA,EAAW,KAAA,IAAW,GACjC,MAAA,IAAI,MAAM,0BAA0B,EAIxCA,EAAW,WAAW,qBAAqB,EAE7C,MAAMkB,EAAqBlB,CAAU,EAGrC,MAAMmB,EAAoBnB,CAAU,QAG/BzE,EAAO,CACN,QAAA,MAAM,+BAAgCA,CAAK,EACnD8E,EAAa,EAAK,EAClBF,EAAa,EAAK,EAClBM,EAAY,EAAI,EAGZlF,aAAiB,MACfA,EAAM,QAAQ,SAAS,SAAS,EAC5BC,EAAA,MAAM,uBAAuByE,CAAS,EAAE,EACrC1E,EAAM,QAAQ,SAAS,gBAAgB,EAC1CC,EAAA,MAAM,4BAA4ByE,CAAS,EAAE,EAC1C1E,EAAM,QAAQ,SAAS,6BAA6B,EACvDC,EAAA,MAAM,GAAGyE,CAAS,mCAAmC,EAErDzE,EAAA,MAAM,2BAA2ByE,CAAS,EAAE,EAG9CzE,EAAA,MAAM,8BAA8ByE,CAAS,EAAE,CACvD,CAEJ,EAGMiB,EAAuB,MAAOlB,GAAuB,OACrD,GAAA,CACM,QAAA,IAAI,wBAAyBA,CAAU,EAG/C,MAAMoB,EAAW,MAAM9F,EAAc,IAAI0E,CAAU,EASnD,GAPQ,QAAA,IAAI,sCAAuCoB,EAAS,IAAI,EAChE,QAAQ,IAAI,uBAAuB,EACnC,QAAQ,IAAI,eAAgBA,EAAS,KAAK,OAAO,EACjD,QAAQ,IAAI,gBAAiBA,EAAS,KAAK,QAAQ,EACnD,QAAQ,IAAI,YAAaA,EAAS,KAAK,IAAI,EAC3C,QAAQ,IAAI,eAAgBA,EAAS,KAAK,OAAO,EAE7CA,EAAS,KAAK,SAAWA,EAAS,KAAK,SAEzC,QAAQ,IAAI,gCAAiCA,EAAS,KAAK,QAAQ,EAC7D,MAAAD,EAAoBC,EAAS,KAAK,QAAQ,EAC1C5F,EAAA,QAAQ,WAAWyE,CAAS,UAAU,UACnCmB,EAAS,KAAK,KAAM,CAE7B,QAAQ,IAAI,gCAAiCA,EAAS,KAAK,IAAI,EACzD5F,EAAA,KAAK4F,EAAS,KAAK,IAAI,EAC7Bf,EAAa,EAAK,EAClBI,EAAY,EAAK,EACjB,MAAA,SACSW,EAAS,KAAK,SAAW,CAACA,EAAS,KAAK,SAAU,CAE3D,QAAQ,IAAI,mCAAoCA,EAAS,KAAK,OAAO,EAC/D5F,EAAA,KAAK4F,EAAS,KAAK,OAAO,EAChCf,EAAa,EAAK,EAClBI,EAAY,EAAK,EACjB,MAAA,KAGA,eAAQ,IAAI,mCAAmC,EACvC,QAAA,IAAI,mBAAoB,KAAK,UAAUW,EAAS,KAAM,KAAM,CAAC,CAAC,EAChE,IAAI,MAAM,6BAA6B,QAExC7F,EAAY,CAEf,MADI,QAAA,MAAM,mCAAoCA,CAAK,IACnDO,EAAAP,EAAM,WAAN,YAAAO,EAAgB,UAAW,IACvB,IAAI,MAAM,6CAA6C,EAEzDP,CAAA,CAEV,EAGM4F,EAAsB,MAAOE,GAAqB,CAChD,MAAAC,EAAW,IAAI,MAGZA,EAAA,iBAAiB,YAAaX,CAAe,EAC7CW,EAAA,iBAAiB,UAAWV,CAAa,EACzCU,EAAA,iBAAiB,aAAcP,CAAgB,EAC/CO,EAAA,iBAAiB,QAAST,CAAW,EACrCS,EAAA,iBAAiB,QAASR,CAAW,EAG9CQ,EAAS,QAAU,WACnBA,EAAS,YAAc,YAEvBf,EAASe,CAAQ,EAGjBA,EAAS,IAAMD,EACfC,EAAS,KAAK,EAGd,MAAM,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/B,MAAAC,EAAU,WAAW,IAAM,CACxBD,EAAA,IAAI,MAAM,oBAAoB,CAAC,GACrC,GAAK,EAECF,EAAA,iBAAiB,UAAW,IAAM,CACzC,aAAaG,CAAO,EACpBF,EAAQ,MAAM,CAAA,EACb,CAAE,KAAM,GAAM,EAERD,EAAA,iBAAiB,QAAS,IAAM,CACvC,aAAaG,CAAO,EACbD,EAAA,IAAI,MAAM,mBAAmB,CAAC,CAAA,EACpC,CAAE,KAAM,GAAM,CAAA,CAClB,EAGD,MAAMF,EAAS,KAAK,EACpBnB,EAAa,EAAI,EACjBE,EAAa,EAAK,CACpB,EAGAqB,OAAAA,EAAAA,UAAU,IACDhB,EACN,EAAE,EAGHjC,EAAA,KAACG,EAAA,CACC,QAAQ,UACR,KAAK,KACL,UAAU,SACV,QAASqC,EACT,SAAUb,GAAaI,EAEtB,SAAA,CACCJ,EAAA7B,EAAA,IAACU,GAAQ,UAAU,2BAAA,CAA4B,EAC7CiB,EACF3B,EAAA,IAACoD,IAAM,UAAU,cAAA,CAAe,EAC9BnB,EACFjC,EAAA,IAACe,GAAQ,UAAU,yBAAA,CAA0B,EAE5Cf,EAAAA,IAAAqD,GAAA,CAAK,UAAU,cAAe,CAAA,EAEhCxB,EAAY,aAAeF,EAAY,QAAUM,EAAW,cAAgB,SAAA,CAAA,CAC/E,CAEJ"}