{"version":3,"file":"agentService-DVF3imDF.js","sources":["../../src/api/services/agents/agentService.ts"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\r\nimport { toast } from \"sonner\";\r\nimport { VapiAssistant } from \"@/types/vapi\";\r\n\r\n// Types\r\nexport interface AssistantConfig {\r\n  name: string;\r\n  firstMessage: string;\r\n  transcriber: {\r\n    provider: string;\r\n    model: string;\r\n  };\r\n  model: {\r\n    provider: string;\r\n    model: string;\r\n    temperature?: number;\r\n  };\r\n  voice: {\r\n    provider: string;\r\n    voiceId: string;\r\n  };\r\n  systemMessage?: string;\r\n  functions?: any[];\r\n  endCallMessage?: string;\r\n  endCallPhrases?: string[];\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface Assistant {\r\n  id: string;\r\n  assistant_id?: string;\r\n  name: string;\r\n  firstMessage: string;\r\n  transcriber: any;\r\n  model: any;\r\n  voice: any;\r\n  systemMessage?: string;\r\n  functions?: any[];\r\n  endCallMessage?: string;\r\n  endCallPhrases?: string[];\r\n  metadata?: Record<string, any>;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// Get all assistants with pagination\r\nexport async function fetchAllAgents(page: number, search: string) {\r\n  try {\r\n    const res = await axiosInstance.get(\"/api/assistant/get_all_assistants\", {\r\n      params: { page, search },\r\n    });\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching agents:\", error);\r\n\r\n    // Don't show toast error for expected scenarios:\r\n    // - 404: No agents found (normal for new users)\r\n    // - 204: Empty results\r\n    // - 402: Payment required (normal for users without credits)\r\n    const expectedStatuses = [404, 204, 402];\r\n    if (!expectedStatuses.includes(error?.response?.status)) {\r\n      toast.error(\"Failed to fetch agents\");\r\n    }\r\n\r\n    // Return empty result instead of throwing for expected scenarios\r\n    if (expectedStatuses.includes(error?.response?.status)) {\r\n      return { data: [], totalAssistant: 0, currentPage: 1, totalPages: 0 };\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get all assistants without pagination (fetch all pages)\r\nexport async function fetchAllAgentsComplete(search: string = \"\") {\r\n  try {\r\n    let allAssistants: Assistant[] = [];\r\n    let currentPage = 1;\r\n    let totalPages = 1;\r\n\r\n    do {\r\n      const res = await axiosInstance.get(\"/api/assistant/get_all_assistants\", {\r\n        params: { page: currentPage, search, limit: 50 }, // Increase limit for efficiency\r\n      });\r\n\r\n      const { data, totalPages: total } = res.data;\r\n      allAssistants = [...allAssistants, ...data];\r\n      totalPages = total;\r\n      currentPage++;\r\n    } while (currentPage <= totalPages);\r\n\r\n    return { data: allAssistants, total: allAssistants.length };\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching all agents:\", error);\r\n\r\n    // Don't show toast error for expected scenarios:\r\n    // - 404: No agents found (normal for new users)\r\n    // - 204: Empty results\r\n    // - 402: Payment required (normal for users without credits)\r\n    const expectedStatuses = [404, 204, 402];\r\n    if (!expectedStatuses.includes(error?.response?.status)) {\r\n      toast.error(\"Failed to fetch all agents\");\r\n    }\r\n\r\n    // Return empty result instead of throwing for expected scenarios\r\n    if (expectedStatuses.includes(error?.response?.status)) {\r\n      return { data: [], total: 0 };\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get all assistants from VAPI directly\r\nexport async function fetchAllAgentsFromVapi() {\r\n  try {\r\n    const res = await axiosInstance.get(\"/api/assistant/list-all-assistants-from-vapi\");\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching agents from VAPI:\", error);\r\n\r\n    // Don't show toast error for expected scenarios:\r\n    // - 404: No agents found (normal for new users)\r\n    // - 204: Empty results\r\n    // - 402: Payment required (normal for users without credits)\r\n    const expectedStatuses = [404, 204, 402];\r\n    if (!expectedStatuses.includes(error?.response?.status)) {\r\n      toast.error(\"Failed to fetch agents from VAPI\");\r\n    }\r\n\r\n    // Return empty result instead of throwing for expected scenarios\r\n    if (expectedStatuses.includes(error?.response?.status)) {\r\n      return { data: [], total: 0 };\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get assistants that exist in both local DB and VAPI (fully synced)\r\nexport async function fetchSyncedAgents(page: number = 1, search: string = \"\") {\r\n  try {\r\n    const res = await axiosInstance.get(\"/api/assistant/get-synced-assistants\", {\r\n      params: { page, search, limit: 50 },\r\n    });\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching synced agents:\", error);\r\n\r\n    // Don't show toast error for expected scenarios:\r\n    // - 404: No agents found (normal for new users)\r\n    // - 204: Empty results\r\n    // - 402: Payment required (normal for users without credits)\r\n    const expectedStatuses = [404, 204, 402];\r\n    if (!expectedStatuses.includes(error?.response?.status)) {\r\n      toast.error(\"Failed to fetch synced agents\");\r\n    }\r\n\r\n    // Return empty result instead of throwing for expected scenarios\r\n    if (expectedStatuses.includes(error?.response?.status)) {\r\n      return { data: [], totalPages: 0, currentPage: 1, total: 0 };\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get all synced assistants without pagination (fetch all pages)\r\nexport async function fetchAllSyncedAgents(search: string = \"\") {\r\n  try {\r\n    let allAssistants: Assistant[] = [];\r\n    let currentPage = 1;\r\n    let totalPages = 1;\r\n\r\n    do {\r\n      const res = await axiosInstance.get(\"/api/assistant/get-synced-assistants\", {\r\n        params: { page: currentPage, search, limit: 50 },\r\n      });\r\n\r\n      const { data, totalPages: total } = res.data;\r\n      allAssistants = [...allAssistants, ...data];\r\n      totalPages = total;\r\n      currentPage++;\r\n    } while (currentPage <= totalPages);\r\n\r\n    return { data: allAssistants, total: allAssistants.length };\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching all synced agents:\", error);\r\n\r\n    // Don't show toast error for expected scenarios:\r\n    // - 404: No agents found (normal for new users)\r\n    // - 204: Empty results\r\n    // - 402: Payment required (normal for users without credits)\r\n    const expectedStatuses = [404, 204, 402];\r\n    if (!expectedStatuses.includes(error?.response?.status)) {\r\n      toast.error(\"Failed to fetch all synced agents\");\r\n    }\r\n\r\n    // Return empty result instead of throwing for expected scenarios\r\n    if (expectedStatuses.includes(error?.response?.status)) {\r\n      return { data: [], total: 0 };\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get assistant by ID\r\nexport async function getAssistantById(id: string) {\r\n  try {\r\n    const res = await axiosInstance.get(`/api/assistant/get-assistants/${id}`);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching assistant:\", error);\r\n\r\n    // Don't show toast error for expected scenarios:\r\n    // - 404: Assistant not found (normal for new users or invalid IDs)\r\n    // - 204: Empty results\r\n    // - 402: Payment required (normal for users without credits)\r\n    const expectedStatuses = [404, 204, 402];\r\n    if (!expectedStatuses.includes(error?.response?.status)) {\r\n      toast.error(\"Failed to fetch assistant\");\r\n    }\r\n\r\n    // Return null instead of throwing for expected scenarios\r\n    if (expectedStatuses.includes(error?.response?.status)) {\r\n      return null;\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Get complete assistant details from VAPI directly\r\nexport async function getVapiAssistantById(id: string) {\r\n  try {\r\n    const res = await axiosInstance.get(`/api/assistant/get-assistants/${id}`);\r\n    return res.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching VAPI assistant:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Create new assistant\r\nexport async function createAssistant(data: VapiAssistant) {\r\n  try {\r\n    const res = await axiosInstance.post(\"/api/assistant/create_assistant\", data);\r\n    toast.success(\"Assistant created successfully\");\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error creating assistant:\", error);\r\n    const message = error.response?.data?.message || \"Failed to create assistant\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update assistant\r\nexport async function updateAssistant(id: string, data: Partial<VapiAssistant>) {\r\n  try {\r\n    const res = await axiosInstance.put(`/api/assistant/update-assistant/${id}`, data);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error updating assistant:\", error);\r\n    const message = error.response?.data?.message || \"Failed to update assistant\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete assistant\r\nexport async function deleteAssistant(id: string) {\r\n  try {\r\n    console.log('üóëÔ∏è Deleting assistant with ID:', id);\r\n    const res = await axiosInstance.delete(`/api/assistant/delete-assistant/${id}`);\r\n    toast.success(\"Assistant deleted successfully\");\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error deleting assistant:\", error);\r\n    const message = error.response?.data?.message || \"Failed to delete assistant\";\r\n    toast.error(message);\r\n    throw error;\r\n  }\r\n}\r\n"],"names":["fetchAllAgents","page","search","axiosInstance","error","expectedStatuses","_a","toast","_b","fetchAllAgentsComplete","allAssistants","currentPage","totalPages","res","data","total","fetchAllAgentsFromVapi","fetchAllSyncedAgents","getAssistantById","id","getVapiAssistantById","createAssistant","message","updateAssistant","deleteAssistant"],"mappings":"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"}