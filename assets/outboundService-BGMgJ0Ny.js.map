{"version":3,"file":"outboundService-BGMgJ0Ny.js","sources":["../../src/api/services/outbound/outboundService.ts"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\n// Types\nexport interface OutboundCall {\n  id: string;\n  assistantId: string;\n  phoneNumber: string;\n  status: \"queued\" | \"ringing\" | \"in-progress\" | \"forwarding\" | \"ended\";\n  startedAt?: string;\n  endedAt?: string;\n  duration?: number;\n  cost?: number;\n  endedReason?: string;\n  transcript?: string;\n  recording?: string;\n  summary?: string;\n  metadata?: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface OutboundCallConfig {\n  assistantId: string;\n  phoneNumber: string;\n  phoneNumberId?: string;\n  metadata?: Record<string, any>;\n  maxDurationSeconds?: number;\n  firstMessage?: string;\n  voicemailMessage?: string;\n}\n\nexport interface CallStats {\n  totalCalls: number;\n  successfulCalls: number;\n  failedCalls: number;\n  averageDuration: number;\n  totalCost: number;\n  callsByStatus: {\n    status: string;\n    count: number;\n  }[];\n  callsByHour: {\n    hour: number;\n    count: number;\n  }[];\n  callsByDay: {\n    date: string;\n    count: number;\n  }[];\n}\n\n// Create outbound call\nexport async function createOutboundCall(data: OutboundCallConfig) {\n  try {\n    const res = await axiosInstance.post(\"/api/outboundcall/createCall\", {\n      id: data.assistantId,\n      phoneNumber: data.phoneNumber,\n      phoneNumberId: data.phoneNumberId,\n      metadata: data.metadata,\n      maxDurationSeconds: data.maxDurationSeconds,\n      firstMessage: data.firstMessage,\n      voicemailMessage: data.voicemailMessage,\n    });\n    toast.success(\"Outbound call initiated successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error creating outbound call:\", error);\n    const message = error.response?.data?.message || \"Failed to create outbound call\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get all outbound calls\nexport async function getAllOutboundCalls(page?: number, search?: string, status?: string) {\n  try {\n    const res = await axiosInstance.get(\"/api/outboundcall/getAllCalls\", {\n      params: { page, search, status },\n    });\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching outbound calls:\", error);\n    toast.error(\"Failed to fetch outbound calls\");\n    throw error;\n  }\n}\n\n// Get outbound call by ID\nexport async function getOutboundCallById(id: string) {\n  try {\n    const res = await axiosInstance.get(`/api/outboundcall/getCallsbyID/${id}`);\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching outbound call:\", error);\n    toast.error(\"Failed to fetch outbound call\");\n    throw error;\n  }\n}\n\n// End outbound call\nexport async function endOutboundCall(id: string) {\n  try {\n    const res = await axiosInstance.post(`/api/outboundcall/endCall/${id}`);\n    toast.success(\"Call ended successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error ending outbound call:\", error);\n    const message = error.response?.data?.message || \"Failed to end call\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Mute call (mute assistant)\nexport async function muteCall(callId: string, controlUrl: string) {\n  try {\n    const response = await fetch(controlUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        type: 'control',\n        control: 'mute-assistant'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    toast.success(\"Assistant muted\");\n    return await response.json();\n  } catch (error: any) {\n    console.error(\"Error muting call:\", error);\n    toast.error(\"Failed to mute call\");\n    throw error;\n  }\n}\n\n// Unmute call (unmute assistant)\nexport async function unmuteCall(callId: string, controlUrl: string) {\n  try {\n    const response = await fetch(controlUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        type: 'control',\n        control: 'unmute-assistant'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    toast.success(\"Assistant unmuted\");\n    return await response.json();\n  } catch (error: any) {\n    console.error(\"Error unmuting call:\", error);\n    toast.error(\"Failed to unmute call\");\n    throw error;\n  }\n}\n\n// End call via control URL\nexport async function endCallViaControl(callId: string, controlUrl: string) {\n  try {\n    const response = await fetch(controlUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        type: 'end-call'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    toast.success(\"Call ended successfully\");\n    return await response.json();\n  } catch (error: any) {\n    console.error(\"Error ending call via control:\", error);\n    toast.error(\"Failed to end call\");\n    throw error;\n  }\n}\n\n// Get call transcript\nexport async function getCallTranscript(id: string) {\n  try {\n    const res = await axiosInstance.get(`/api/outboundcall/transcript/${id}`);\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching call transcript:\", error);\n    toast.error(\"Failed to fetch call transcript\");\n    throw error;\n  }\n}\n\n// Get call recording\nexport async function getCallRecording(id: string) {\n  try {\n    const res = await axiosInstance.get(`/api/outboundcall/recording/${id}`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error fetching call recording:\", error);\n    const message = error.response?.data?.message || \"Failed to fetch recording\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Download call recording\nexport async function downloadCallRecording(id: string) {\n  try {\n    const res = await axiosInstance.get(`/api/outboundcall/recording/${id}`, {\n      responseType: \"blob\",\n    });\n\n    // Create blob link to download\n    const url = window.URL.createObjectURL(new Blob([res.data]));\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", `call-recording-${id}.mp3`);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n\n    toast.success(\"Recording downloaded successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error downloading call recording:\", error);\n    const message = error.response?.data?.message || \"Failed to download recording\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Get call statistics\nexport async function getCallStats(dateFrom?: string, dateTo?: string) {\n  try {\n    const res = await axiosInstance.get(\"/api/outboundcall/stats\", {\n      params: { dateFrom, dateTo },\n    });\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching call stats:\", error);\n    toast.error(\"Failed to fetch call statistics\");\n    throw error;\n  }\n}\n\n// Bulk create outbound calls\nexport async function createBulkOutboundCalls(data: {\n  assistantId: string;\n  phoneNumbers: string[];\n  metadata?: Record<string, any>;\n  maxDurationSeconds?: number;\n  firstMessage?: string;\n  voicemailMessage?: string;\n}) {\n  try {\n    const res = await axiosInstance.post(\"/api/outboundcall/createBulkCalls\", data);\n    toast.success(`${data.phoneNumbers.length} outbound calls initiated successfully`);\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error creating bulk outbound calls:\", error);\n    const message = error.response?.data?.message || \"Failed to create bulk outbound calls\";\n    toast.error(message);\n    throw error;\n  }\n}\n\n// Schedule outbound call\nexport async function scheduleOutboundCall(data: OutboundCallConfig & {\n  scheduledAt: string;\n}) {\n  try {\n    const res = await axiosInstance.post(\"/api/outboundcall/schedule\", data);\n    toast.success(\"Outbound call scheduled successfully\");\n    return res.data;\n  } catch (error: any) {\n    console.error(\"Error scheduling outbound call:\", error);\n    const message = error.response?.data?.message || \"Failed to schedule outbound call\";\n    toast.error(message);\n    throw error;\n  }\n}\n"],"names":["createOutboundCall","data","res","axiosInstance","toast","error","message","_b","_a","getAllOutboundCalls","page","search","status","endOutboundCall","id","muteCall","callId","controlUrl","response","unmuteCall","endCallViaControl","getCallTranscript","downloadCallRecording","url","link","getCallStats","dateFrom","dateTo","createBulkOutboundCalls"],"mappings":"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"}