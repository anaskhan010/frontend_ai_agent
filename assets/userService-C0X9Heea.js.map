{"version":3,"file":"userService-C0X9Heea.js","sources":["../../src/api/services/user/userService.ts"],"sourcesContent":["// src/api/services/user/userService.ts\n\nimport axiosInstance from \"@/api/axios/axiosInstance\";\nimport { toast } from \"sonner\";\n\ninterface User {\n  id: number;\n  email: string;\n  name?: string;\n  first_name?: string;\n  last_name?: string;\n  username?: string;\n  role?: string;\n  org_id?: string;\n  phone_number?: string;\n  role_id?: string;\n  is_active?: boolean;\n  is_super_admin?: boolean;\n  created_at?: string;\n  updated_at?: string;\n  last_login?: string;\n  role_ids?: string;\n  role_names?: string;\n  role_display_names?: string;\n  roles?: Array<{\n    id: number;\n    name: string;\n    display_name: string;\n  }>;\n}\n\ninterface GetCurrentUserResponse {\n  success: boolean;\n  message: string;\n  data: User;\n}\n\ninterface GetAllUsersResponse {\n  success: boolean;\n  message: string;\n  data: User[];\n}\n\nexport const getCurrentUserService = async (): Promise<User | null> => {\n  try {\n    const response = await axiosInstance.get<GetCurrentUserResponse>(\"/api/auth/me\");\n\n    if (response.status === 200 && response.data.success) {\n      return response.data.data;\n    }\n\n    throw new Error(\"Failed to get current user\");\n  } catch (error: any) {\n    console.error(\"Error getting current user:\", error);\n    if (error.response && error.response.data && error.response.data.message) {\n      toast.error(error.response.data.message);\n    } else {\n      toast.error(\"Failed to get user information\");\n    }\n    return null;\n  }\n};\n\nexport const updateUserProfileService = async (userData: Partial<User>): Promise<User | null> => {\n  try {\n    const response = await axiosInstance.put<GetCurrentUserResponse>(`/api/users/${userData.id}`, userData);\n\n    if (response.status === 200) {\n      toast.success(\"Profile updated successfully\");\n      return response.data.data;\n    }\n\n    throw new Error(\"Failed to update profile\");\n  } catch (error: any) {\n    console.error(\"Error updating profile:\", error);\n    if (error.response && error.response.data && error.response.data.message) {\n      toast.error(error.response.data.message);\n    } else {\n      toast.error(\"Failed to update profile\");\n    }\n    return null;\n  }\n};\n\nexport const getAllUsersWithRoles = async (): Promise<GetAllUsersResponse> => {\n  try {\n    const response = await axiosInstance.get<GetAllUsersResponse>(\"/api/users/with-roles\");\n\n    if (response.status === 200) {\n      return response.data;\n    }\n\n    throw new Error(\"Failed to get users\");\n  } catch (error: any) {\n    console.error(\"Error getting users:\", error);\n    throw error;\n  }\n};\n\nexport const createUser = async (userData: {\n  username: string;\n  email: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  phone_number?: string;\n  role_id: string;\n  is_active?: boolean;\n}): Promise<{success: boolean; message: string; data?: any}> => {\n  try {\n    const response = await axiosInstance.post(\"/api/users/create\", userData);\n\n    if (response.status === 201) {\n      return response.data;\n    }\n\n    throw new Error(\"Failed to create user\");\n  } catch (error: any) {\n    console.error(\"Error creating user:\", error);\n    throw error;\n  }\n};\n\nexport const updateUser = async (userId: number, userData: {\n  username: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  phone_number?: string;\n  role_id: string;\n  is_active?: boolean;\n}): Promise<{success: boolean; message: string; data?: any}> => {\n  try {\n    const response = await axiosInstance.put(`/api/users/${userId}`, userData);\n\n    if (response.status === 200) {\n      return { success: true, message: \"User updated successfully\" };\n    }\n\n    throw new Error(\"Failed to update user\");\n  } catch (error: any) {\n    console.error(\"Error updating user:\", error);\n    throw error;\n  }\n};\n\nexport const deleteUser = async (userId: number): Promise<{success: boolean; message: string}> => {\n  try {\n    const response = await axiosInstance.delete(`/api/users/${userId}`);\n\n    if (response.status === 200) {\n      return response.data;\n    }\n\n    throw new Error(\"Failed to delete user\");\n  } catch (error: any) {\n    console.error(\"Error deleting user:\", error);\n    throw error;\n  }\n};\n"],"names":["getCurrentUserService","response","axiosInstance","error","toast","updateUserProfileService","userData","getAllUsersWithRoles","createUser","updateUser","userId","deleteUser"],"mappings":"0CA2CO,MAAMA,EAAwB,SAAkC,CACjE,GAAA,CACF,MAAMC,EAAW,MAAMC,EAAc,IAA4B,cAAc,EAE/E,GAAID,EAAS,SAAW,KAAOA,EAAS,KAAK,QAC3C,OAAOA,EAAS,KAAK,KAGjB,MAAA,IAAI,MAAM,4BAA4B,QACrCE,EAAY,CACX,eAAA,MAAM,8BAA+BA,CAAK,EAC9CA,EAAM,UAAYA,EAAM,SAAS,MAAQA,EAAM,SAAS,KAAK,QAC/DC,EAAM,MAAMD,EAAM,SAAS,KAAK,OAAO,EAEvCC,EAAM,MAAM,gCAAgC,EAEvC,IAAA,CAEX,EAEaC,EAA2B,MAAOC,GAAkD,CAC3F,GAAA,CACI,MAAAL,EAAW,MAAMC,EAAc,IAA4B,cAAcI,EAAS,EAAE,GAAIA,CAAQ,EAElG,GAAAL,EAAS,SAAW,IACtBG,OAAAA,EAAM,QAAQ,8BAA8B,EACrCH,EAAS,KAAK,KAGjB,MAAA,IAAI,MAAM,0BAA0B,QACnCE,EAAY,CACX,eAAA,MAAM,0BAA2BA,CAAK,EAC1CA,EAAM,UAAYA,EAAM,SAAS,MAAQA,EAAM,SAAS,KAAK,QAC/DC,EAAM,MAAMD,EAAM,SAAS,KAAK,OAAO,EAEvCC,EAAM,MAAM,0BAA0B,EAEjC,IAAA,CAEX,EAEaG,EAAuB,SAA0C,CACxE,GAAA,CACF,MAAMN,EAAW,MAAMC,EAAc,IAAyB,uBAAuB,EAEjF,GAAAD,EAAS,SAAW,IACtB,OAAOA,EAAS,KAGZ,MAAA,IAAI,MAAM,qBAAqB,QAC9BE,EAAY,CACX,cAAA,MAAM,uBAAwBA,CAAK,EACrCA,CAAA,CAEV,EAEaK,EAAa,MAAOF,GAS+B,CAC1D,GAAA,CACF,MAAML,EAAW,MAAMC,EAAc,KAAK,oBAAqBI,CAAQ,EAEnE,GAAAL,EAAS,SAAW,IACtB,OAAOA,EAAS,KAGZ,MAAA,IAAI,MAAM,uBAAuB,QAChCE,EAAY,CACX,cAAA,MAAM,uBAAwBA,CAAK,EACrCA,CAAA,CAEV,EAEaM,EAAa,MAAOC,EAAgBJ,IAQe,CAC1D,GAAA,CAGE,IAFa,MAAMJ,EAAc,IAAI,cAAcQ,CAAM,GAAIJ,CAAQ,GAE5D,SAAW,IACtB,MAAO,CAAE,QAAS,GAAM,QAAS,2BAA4B,EAGzD,MAAA,IAAI,MAAM,uBAAuB,QAChCH,EAAY,CACX,cAAA,MAAM,uBAAwBA,CAAK,EACrCA,CAAA,CAEV,EAEaQ,EAAa,MAAOD,GAAiE,CAC5F,GAAA,CACF,MAAMT,EAAW,MAAMC,EAAc,OAAO,cAAcQ,CAAM,EAAE,EAE9D,GAAAT,EAAS,SAAW,IACtB,OAAOA,EAAS,KAGZ,MAAA,IAAI,MAAM,uBAAuB,QAChCE,EAAY,CACX,cAAA,MAAM,uBAAwBA,CAAK,EACrCA,CAAA,CAEV"}