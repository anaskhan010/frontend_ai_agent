{"version":3,"file":"clinicalRoleService-D8F2-96C.js","sources":["../../src/api/services/clinicalRole/clinicalRoleService.ts"],"sourcesContent":["import axiosInstance from \"@/api/axios/axiosInstance\";\n\nexport interface ClinicalRole {\n  id: number;\n  name: string;\n  display_name: string;\n  description: string;\n  permissions: {\n    view: string[];\n    add: string[];\n    update: string[];\n    delete: string[];\n  };\n  hierarchy_level: number;\n  is_system_role: boolean;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ClinicalRoleStats {\n  total_roles: number;\n  system_roles: number;\n  custom_roles: number;\n  users_with_roles: number;\n}\n\nexport interface CreateClinicalRoleData {\n  name: string;\n  display_name: string;\n  description?: string;\n  permissions: {\n    view: string[];\n    add: string[];\n    update: string[];\n    delete: string[];\n  };\n  hierarchy_level?: number;\n}\n\nexport interface UpdateClinicalRoleData extends CreateClinicalRoleData {\n  id: number;\n}\n\nexport interface UserWithRole {\n  id: number;\n  username: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  assigned_at: string;\n  expires_at?: string;\n  is_active: boolean;\n}\n\n// Get all clinical roles\nexport const getAllClinicalRoles = async () => {\n  try {\n    const response = await axiosInstance.get(\"/api/clinical-roles\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching clinical roles:\", error);\n    throw error;\n  }\n};\n\n// Get clinical role by ID\nexport const getClinicalRoleById = async (id: number): Promise<ClinicalRole | null> => {\n  try {\n    const response = await axiosInstance.get(`/api/clinical-roles/${id}`);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Error fetching clinical role:\", error);\n    return null;\n  }\n};\n\n// Create new clinical role\nexport const createClinicalRole = async (roleData: CreateClinicalRoleData): Promise<ClinicalRole | null> => {\n  try {\n    const response = await axiosInstance.post(\"/api/clinical-roles\", roleData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Error creating clinical role:\", error);\n    throw error;\n  }\n};\n\n// Update clinical role\nexport const updateClinicalRole = async (id: number, roleData: Partial<CreateClinicalRoleData>): Promise<ClinicalRole | null> => {\n  try {\n    const response = await axiosInstance.put(`/api/clinical-roles/${id}`, roleData);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Error updating clinical role:\", error);\n    throw error;\n  }\n};\n\n// Delete clinical role\nexport const deleteClinicalRole = async (id: number): Promise<boolean> => {\n  try {\n    await axiosInstance.delete(`/api/clinical-roles/${id}`);\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting clinical role:\", error);\n    throw error;\n  }\n};\n\n// Get clinical role statistics\nexport const getClinicalRoleStats = async (): Promise<ClinicalRoleStats> => {\n  try {\n    const response = await axiosInstance.get(\"/api/clinical-roles/stats\");\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Error fetching clinical role stats:\", error);\n    throw error;\n  }\n};\n\n// Get users with specific clinical role\nexport const getUsersWithRole = async (roleId: number): Promise<{ role: ClinicalRole; users: UserWithRole[] }> => {\n  try {\n    const response = await axiosInstance.get(`/api/clinical-roles/${roleId}/users`);\n    return response.data.data;\n  } catch (error) {\n    console.error(\"Error fetching users with role:\", error);\n    throw error;\n  }\n};\n\n// Assign clinical role to user\nexport const assignRoleToUser = async (roleId: number, userId: number, expiresAt?: string): Promise<boolean> => {\n  try {\n    await axiosInstance.post(`/api/clinical-roles/${roleId}/users/${userId}`, {\n      expires_at: expiresAt\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error assigning role to user:\", error);\n    throw error;\n  }\n};\n\n// Remove clinical role from user\nexport const removeRoleFromUser = async (roleId: number, userId: number): Promise<boolean> => {\n  try {\n    await axiosInstance.delete(`/api/clinical-roles/${roleId}/users/${userId}`);\n    return true;\n  } catch (error) {\n    console.error(\"Error removing role from user:\", error);\n    throw error;\n  }\n};\n"],"names":["getAllClinicalRoles","axiosInstance","error","createClinicalRole","roleData","updateClinicalRole","id","deleteClinicalRole","getClinicalRoleStats"],"mappings":"wCAwDO,MAAMA,EAAsB,SAAY,CACzC,GAAA,CAEF,OADiB,MAAMC,EAAc,IAAI,qBAAqB,GAC9C,WACTC,EAAO,CACN,cAAA,MAAM,iCAAkCA,CAAK,EAC/CA,CAAA,CAEV,EAcaC,EAAqB,MAAOC,GAAmE,CACtG,GAAA,CAEF,OADiB,MAAMH,EAAc,KAAK,sBAAuBG,CAAQ,GACzD,KAAK,WACdF,EAAO,CACN,cAAA,MAAM,gCAAiCA,CAAK,EAC9CA,CAAA,CAEV,EAGaG,EAAqB,MAAOC,EAAYF,IAA4E,CAC3H,GAAA,CAEF,OADiB,MAAMH,EAAc,IAAI,uBAAuBK,CAAE,GAAIF,CAAQ,GAC9D,KAAK,WACdF,EAAO,CACN,cAAA,MAAM,gCAAiCA,CAAK,EAC9CA,CAAA,CAEV,EAGaK,EAAqB,MAAOD,GAAiC,CACpE,GAAA,CACF,aAAML,EAAc,OAAO,uBAAuBK,CAAE,EAAE,EAC/C,SACAJ,EAAO,CACN,cAAA,MAAM,gCAAiCA,CAAK,EAC9CA,CAAA,CAEV,EAGaM,EAAuB,SAAwC,CACtE,GAAA,CAEF,OADiB,MAAMP,EAAc,IAAI,2BAA2B,GACpD,KAAK,WACdC,EAAO,CACN,cAAA,MAAM,sCAAuCA,CAAK,EACpDA,CAAA,CAEV"}