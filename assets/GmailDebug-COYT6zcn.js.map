{"version":3,"file":"GmailDebug-COYT6zcn.js","sources":["../../src/pages/Debug/GmailDebug.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Mail, User, Clock, Database, RefreshCw } from 'lucide-react';\nimport { toast } from 'sonner';\nimport axiosInstance from '@/api/axios/axiosInstance';\n\ninterface GmailConnection {\n  userId: number;\n  userEmail: string;\n  userName: string;\n  tokenType: string;\n  expiryDate: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface DebugData {\n  totalConnections: number;\n  connections: GmailConnection[];\n  requestedBy: {\n    userId: number;\n    userEmail: string;\n  };\n}\n\ninterface CurrentUserStatus {\n  isConnected: boolean;\n  profile: {\n    email: string;\n    messagesTotal: number;\n    threadsTotal: number;\n  } | null;\n  userId: number;\n  requestingUser: string;\n}\n\nconst GmailDebug: React.FC = () => {\n  const [debugData, setDebugData] = useState<DebugData | null>(null);\n  const [currentUserStatus, setCurrentUserStatus] = useState<CurrentUserStatus | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [statusLoading, setStatusLoading] = useState(false);\n\n  const fetchDebugData = async () => {\n    setLoading(true);\n    try {\n      const response = await axiosInstance.get('/api/gmail/debug/connections');\n      if (response.data.success) {\n        setDebugData(response.data.data);\n        toast.success(`Found ${response.data.data.totalConnections} Gmail connections`);\n      } else {\n        toast.error(response.data.message || 'Failed to fetch debug data');\n      }\n    } catch (error: any) {\n      console.error('Error fetching debug data:', error);\n      const message = error.response?.data?.message || 'Failed to fetch debug data';\n      toast.error(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCurrentUserStatus = async () => {\n    setStatusLoading(true);\n    try {\n      const response = await axiosInstance.get('/api/gmail/auth/status');\n      if (response.data.success) {\n        setCurrentUserStatus(response.data.data);\n        toast.success('Current user Gmail status fetched');\n      } else {\n        toast.error(response.data.message || 'Failed to fetch current user status');\n      }\n    } catch (error: any) {\n      console.error('Error fetching current user status:', error);\n      const message = error.response?.data?.message || 'Failed to fetch current user status';\n      toast.error(message);\n    } finally {\n      setStatusLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCurrentUserStatus();\n  }, []);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const isExpired = (expiryDate: string | null) => {\n    if (!expiryDate) return false;\n    return new Date(expiryDate) < new Date();\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Gmail Debug Dashboard</h1>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={fetchCurrentUserStatus}\n            disabled={statusLoading}\n            variant=\"outline\"\n          >\n            {statusLoading ? (\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            Refresh Status\n          </Button>\n          <Button\n            onClick={fetchDebugData}\n            disabled={loading}\n          >\n            {loading ? (\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n            ) : (\n              <Database className=\"h-4 w-4 mr-2\" />\n            )}\n            Load All Connections\n          </Button>\n        </div>\n      </div>\n\n      {/* Current User Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Current User Gmail Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {currentUserStatus ? (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">User ID</p>\n                  <p className=\"font-mono\">{currentUserStatus.userId}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Requesting User</p>\n                  <p className=\"font-mono\">{currentUserStatus.requestingUser}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Connection Status</p>\n                  <Badge variant={currentUserStatus.isConnected ? \"default\" : \"secondary\"}>\n                    {currentUserStatus.isConnected ? \"Connected\" : \"Not Connected\"}\n                  </Badge>\n                </div>\n                {currentUserStatus.profile && (\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Connected Gmail</p>\n                    <p className=\"font-mono\">{currentUserStatus.profile.email}</p>\n                  </div>\n                )}\n              </div>\n              \n              {currentUserStatus.profile && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Messages Total</p>\n                    <p className=\"font-mono\">{currentUserStatus.profile.messagesTotal}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Threads Total</p>\n                    <p className=\"font-mono\">{currentUserStatus.profile.threadsTotal}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <p className=\"text-gray-500\">Click \"Refresh Status\" to load current user status</p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* All Gmail Connections */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Mail className=\"h-5 w-5\" />\n            All Gmail Connections\n            {debugData && (\n              <Badge variant=\"outline\">\n                {debugData.totalConnections} total\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {debugData ? (\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-gray-600 mb-4\">\n                Requested by: {debugData.requestedBy.userEmail} (ID: {debugData.requestedBy.userId})\n              </div>\n              \n              {debugData.connections.length === 0 ? (\n                <p className=\"text-gray-500\">No Gmail connections found</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {debugData.connections.map((connection, index) => (\n                    <div\n                      key={`${connection.userId}-${index}`}\n                      className=\"border rounded-lg p-4 space-y-2\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4\" />\n                          <span className=\"font-medium\">{connection.userName}</span>\n                          <Badge variant=\"outline\">ID: {connection.userId}</Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={isExpired(connection.expiryDate) ? \"destructive\" : \"default\"}>\n                            {connection.tokenType}\n                          </Badge>\n                          {isExpired(connection.expiryDate) && (\n                            <Badge variant=\"destructive\">Expired</Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm\">\n                        <div>\n                          <span className=\"text-gray-600\">Email: </span>\n                          <span className=\"font-mono\">{connection.userEmail}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Created: </span>\n                          <span className=\"font-mono\">{formatDate(connection.createdAt)}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Updated: </span>\n                          <span className=\"font-mono\">{formatDate(connection.updatedAt)}</span>\n                        </div>\n                      </div>\n                      \n                      {connection.expiryDate && (\n                        <div className=\"text-sm\">\n                          <span className=\"text-gray-600\">Expires: </span>\n                          <span className={`font-mono ${isExpired(connection.expiryDate) ? 'text-red-600' : 'text-green-600'}`}>\n                            {formatDate(connection.expiryDate)}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ) : (\n            <p className=\"text-gray-500\">Click \"Load All Connections\" to see all Gmail connections in the database</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default GmailDebug;\n"],"names":["GmailDebug","debugData","setDebugData","useState","currentUserStatus","setCurrentUserStatus","loading","setLoading","statusLoading","setStatusLoading","fetchDebugData","response","axiosInstance","toast","error","message","_b","_a","fetchCurrentUserStatus","useEffect","formatDate","dateString","isExpired","expiryDate","jsxs","jsx","Button","Loader2","RefreshCw","Database","Card","CardHeader","CardTitle","User","CardContent","Badge","Mail","connection","index"],"mappings":"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"}