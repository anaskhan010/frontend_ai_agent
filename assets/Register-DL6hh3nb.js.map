{"version":3,"file":"Register-DL6hh3nb.js","sources":["../../src/pages/auth/Register.tsx"],"sourcesContent":["import {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport AuthCard from \"@/components/auth/AuthCard\";\r\n\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Define the schema with 'email' and 'password'\r\nconst FormSchema = z.object({\r\n  email: z.string().email({ message: \"Invalid email address\" }),\r\n  password: z\r\n    .string()\r\n    .min(4, { message: \"Password must be at least 6 characters\" })\r\n    .max(100),\r\n});\r\n\r\n// Define the type inferred from the schema\r\ntype FormData = z.infer<typeof FormSchema>;\r\n\r\nconst Register = () => {\r\n  const form = useForm<FormData>({\r\n    resolver: zodResolver(FormSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  // Handle form submission\r\n  const onSubmit = (values: FormData) => {\r\n    console.log(\"Form Submitted:\", values);\r\n\r\n    // You can perform further actions here, such as sending data to an API\r\n  };\r\n\r\n  return (\r\n    <AuthCard>\r\n      <Form {...form}>\r\n        <h1 className=\"text-3xl text-foreground font-bold tracking-wide mb-2\">\r\n          Create Account\r\n        </h1>\r\n        <p className=\"text-muted-foreground mb-6\">Sign up to get started with our platform</p>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          {/* Email Field */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"email\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className=\"text-sm font-medium\">Email</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Enter your email\"\r\n                    {...field}\r\n                    className=\"bg-white border-[#E4E8F0]\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Password Field */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"password\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className=\"text-sm font-medium\">Password</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"password\"\r\n                    placeholder=\"Create a password\"\r\n                    {...field}\r\n                    className=\"bg-white border-[#E4E8F0]\"\r\n                  />\r\n                </FormControl>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Password must be at least 6 characters\r\n                </p>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Submit Button */}\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"w-full mt-4\"\r\n            style={{\r\n              background: 'linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary) / 0.9))'\r\n            }}\r\n          >\r\n            Create Account\r\n          </Button>\r\n\r\n          {/* Extra Links */}\r\n          <div className=\"w-full flex items-center justify-center pt-4\">\r\n            <span className=\"text-sm text-muted-foreground\">\r\n              Already have an account?{\" \"}\r\n              <Link to=\"/login\" className=\"text-primary font-medium hover:underline\">\r\n                Sign in\r\n              </Link>\r\n            </span>\r\n          </div>\r\n        </form>\r\n      </Form>\r\n    </AuthCard>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["FormSchema","z","Register","form","useForm","zodResolver","onSubmit","values","jsx","AuthCard","jsxs","Form","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","Button","Link"],"mappings":"udAmBA,MAAMA,EAAaC,EAAE,OAAO,CAC1B,MAAOA,EAAE,OAAO,EAAE,MAAM,CAAE,QAAS,wBAAyB,EAC5D,SAAUA,EACP,OAAO,EACP,IAAI,EAAG,CAAE,QAAS,wCAAyC,CAAC,EAC5D,IAAI,GAAG,CACZ,CAAC,EAKKC,EAAW,IAAM,CACrB,MAAMC,EAAOC,EAAkB,CAC7B,SAAUC,EAAYL,CAAU,EAChC,cAAe,CACb,MAAO,GACP,SAAU,EAAA,CACZ,CACD,EAGKM,EAAYC,GAAqB,CAC7B,QAAA,IAAI,kBAAmBA,CAAM,CAGvC,EAEA,OACGC,EAAA,IAAAC,EAAA,CACC,SAACC,EAAA,KAAAC,EAAA,CAAM,GAAGR,EACR,SAAA,CAACK,EAAA,IAAA,KAAA,CAAG,UAAU,wDAAwD,SAEtE,iBAAA,EACCA,EAAA,IAAA,IAAA,CAAE,UAAU,6BAA6B,SAAwC,2CAAA,EAClFE,OAAC,QAAK,SAAUP,EAAK,aAAaG,CAAQ,EAAG,UAAU,YAErD,SAAA,CAAAE,EAAA,IAACI,EAAA,CACC,QAAST,EAAK,QACd,KAAK,QACL,OAAQ,CAAC,CAAE,MAAAU,CAAM,WACdC,EACC,CAAA,SAAA,CAACN,EAAA,IAAAO,EAAA,CAAU,UAAU,sBAAsB,SAAK,QAAA,QAC/CC,EACC,CAAA,SAAAR,EAAA,IAACS,EAAA,CACC,YAAY,mBACX,GAAGJ,EACJ,UAAU,2BAAA,CAAA,EAEd,QACCK,EAAY,CAAA,CAAA,CAAA,CACf,CAAA,CAAA,CAEJ,EAGAV,EAAA,IAACI,EAAA,CACC,QAAST,EAAK,QACd,KAAK,WACL,OAAQ,CAAC,CAAE,MAAAU,CAAM,WACdC,EACC,CAAA,SAAA,CAACN,EAAA,IAAAO,EAAA,CAAU,UAAU,sBAAsB,SAAQ,WAAA,QAClDC,EACC,CAAA,SAAAR,EAAA,IAACS,EAAA,CACC,KAAK,WACL,YAAY,oBACX,GAAGJ,EACJ,UAAU,2BAAA,CAAA,EAEd,EACCL,EAAA,IAAA,IAAA,CAAE,UAAU,qCAAqC,SAElD,yCAAA,QACCU,EAAY,CAAA,CAAA,CAAA,CACf,CAAA,CAAA,CAEJ,EAGAV,EAAA,IAACW,EAAA,CACC,KAAK,SACL,UAAU,cACV,MAAO,CACL,WAAY,yEACd,EACD,SAAA,gBAAA,CAED,QAGC,MAAI,CAAA,UAAU,+CACb,SAACT,EAAA,KAAA,OAAA,CAAK,UAAU,gCAAgC,SAAA,CAAA,2BACrB,UACxBU,EAAK,CAAA,GAAG,SAAS,UAAU,2CAA2C,SAEvE,SAAA,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAEJ"}